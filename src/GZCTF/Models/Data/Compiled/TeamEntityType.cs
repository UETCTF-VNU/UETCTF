// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;

#pragma warning disable 219, 612, 618
#nullable disable

namespace GZCTF.Models.Data.Compiled
{
    internal partial class TeamEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "GZCTF.Models.Data.Team",
                typeof(Team),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(Team).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Team).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "integer"));
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            var avatarHash = runtimeEntityType.AddProperty(
                "AvatarHash",
                typeof(string),
                propertyInfo: typeof(Team).GetProperty("AvatarHash", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Team).GetField("<AvatarHash>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 64);
            avatarHash.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "character varying(64)",
                    size: 64));
            avatarHash.TypeMapping = ((NpgsqlStringTypeMapping)avatarHash.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
        avatarHash.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var bio = runtimeEntityType.AddProperty(
            "Bio",
            typeof(string),
            propertyInfo: typeof(Team).GetProperty("Bio", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(Team).GetField("<Bio>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true,
            maxLength: 32);
        bio.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
            comparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            keyComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            providerValueComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "character varying(32)",
                size: 32));
        bio.TypeMapping = ((NpgsqlStringTypeMapping)bio.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
    bio.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

    var captainId = runtimeEntityType.AddProperty(
        "CaptainId",
        typeof(Guid),
        propertyInfo: typeof(Team).GetProperty("CaptainId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Team).GetField("<CaptainId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
    captainId.TypeMapping = GuidTypeMapping.Default.Clone(
        comparer: new ValueComparer<Guid>(
            (Guid v1, Guid v2) => v1 == v2,
            (Guid v) => v.GetHashCode(),
            (Guid v) => v),
        keyComparer: new ValueComparer<Guid>(
            (Guid v1, Guid v2) => v1 == v2,
            (Guid v) => v.GetHashCode(),
            (Guid v) => v),
        providerValueComparer: new ValueComparer<Guid>(
            (Guid v1, Guid v2) => v1 == v2,
            (Guid v) => v.GetHashCode(),
            (Guid v) => v),
        mappingInfo: new RelationalTypeMappingInfo(
            storeTypeName: "uuid"));
    captainId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

    var inviteToken = runtimeEntityType.AddProperty(
        "InviteToken",
        typeof(string),
        propertyInfo: typeof(Team).GetProperty("InviteToken", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Team).GetField("<InviteToken>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        maxLength: 32);
    inviteToken.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
        comparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        keyComparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        providerValueComparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        mappingInfo: new RelationalTypeMappingInfo(
            storeTypeName: "character varying(32)",
            size: 32));
    inviteToken.TypeMapping = ((NpgsqlStringTypeMapping)inviteToken.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
inviteToken.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var locked = runtimeEntityType.AddProperty(
    "Locked",
    typeof(bool),
    propertyInfo: typeof(Team).GetProperty("Locked", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Team).GetField("<Locked>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: false);
locked.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
    comparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    keyComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    providerValueComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v));
locked.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var name = runtimeEntityType.AddProperty(
    "Name",
    typeof(string),
    propertyInfo: typeof(Team).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Team).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    maxLength: 16);
name.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "character varying(16)",
        size: 16));
name.TypeMapping = ((NpgsqlStringTypeMapping)name.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
name.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var key = runtimeEntityType.AddKey(
    new[] { id });
runtimeEntityType.SetPrimaryKey(key);

var index = runtimeEntityType.AddIndex(
    new[] { captainId });

return runtimeEntityType;
}

public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
{
    var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CaptainId") },
        principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
        principalEntityType,
        deleteBehavior: DeleteBehavior.Cascade,
        required: true);

    var captain = declaringEntityType.AddNavigation("Captain",
        runtimeForeignKey,
        onDependent: true,
        typeof(UserInfo),
        propertyInfo: typeof(Team).GetProperty("Captain", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Team).GetField("<Captain>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

    return runtimeForeignKey;
}

public static RuntimeSkipNavigation CreateSkipNavigation1(RuntimeEntityType declaringEntityType, RuntimeEntityType targetEntityType, RuntimeEntityType joinEntityType)
{
    var skipNavigation = declaringEntityType.AddSkipNavigation(
        "Games",
        targetEntityType,
        joinEntityType.FindForeignKey(
            new[] { joinEntityType.FindProperty("TeamId") },
            declaringEntityType.FindKey(new[] { declaringEntityType.FindProperty("Id") }),
            declaringEntityType),
        true,
        false,
        typeof(HashSet<Game>),
        propertyInfo: typeof(Team).GetProperty("Games", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Team).GetField("<Games>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

    var inverse = targetEntityType.FindSkipNavigation("Teams");
    if (inverse != null)
    {
        skipNavigation.Inverse = inverse;
        inverse.Inverse = skipNavigation;
    }

    return skipNavigation;
}

public static RuntimeSkipNavigation CreateSkipNavigation2(RuntimeEntityType declaringEntityType, RuntimeEntityType targetEntityType, RuntimeEntityType joinEntityType)
{
    var skipNavigation = declaringEntityType.AddSkipNavigation(
        "Members",
        targetEntityType,
        joinEntityType.FindForeignKey(
            new[] { joinEntityType.FindProperty("TeamsId") },
            declaringEntityType.FindKey(new[] { declaringEntityType.FindProperty("Id") }),
            declaringEntityType),
        true,
        false,
        typeof(HashSet<UserInfo>),
        propertyInfo: typeof(Team).GetProperty("Members", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Team).GetField("<Members>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

    var inverse = targetEntityType.FindSkipNavigation("Teams");
    if (inverse != null)
    {
        skipNavigation.Inverse = inverse;
        inverse.Inverse = skipNavigation;
    }

    return skipNavigation;
}

public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
{
    runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
    runtimeEntityType.AddAnnotation("Relational:Schema", null);
    runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
    runtimeEntityType.AddAnnotation("Relational:TableName", "Teams");
    runtimeEntityType.AddAnnotation("Relational:ViewName", null);
    runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

    Customize(runtimeEntityType);
}

static partial void Customize(RuntimeEntityType runtimeEntityType);
}
}

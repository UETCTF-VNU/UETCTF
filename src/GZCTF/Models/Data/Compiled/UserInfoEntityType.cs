// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using GZCTF.Utils;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;

#pragma warning disable 219, 612, 618
#nullable disable

namespace GZCTF.Models.Data.Compiled
{
    internal partial class UserInfoEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "GZCTF.Models.Data.UserInfo",
                typeof(UserInfo),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(IdentityUser<Guid>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<Guid>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            id.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v),
                keyComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v),
                providerValueComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "uuid"));
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var accessFailedCount = runtimeEntityType.AddProperty(
                "AccessFailedCount",
                typeof(int),
                propertyInfo: typeof(IdentityUser<Guid>).GetProperty("AccessFailedCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<Guid>).GetField("<AccessFailedCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            accessFailedCount.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "integer"));
            accessFailedCount.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var avatarHash = runtimeEntityType.AddProperty(
                "AvatarHash",
                typeof(string),
                propertyInfo: typeof(UserInfo).GetProperty("AvatarHash", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UserInfo).GetField("<AvatarHash>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 64);
            avatarHash.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "character varying(64)",
                    size: 64));
            avatarHash.TypeMapping = ((NpgsqlStringTypeMapping)avatarHash.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
        avatarHash.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var bio = runtimeEntityType.AddProperty(
            "Bio",
            typeof(string),
            propertyInfo: typeof(UserInfo).GetProperty("Bio", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(UserInfo).GetField("<Bio>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            maxLength: 63);
        bio.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
            comparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            keyComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            providerValueComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "character varying(63)",
                size: 63));
        bio.TypeMapping = ((NpgsqlStringTypeMapping)bio.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
    bio.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

    var concurrencyStamp = runtimeEntityType.AddProperty(
        "ConcurrencyStamp",
        typeof(string),
        propertyInfo: typeof(IdentityUser<Guid>).GetProperty("ConcurrencyStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(IdentityUser<Guid>).GetField("<ConcurrencyStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        nullable: true,
        concurrencyToken: true);
    concurrencyStamp.TypeMapping = StringTypeMapping.Default.Clone(
        comparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        keyComparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        providerValueComparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        mappingInfo: new RelationalTypeMappingInfo(
            dbType: System.Data.DbType.String));
    concurrencyStamp.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

    var email = runtimeEntityType.AddProperty(
        "Email",
        typeof(string),
        propertyInfo: typeof(IdentityUser<Guid>).GetProperty("Email", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(IdentityUser<Guid>).GetField("<Email>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        nullable: true,
        maxLength: 256);
    email.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
        comparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        keyComparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        providerValueComparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        mappingInfo: new RelationalTypeMappingInfo(
            storeTypeName: "character varying(256)",
            size: 256));
    email.TypeMapping = ((NpgsqlStringTypeMapping)email.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
email.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var emailConfirmed = runtimeEntityType.AddProperty(
    "EmailConfirmed",
    typeof(bool),
    propertyInfo: typeof(IdentityUser<Guid>).GetProperty("EmailConfirmed", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<Guid>).GetField("<EmailConfirmed>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: false);
emailConfirmed.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
    comparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    keyComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    providerValueComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v));
emailConfirmed.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var exerciseVisible = runtimeEntityType.AddProperty(
    "ExerciseVisible",
    typeof(bool),
    propertyInfo: typeof(UserInfo).GetProperty("ExerciseVisible", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(UserInfo).GetField("<ExerciseVisible>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    valueGenerated: ValueGenerated.OnAdd,
    sentinel: true);
exerciseVisible.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
    comparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    keyComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    providerValueComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v));
exerciseVisible.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
exerciseVisible.AddAnnotation("Relational:DefaultValue", true);

var iP = runtimeEntityType.AddProperty(
    "IP",
    typeof(string),
    propertyInfo: typeof(UserInfo).GetProperty("IP", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(UserInfo).GetField("<IP>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
iP.TypeMapping = StringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        dbType: System.Data.DbType.String));
iP.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var lastSignedInUtc = runtimeEntityType.AddProperty(
    "LastSignedInUtc",
    typeof(DateTimeOffset),
    propertyInfo: typeof(UserInfo).GetProperty("LastSignedInUtc", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(UserInfo).GetField("<LastSignedInUtc>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
lastSignedInUtc.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
    comparer: new ValueComparer<DateTimeOffset>(
        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
        (DateTimeOffset v) => v.GetHashCode(),
        (DateTimeOffset v) => v),
    keyComparer: new ValueComparer<DateTimeOffset>(
        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
        (DateTimeOffset v) => v.GetHashCode(),
        (DateTimeOffset v) => v),
    providerValueComparer: new ValueComparer<DateTimeOffset>(
        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
        (DateTimeOffset v) => v.GetHashCode(),
        (DateTimeOffset v) => v),
    clrType: typeof(DateTimeOffset),
    jsonValueReaderWriter: new NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter());
lastSignedInUtc.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var lastVisitedUtc = runtimeEntityType.AddProperty(
    "LastVisitedUtc",
    typeof(DateTimeOffset),
    propertyInfo: typeof(UserInfo).GetProperty("LastVisitedUtc", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(UserInfo).GetField("<LastVisitedUtc>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
lastVisitedUtc.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
    comparer: new ValueComparer<DateTimeOffset>(
        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
        (DateTimeOffset v) => v.GetHashCode(),
        (DateTimeOffset v) => v),
    keyComparer: new ValueComparer<DateTimeOffset>(
        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
        (DateTimeOffset v) => v.GetHashCode(),
        (DateTimeOffset v) => v),
    providerValueComparer: new ValueComparer<DateTimeOffset>(
        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
        (DateTimeOffset v) => v.GetHashCode(),
        (DateTimeOffset v) => v),
    clrType: typeof(DateTimeOffset),
    jsonValueReaderWriter: new NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter());
lastVisitedUtc.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var lockoutEnabled = runtimeEntityType.AddProperty(
    "LockoutEnabled",
    typeof(bool),
    propertyInfo: typeof(IdentityUser<Guid>).GetProperty("LockoutEnabled", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<Guid>).GetField("<LockoutEnabled>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: false);
lockoutEnabled.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
    comparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    keyComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    providerValueComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v));
lockoutEnabled.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var lockoutEnd = runtimeEntityType.AddProperty(
    "LockoutEnd",
    typeof(DateTimeOffset?),
    propertyInfo: typeof(IdentityUser<Guid>).GetProperty("LockoutEnd", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<Guid>).GetField("<LockoutEnd>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
lockoutEnd.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
    comparer: new ValueComparer<DateTimeOffset?>(
        (Nullable<DateTimeOffset> v1, Nullable<DateTimeOffset> v2) => v1.HasValue && v2.HasValue && ((DateTimeOffset)v1).EqualsExact((DateTimeOffset)v2) || !v1.HasValue && !v2.HasValue,
        (Nullable<DateTimeOffset> v) => v.HasValue ? ((DateTimeOffset)v).GetHashCode() : 0,
        (Nullable<DateTimeOffset> v) => v.HasValue ? (Nullable<DateTimeOffset>)(DateTimeOffset)v : default(Nullable<DateTimeOffset>)),
    keyComparer: new ValueComparer<DateTimeOffset?>(
        (Nullable<DateTimeOffset> v1, Nullable<DateTimeOffset> v2) => v1.HasValue && v2.HasValue && ((DateTimeOffset)v1).EqualsExact((DateTimeOffset)v2) || !v1.HasValue && !v2.HasValue,
        (Nullable<DateTimeOffset> v) => v.HasValue ? ((DateTimeOffset)v).GetHashCode() : 0,
        (Nullable<DateTimeOffset> v) => v.HasValue ? (Nullable<DateTimeOffset>)(DateTimeOffset)v : default(Nullable<DateTimeOffset>)),
    providerValueComparer: new ValueComparer<DateTimeOffset?>(
        (Nullable<DateTimeOffset> v1, Nullable<DateTimeOffset> v2) => v1.HasValue && v2.HasValue && ((DateTimeOffset)v1).EqualsExact((DateTimeOffset)v2) || !v1.HasValue && !v2.HasValue,
        (Nullable<DateTimeOffset> v) => v.HasValue ? ((DateTimeOffset)v).GetHashCode() : 0,
        (Nullable<DateTimeOffset> v) => v.HasValue ? (Nullable<DateTimeOffset>)(DateTimeOffset)v : default(Nullable<DateTimeOffset>)),
    clrType: typeof(DateTimeOffset),
    jsonValueReaderWriter: new NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter());
lockoutEnd.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var normalizedEmail = runtimeEntityType.AddProperty(
    "NormalizedEmail",
    typeof(string),
    propertyInfo: typeof(IdentityUser<Guid>).GetProperty("NormalizedEmail", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<Guid>).GetField("<NormalizedEmail>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true,
    maxLength: 256);
normalizedEmail.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "character varying(256)",
        size: 256));
normalizedEmail.TypeMapping = ((NpgsqlStringTypeMapping)normalizedEmail.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
normalizedEmail.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var normalizedUserName = runtimeEntityType.AddProperty(
    "NormalizedUserName",
    typeof(string),
    propertyInfo: typeof(IdentityUser<Guid>).GetProperty("NormalizedUserName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<Guid>).GetField("<NormalizedUserName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true,
    maxLength: 256);
normalizedUserName.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "character varying(256)",
        size: 256));
normalizedUserName.TypeMapping = ((NpgsqlStringTypeMapping)normalizedUserName.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
normalizedUserName.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var passwordHash = runtimeEntityType.AddProperty(
    "PasswordHash",
    typeof(string),
    propertyInfo: typeof(IdentityUser<Guid>).GetProperty("PasswordHash", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<Guid>).GetField("<PasswordHash>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
passwordHash.TypeMapping = StringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        dbType: System.Data.DbType.String));
passwordHash.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var phoneNumber = runtimeEntityType.AddProperty(
    "PhoneNumber",
    typeof(string),
    propertyInfo: typeof(IdentityUser<Guid>).GetProperty("PhoneNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<Guid>).GetField("<PhoneNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
phoneNumber.TypeMapping = StringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        dbType: System.Data.DbType.String));
phoneNumber.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var phoneNumberConfirmed = runtimeEntityType.AddProperty(
    "PhoneNumberConfirmed",
    typeof(bool),
    propertyInfo: typeof(IdentityUser<Guid>).GetProperty("PhoneNumberConfirmed", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<Guid>).GetField("<PhoneNumberConfirmed>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: false);
phoneNumberConfirmed.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
    comparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    keyComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    providerValueComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v));
phoneNumberConfirmed.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var realName = runtimeEntityType.AddProperty(
    "RealName",
    typeof(string),
    propertyInfo: typeof(UserInfo).GetProperty("RealName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(UserInfo).GetField("<RealName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    maxLength: 7);
realName.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "character varying(7)",
        size: 7));
realName.TypeMapping = ((NpgsqlStringTypeMapping)realName.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
realName.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var registerTimeUtc = runtimeEntityType.AddProperty(
    "RegisterTimeUtc",
    typeof(DateTimeOffset),
    propertyInfo: typeof(UserInfo).GetProperty("RegisterTimeUtc", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(UserInfo).GetField("<RegisterTimeUtc>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
registerTimeUtc.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
    comparer: new ValueComparer<DateTimeOffset>(
        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
        (DateTimeOffset v) => v.GetHashCode(),
        (DateTimeOffset v) => v),
    keyComparer: new ValueComparer<DateTimeOffset>(
        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
        (DateTimeOffset v) => v.GetHashCode(),
        (DateTimeOffset v) => v),
    providerValueComparer: new ValueComparer<DateTimeOffset>(
        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
        (DateTimeOffset v) => v.GetHashCode(),
        (DateTimeOffset v) => v),
    clrType: typeof(DateTimeOffset),
    jsonValueReaderWriter: new NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter());
registerTimeUtc.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var role = runtimeEntityType.AddProperty(
    "Role",
    typeof(Role),
    propertyInfo: typeof(UserInfo).GetProperty("Role", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(UserInfo).GetField("<Role>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    providerPropertyType: typeof(int));
role.TypeMapping = IntTypeMapping.Default.Clone(
    comparer: new ValueComparer<Role>(
        (Role v1, Role v2) => object.Equals((object)v1, (object)v2),
        (Role v) => v.GetHashCode(),
        (Role v) => v),
    keyComparer: new ValueComparer<Role>(
        (Role v1, Role v2) => object.Equals((object)v1, (object)v2),
        (Role v) => v.GetHashCode(),
        (Role v) => v),
    providerValueComparer: new ValueComparer<int>(
        (int v1, int v2) => v1 == v2,
        (int v) => v,
        (int v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "integer"),
    converter: new ValueConverter<Role, int>(
        (Role value) => (int)value,
        (int value) => (Role)value),
    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Role, int>(
        JsonInt32ReaderWriter.Instance,
        new ValueConverter<Role, int>(
            (Role value) => (int)value,
            (int value) => (Role)value)));
role.SetSentinelFromProviderValue(0);
role.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var securityStamp = runtimeEntityType.AddProperty(
    "SecurityStamp",
    typeof(string),
    propertyInfo: typeof(IdentityUser<Guid>).GetProperty("SecurityStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<Guid>).GetField("<SecurityStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
securityStamp.TypeMapping = StringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        dbType: System.Data.DbType.String));
securityStamp.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var stdNumber = runtimeEntityType.AddProperty(
    "StdNumber",
    typeof(string),
    propertyInfo: typeof(UserInfo).GetProperty("StdNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(UserInfo).GetField("<StdNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    maxLength: 31);
stdNumber.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "character varying(31)",
        size: 31));
stdNumber.TypeMapping = ((NpgsqlStringTypeMapping)stdNumber.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
stdNumber.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var twoFactorEnabled = runtimeEntityType.AddProperty(
    "TwoFactorEnabled",
    typeof(bool),
    propertyInfo: typeof(IdentityUser<Guid>).GetProperty("TwoFactorEnabled", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<Guid>).GetField("<TwoFactorEnabled>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: false);
twoFactorEnabled.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
    comparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    keyComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    providerValueComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v));
twoFactorEnabled.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var userName = runtimeEntityType.AddProperty(
    "UserName",
    typeof(string),
    propertyInfo: typeof(IdentityUser<Guid>).GetProperty("UserName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(IdentityUser<Guid>).GetField("<UserName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true,
    maxLength: 16);
userName.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "character varying(16)",
        size: 16));
userName.TypeMapping = ((NpgsqlStringTypeMapping)userName.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
userName.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var key = runtimeEntityType.AddKey(
    new[] { id });
runtimeEntityType.SetPrimaryKey(key);

var index = runtimeEntityType.AddIndex(
    new[] { normalizedEmail });
index.AddAnnotation("Relational:Name", "EmailIndex");

var index0 = runtimeEntityType.AddIndex(
    new[] { normalizedUserName },
    unique: true);
index0.AddAnnotation("Relational:Name", "UserNameIndex");

return runtimeEntityType;
}

public static RuntimeSkipNavigation CreateSkipNavigation1(RuntimeEntityType declaringEntityType, RuntimeEntityType targetEntityType, RuntimeEntityType joinEntityType)
{
    var skipNavigation = declaringEntityType.AddSkipNavigation(
        "Teams",
        targetEntityType,
        joinEntityType.FindForeignKey(
            new[] { joinEntityType.FindProperty("MembersId") },
            declaringEntityType.FindKey(new[] { declaringEntityType.FindProperty("Id") }),
            declaringEntityType),
        true,
        false,
        typeof(List<Team>),
        propertyInfo: typeof(UserInfo).GetProperty("Teams", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(UserInfo).GetField("<Teams>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

    var inverse = targetEntityType.FindSkipNavigation("Members");
    if (inverse != null)
    {
        skipNavigation.Inverse = inverse;
        inverse.Inverse = skipNavigation;
    }

    return skipNavigation;
}

public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
{
    runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
    runtimeEntityType.AddAnnotation("Relational:Schema", null);
    runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
    runtimeEntityType.AddAnnotation("Relational:TableName", "AspNetUsers");
    runtimeEntityType.AddAnnotation("Relational:ViewName", null);
    runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

    Customize(runtimeEntityType);
}

static partial void Customize(RuntimeEntityType runtimeEntityType);
}
}

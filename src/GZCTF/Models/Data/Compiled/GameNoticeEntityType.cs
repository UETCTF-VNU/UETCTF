// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text.Json;
using GZCTF.Models.Internal;
using GZCTF.Utils;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;

#pragma warning disable 219, 612, 618
#nullable disable

namespace GZCTF.Models.Data.Compiled
{
    internal partial class GameNoticeEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "GZCTF.Models.Data.GameNotice",
                typeof(GameNotice),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(GameNotice).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GameNotice).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "integer"));
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            var gameId = runtimeEntityType.AddProperty(
                "GameId",
                typeof(int),
                propertyInfo: typeof(GameNotice).GetProperty("GameId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GameNotice).GetField("<GameId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            gameId.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "integer"));
            gameId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var publishTimeUtc = runtimeEntityType.AddProperty(
                "PublishTimeUtc",
                typeof(DateTimeOffset),
                propertyInfo: typeof(GameNotice).GetProperty("PublishTimeUtc", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GameNotice).GetField("<PublishTimeUtc>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
            publishTimeUtc.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => v.GetHashCode(),
                    (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => v.GetHashCode(),
                    (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => v.GetHashCode(),
                    (DateTimeOffset v) => v),
                clrType: typeof(DateTimeOffset),
                jsonValueReaderWriter: new NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter());
            publishTimeUtc.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            publishTimeUtc.AddAnnotation("Relational:JsonPropertyName", "time");

            var type = runtimeEntityType.AddProperty(
                "Type",
                typeof(NoticeType),
                propertyInfo: typeof(FormattableData<NoticeType>).GetProperty("Type", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FormattableData<NoticeType>).GetField("<Type>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            type.TypeMapping = ByteTypeMapping.Default.Clone(
                comparer: new ValueComparer<NoticeType>(
                    (NoticeType v1, NoticeType v2) => object.Equals((object)v1, (object)v2),
                    (NoticeType v) => v.GetHashCode(),
                    (NoticeType v) => v),
                keyComparer: new ValueComparer<NoticeType>(
                    (NoticeType v1, NoticeType v2) => object.Equals((object)v1, (object)v2),
                    (NoticeType v) => v.GetHashCode(),
                    (NoticeType v) => v),
                providerValueComparer: new ValueComparer<byte>(
                    (byte v1, byte v2) => v1 == v2,
                    (byte v) => (int)v,
                    (byte v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "smallint"),
                converter: new ValueConverter<NoticeType, byte>(
                    (NoticeType value) => (byte)value,
                    (byte value) => (NoticeType)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<NoticeType, byte>(
                    JsonByteReaderWriter.Instance,
                    new ValueConverter<NoticeType, byte>(
                        (NoticeType value) => (byte)value,
                        (byte value) => (NoticeType)value)));
            type.SetSentinelFromProviderValue((byte)0);
            type.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var values = runtimeEntityType.AddProperty(
                "Values",
                typeof(List<string>),
                propertyInfo: typeof(FormattableData<NoticeType>).GetProperty("Values", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FormattableData<NoticeType>).GetField("<Values>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            values.TypeMapping = StringTypeMapping.Default.Clone(
                comparer: new ValueComparer<List<string>>(
                    (List<string> c1, List<string> c2) => (object)c1 == null && (object)c2 == null || (object)c2 != null && (object)c1 != null && ((IEnumerable<string>)c1).SequenceEqual((IEnumerable<string>)c2),
                    (List<string> c) => ((IEnumerable<string>)c).Aggregate(0, (int a, string v) => HashCode.Combine(a, v.GetHashCode())),
                    (List<string> v) => v),
                keyComparer: new ValueComparer<List<string>>(
                    (List<string> c1, List<string> c2) => (object)c1 == null && (object)c2 == null || (object)c2 != null && (object)c1 != null && ((IEnumerable<string>)c1).SequenceEqual((IEnumerable<string>)c2),
                    (List<string> c) => ((IEnumerable<string>)c).Aggregate(0, (int a, string v) => HashCode.Combine(a, v.GetHashCode())),
                    (List<string> v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<List<string>, string>(
                    (List<string> v) => JsonSerializer.Serialize(v ?? new List<string>(), AppDbContext.JsonOptions),
                    (string v) => JsonSerializer.Deserialize<List<string>>(v, AppDbContext.JsonOptions)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<List<string>, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<List<string>, string>(
                        (List<string> v) => JsonSerializer.Serialize(v ?? new List<string>(), AppDbContext.JsonOptions),
                        (string v) => JsonSerializer.Deserialize<List<string>>(v, AppDbContext.JsonOptions))));
            values.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { gameId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("GameId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var game = declaringEntityType.AddNavigation("Game",
                runtimeForeignKey,
                onDependent: true,
                typeof(Game),
                propertyInfo: typeof(GameNotice).GetProperty("Game", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GameNotice).GetField("<Game>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var gameNotices = principalEntityType.AddNavigation("GameNotices",
                runtimeForeignKey,
                onDependent: false,
                typeof(List<GameNotice>),
                propertyInfo: typeof(Game).GetProperty("GameNotices", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<GameNotices>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "GameNotices");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}

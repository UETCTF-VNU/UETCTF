// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text.Json;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;

#pragma warning disable 219, 612, 618
#nullable disable

namespace GZCTF.Models.Data.Compiled
{
    internal partial class GameEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "GZCTF.Models.Data.Game",
                typeof(Game),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(Game).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "integer"));
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            var acceptWithoutReview = runtimeEntityType.AddProperty(
                "AcceptWithoutReview",
                typeof(bool),
                propertyInfo: typeof(Game).GetProperty("AcceptWithoutReview", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<AcceptWithoutReview>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            acceptWithoutReview.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v));
            acceptWithoutReview.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var bloodBonusValue = runtimeEntityType.AddProperty(
                "BloodBonusValue",
                typeof(long),
                propertyInfo: typeof(Game).GetProperty("BloodBonusValue", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<BloodBonusValue>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            bloodBonusValue.TypeMapping = LongTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                keyComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v));
            bloodBonusValue.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            bloodBonusValue.AddAnnotation("Relational:ColumnName", "BloodBonus");

            var containerCountLimit = runtimeEntityType.AddProperty(
                "ContainerCountLimit",
                typeof(int),
                propertyInfo: typeof(Game).GetProperty("ContainerCountLimit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<ContainerCountLimit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            containerCountLimit.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "integer"));
            containerCountLimit.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var content = runtimeEntityType.AddProperty(
                "Content",
                typeof(string),
                propertyInfo: typeof(Game).GetProperty("Content", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<Content>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            content.TypeMapping = StringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    dbType: System.Data.DbType.String));
            content.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var endTimeUtc = runtimeEntityType.AddProperty(
                "EndTimeUtc",
                typeof(DateTimeOffset),
                propertyInfo: typeof(Game).GetProperty("EndTimeUtc", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<EndTimeUtc>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
            endTimeUtc.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => v.GetHashCode(),
                    (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => v.GetHashCode(),
                    (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => v.GetHashCode(),
                    (DateTimeOffset v) => v),
                clrType: typeof(DateTimeOffset),
                jsonValueReaderWriter: new NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter());
            endTimeUtc.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            endTimeUtc.AddAnnotation("Relational:JsonPropertyName", "end");

            var hidden = runtimeEntityType.AddProperty(
                "Hidden",
                typeof(bool),
                propertyInfo: typeof(Game).GetProperty("Hidden", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<Hidden>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            hidden.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v));
            hidden.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var inviteCode = runtimeEntityType.AddProperty(
                "InviteCode",
                typeof(string),
                propertyInfo: typeof(Game).GetProperty("InviteCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<InviteCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            inviteCode.TypeMapping = StringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    dbType: System.Data.DbType.String));
            inviteCode.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var organizations = runtimeEntityType.AddProperty(
                "Organizations",
                typeof(HashSet<string>),
                propertyInfo: typeof(Game).GetProperty("Organizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<Organizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            organizations.TypeMapping = StringTypeMapping.Default.Clone(
                comparer: new ValueComparer<HashSet<string>>(
                    (HashSet<string> c1, HashSet<string> c2) => (object)c1 == null && (object)c2 == null || (object)c2 != null && (object)c1 != null && ((IEnumerable<string>)c1).SequenceEqual((IEnumerable<string>)c2),
                    (HashSet<string> c) => ((IEnumerable<string>)c).Aggregate(0, (int a, string v) => HashCode.Combine(a, v.GetHashCode())),
                    (HashSet<string> v) => v),
                keyComparer: new ValueComparer<HashSet<string>>(
                    (HashSet<string> c1, HashSet<string> c2) => (object)c1 == null && (object)c2 == null || (object)c2 != null && (object)c1 != null && ((IEnumerable<string>)c1).SequenceEqual((IEnumerable<string>)c2),
                    (HashSet<string> c) => ((IEnumerable<string>)c).Aggregate(0, (int a, string v) => HashCode.Combine(a, v.GetHashCode())),
                    (HashSet<string> v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<HashSet<string>, string>(
                    (HashSet<string> v) => JsonSerializer.Serialize(v ?? new HashSet<string>(), AppDbContext.JsonOptions),
                    (string v) => JsonSerializer.Deserialize<HashSet<string>>(v, AppDbContext.JsonOptions)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<HashSet<string>, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<HashSet<string>, string>(
                        (HashSet<string> v) => JsonSerializer.Serialize(v ?? new HashSet<string>(), AppDbContext.JsonOptions),
                        (string v) => JsonSerializer.Deserialize<HashSet<string>>(v, AppDbContext.JsonOptions))));
            organizations.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var posterHash = runtimeEntityType.AddProperty(
                "PosterHash",
                typeof(string),
                propertyInfo: typeof(Game).GetProperty("PosterHash", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Game).GetField("<PosterHash>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 64);
            posterHash.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "character varying(64)",
                    size: 64));
            posterHash.TypeMapping = ((NpgsqlStringTypeMapping)posterHash.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
        posterHash.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var practiceMode = runtimeEntityType.AddProperty(
            "PracticeMode",
            typeof(bool),
            propertyInfo: typeof(Game).GetProperty("PracticeMode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(Game).GetField("<PracticeMode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            sentinel: false);
        practiceMode.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
            comparer: new ValueComparer<bool>(
                (bool v1, bool v2) => v1 == v2,
                (bool v) => v.GetHashCode(),
                (bool v) => v),
            keyComparer: new ValueComparer<bool>(
                (bool v1, bool v2) => v1 == v2,
                (bool v) => v.GetHashCode(),
                (bool v) => v),
            providerValueComparer: new ValueComparer<bool>(
                (bool v1, bool v2) => v1 == v2,
                (bool v) => v.GetHashCode(),
                (bool v) => v));
        practiceMode.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var privateKey = runtimeEntityType.AddProperty(
            "PrivateKey",
            typeof(string),
            propertyInfo: typeof(Game).GetProperty("PrivateKey", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(Game).GetField("<PrivateKey>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            maxLength: 63);
        privateKey.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
            comparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            keyComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            providerValueComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "character varying(63)",
                size: 63));
        privateKey.TypeMapping = ((NpgsqlStringTypeMapping)privateKey.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
    privateKey.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

    var publicKey = runtimeEntityType.AddProperty(
        "PublicKey",
        typeof(string),
        propertyInfo: typeof(Game).GetProperty("PublicKey", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Game).GetField("<PublicKey>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        maxLength: 63);
    publicKey.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
        comparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        keyComparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        providerValueComparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        mappingInfo: new RelationalTypeMappingInfo(
            storeTypeName: "character varying(63)",
            size: 63));
    publicKey.TypeMapping = ((NpgsqlStringTypeMapping)publicKey.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
publicKey.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var startTimeUtc = runtimeEntityType.AddProperty(
    "StartTimeUtc",
    typeof(DateTimeOffset),
    propertyInfo: typeof(Game).GetProperty("StartTimeUtc", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Game).GetField("<StartTimeUtc>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
startTimeUtc.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
    comparer: new ValueComparer<DateTimeOffset>(
        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
        (DateTimeOffset v) => v.GetHashCode(),
        (DateTimeOffset v) => v),
    keyComparer: new ValueComparer<DateTimeOffset>(
        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
        (DateTimeOffset v) => v.GetHashCode(),
        (DateTimeOffset v) => v),
    providerValueComparer: new ValueComparer<DateTimeOffset>(
        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
        (DateTimeOffset v) => v.GetHashCode(),
        (DateTimeOffset v) => v),
    clrType: typeof(DateTimeOffset),
    jsonValueReaderWriter: new NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter());
startTimeUtc.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
startTimeUtc.AddAnnotation("Relational:JsonPropertyName", "start");

var summary = runtimeEntityType.AddProperty(
    "Summary",
    typeof(string),
    propertyInfo: typeof(Game).GetProperty("Summary", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Game).GetField("<Summary>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
summary.TypeMapping = StringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        dbType: System.Data.DbType.String));
summary.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var teamMemberCountLimit = runtimeEntityType.AddProperty(
    "TeamMemberCountLimit",
    typeof(int),
    propertyInfo: typeof(Game).GetProperty("TeamMemberCountLimit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Game).GetField("<TeamMemberCountLimit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: 0);
teamMemberCountLimit.TypeMapping = IntTypeMapping.Default.Clone(
    comparer: new ValueComparer<int>(
        (int v1, int v2) => v1 == v2,
        (int v) => v,
        (int v) => v),
    keyComparer: new ValueComparer<int>(
        (int v1, int v2) => v1 == v2,
        (int v) => v,
        (int v) => v),
    providerValueComparer: new ValueComparer<int>(
        (int v1, int v2) => v1 == v2,
        (int v) => v,
        (int v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "integer"));
teamMemberCountLimit.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var title = runtimeEntityType.AddProperty(
    "Title",
    typeof(string),
    propertyInfo: typeof(Game).GetProperty("Title", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Game).GetField("<Title>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
title.TypeMapping = StringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        dbType: System.Data.DbType.String));
title.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var writeupDeadline = runtimeEntityType.AddProperty(
    "WriteupDeadline",
    typeof(DateTimeOffset),
    propertyInfo: typeof(Game).GetProperty("WriteupDeadline", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Game).GetField("<WriteupDeadline>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
writeupDeadline.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
    comparer: new ValueComparer<DateTimeOffset>(
        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
        (DateTimeOffset v) => v.GetHashCode(),
        (DateTimeOffset v) => v),
    keyComparer: new ValueComparer<DateTimeOffset>(
        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
        (DateTimeOffset v) => v.GetHashCode(),
        (DateTimeOffset v) => v),
    providerValueComparer: new ValueComparer<DateTimeOffset>(
        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
        (DateTimeOffset v) => v.GetHashCode(),
        (DateTimeOffset v) => v),
    clrType: typeof(DateTimeOffset),
    jsonValueReaderWriter: new NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter());
writeupDeadline.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var writeupNote = runtimeEntityType.AddProperty(
    "WriteupNote",
    typeof(string),
    propertyInfo: typeof(Game).GetProperty("WriteupNote", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Game).GetField("<WriteupNote>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
writeupNote.TypeMapping = StringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        dbType: System.Data.DbType.String));
writeupNote.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var writeupRequired = runtimeEntityType.AddProperty(
    "WriteupRequired",
    typeof(bool),
    propertyInfo: typeof(Game).GetProperty("WriteupRequired", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Game).GetField("<WriteupRequired>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    sentinel: false);
writeupRequired.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
    comparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    keyComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v),
    providerValueComparer: new ValueComparer<bool>(
        (bool v1, bool v2) => v1 == v2,
        (bool v) => v.GetHashCode(),
        (bool v) => v));
writeupRequired.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

var key = runtimeEntityType.AddKey(
    new[] { id });
runtimeEntityType.SetPrimaryKey(key);

return runtimeEntityType;
}

public static RuntimeSkipNavigation CreateSkipNavigation1(RuntimeEntityType declaringEntityType, RuntimeEntityType targetEntityType, RuntimeEntityType joinEntityType)
{
    var skipNavigation = declaringEntityType.AddSkipNavigation(
        "Teams",
        targetEntityType,
        joinEntityType.FindForeignKey(
            new[] { joinEntityType.FindProperty("GameId") },
            declaringEntityType.FindKey(new[] { declaringEntityType.FindProperty("Id") }),
            declaringEntityType),
        true,
        false,
        typeof(ICollection<Team>),
        propertyInfo: typeof(Game).GetProperty("Teams", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Game).GetField("<Teams>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

    var inverse = targetEntityType.FindSkipNavigation("Games");
    if (inverse != null)
    {
        skipNavigation.Inverse = inverse;
        inverse.Inverse = skipNavigation;
    }

    return skipNavigation;
}

public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
{
    runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
    runtimeEntityType.AddAnnotation("Relational:Schema", null);
    runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
    runtimeEntityType.AddAnnotation("Relational:TableName", "Games");
    runtimeEntityType.AddAnnotation("Relational:ViewName", null);
    runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

    Customize(runtimeEntityType);
}

static partial void Customize(RuntimeEntityType runtimeEntityType);
}
}

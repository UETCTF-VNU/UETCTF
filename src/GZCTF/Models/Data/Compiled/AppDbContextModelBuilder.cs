// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace GZCTF.Models.Data.Compiled
{
    public partial class AppDbContextModel
    {
        partial void Initialize()
        {
            var attachment = AttachmentEntityType.Create(this);
            var cheatInfo = CheatInfoEntityType.Create(this);
            var config = ConfigEntityType.Create(this);
            var container = ContainerEntityType.Create(this);
            var exerciseChallenge = ExerciseChallengeEntityType.Create(this);
            var exerciseDependency = ExerciseDependencyEntityType.Create(this);
            var exerciseInstance = ExerciseInstanceEntityType.Create(this);
            var flagContext = FlagContextEntityType.Create(this);
            var game = GameEntityType.Create(this);
            var gameChallenge = GameChallengeEntityType.Create(this);
            var gameEvent = GameEventEntityType.Create(this);
            var gameInstance = GameInstanceEntityType.Create(this);
            var gameNotice = GameNoticeEntityType.Create(this);
            var localFile = LocalFileEntityType.Create(this);
            var logModel = LogModelEntityType.Create(this);
            var participation = ParticipationEntityType.Create(this);
            var post = PostEntityType.Create(this);
            var submission = SubmissionEntityType.Create(this);
            var team = TeamEntityType.Create(this);
            var userInfo = UserInfoEntityType.Create(this);
            var userParticipation = UserParticipationEntityType.Create(this);
            var dataProtectionKey = DataProtectionKeyEntityType.Create(this);
            var identityRole = IdentityRoleEntityType.Create(this);
            var identityRoleClaim = IdentityRoleClaimEntityType.Create(this);
            var identityUserClaim = IdentityUserClaimEntityType.Create(this);
            var identityUserLogin = IdentityUserLoginEntityType.Create(this);
            var identityUserRole = IdentityUserRoleEntityType.Create(this);
            var identityUserToken = IdentityUserTokenEntityType.Create(this);
            var teamUserInfo = TeamUserInfoEntityType.Create(this);

            AttachmentEntityType.CreateForeignKey1(attachment, localFile);
            CheatInfoEntityType.CreateForeignKey1(cheatInfo, game);
            CheatInfoEntityType.CreateForeignKey2(cheatInfo, participation);
            CheatInfoEntityType.CreateForeignKey3(cheatInfo, submission);
            CheatInfoEntityType.CreateForeignKey4(cheatInfo, participation);
            ExerciseChallengeEntityType.CreateForeignKey1(exerciseChallenge, attachment);
            ExerciseChallengeEntityType.CreateForeignKey2(exerciseChallenge, container);
            ExerciseDependencyEntityType.CreateForeignKey1(exerciseDependency, exerciseChallenge);
            ExerciseDependencyEntityType.CreateForeignKey2(exerciseDependency, exerciseChallenge);
            ExerciseInstanceEntityType.CreateForeignKey1(exerciseInstance, container);
            ExerciseInstanceEntityType.CreateForeignKey2(exerciseInstance, exerciseChallenge);
            ExerciseInstanceEntityType.CreateForeignKey3(exerciseInstance, flagContext);
            ExerciseInstanceEntityType.CreateForeignKey4(exerciseInstance, userInfo);
            FlagContextEntityType.CreateForeignKey1(flagContext, attachment);
            FlagContextEntityType.CreateForeignKey2(flagContext, gameChallenge);
            FlagContextEntityType.CreateForeignKey3(flagContext, exerciseChallenge);
            GameChallengeEntityType.CreateForeignKey1(gameChallenge, attachment);
            GameChallengeEntityType.CreateForeignKey2(gameChallenge, game);
            GameChallengeEntityType.CreateForeignKey3(gameChallenge, container);
            GameEventEntityType.CreateForeignKey1(gameEvent, game);
            GameEventEntityType.CreateForeignKey2(gameEvent, team);
            GameEventEntityType.CreateForeignKey3(gameEvent, userInfo);
            GameInstanceEntityType.CreateForeignKey1(gameInstance, gameChallenge);
            GameInstanceEntityType.CreateForeignKey2(gameInstance, container);
            GameInstanceEntityType.CreateForeignKey3(gameInstance, flagContext);
            GameInstanceEntityType.CreateForeignKey4(gameInstance, participation);
            GameNoticeEntityType.CreateForeignKey1(gameNotice, game);
            ParticipationEntityType.CreateForeignKey1(participation, game);
            ParticipationEntityType.CreateForeignKey2(participation, team);
            ParticipationEntityType.CreateForeignKey3(participation, localFile);
            PostEntityType.CreateForeignKey1(post, userInfo);
            SubmissionEntityType.CreateForeignKey1(submission, gameChallenge);
            SubmissionEntityType.CreateForeignKey2(submission, game);
            SubmissionEntityType.CreateForeignKey3(submission, participation);
            SubmissionEntityType.CreateForeignKey4(submission, team);
            SubmissionEntityType.CreateForeignKey5(submission, userInfo);
            TeamEntityType.CreateForeignKey1(team, userInfo);
            UserParticipationEntityType.CreateForeignKey1(userParticipation, game);
            UserParticipationEntityType.CreateForeignKey2(userParticipation, participation);
            UserParticipationEntityType.CreateForeignKey3(userParticipation, team);
            UserParticipationEntityType.CreateForeignKey4(userParticipation, userInfo);
            IdentityRoleClaimEntityType.CreateForeignKey1(identityRoleClaim, identityRole);
            IdentityUserClaimEntityType.CreateForeignKey1(identityUserClaim, userInfo);
            IdentityUserLoginEntityType.CreateForeignKey1(identityUserLogin, userInfo);
            IdentityUserRoleEntityType.CreateForeignKey1(identityUserRole, identityRole);
            IdentityUserRoleEntityType.CreateForeignKey2(identityUserRole, userInfo);
            IdentityUserTokenEntityType.CreateForeignKey1(identityUserToken, userInfo);
            TeamUserInfoEntityType.CreateForeignKey1(teamUserInfo, userInfo);
            TeamUserInfoEntityType.CreateForeignKey2(teamUserInfo, team);

            ExerciseChallengeEntityType.CreateSkipNavigation1(exerciseChallenge, exerciseChallenge, exerciseDependency);
            ExerciseChallengeEntityType.CreateSkipNavigation2(exerciseChallenge, exerciseChallenge, exerciseDependency);
            GameEntityType.CreateSkipNavigation1(game, team, participation);
            GameChallengeEntityType.CreateSkipNavigation1(gameChallenge, participation, gameInstance);
            ParticipationEntityType.CreateSkipNavigation1(participation, gameChallenge, gameInstance);
            TeamEntityType.CreateSkipNavigation1(team, game, participation);
            TeamEntityType.CreateSkipNavigation2(team, userInfo, teamUserInfo);
            UserInfoEntityType.CreateSkipNavigation1(userInfo, team, teamUserInfo);

            AttachmentEntityType.CreateAnnotations(attachment);
            CheatInfoEntityType.CreateAnnotations(cheatInfo);
            ConfigEntityType.CreateAnnotations(config);
            ContainerEntityType.CreateAnnotations(container);
            ExerciseChallengeEntityType.CreateAnnotations(exerciseChallenge);
            ExerciseDependencyEntityType.CreateAnnotations(exerciseDependency);
            ExerciseInstanceEntityType.CreateAnnotations(exerciseInstance);
            FlagContextEntityType.CreateAnnotations(flagContext);
            GameEntityType.CreateAnnotations(game);
            GameChallengeEntityType.CreateAnnotations(gameChallenge);
            GameEventEntityType.CreateAnnotations(gameEvent);
            GameInstanceEntityType.CreateAnnotations(gameInstance);
            GameNoticeEntityType.CreateAnnotations(gameNotice);
            LocalFileEntityType.CreateAnnotations(localFile);
            LogModelEntityType.CreateAnnotations(logModel);
            ParticipationEntityType.CreateAnnotations(participation);
            PostEntityType.CreateAnnotations(post);
            SubmissionEntityType.CreateAnnotations(submission);
            TeamEntityType.CreateAnnotations(team);
            UserInfoEntityType.CreateAnnotations(userInfo);
            UserParticipationEntityType.CreateAnnotations(userParticipation);
            DataProtectionKeyEntityType.CreateAnnotations(dataProtectionKey);
            IdentityRoleEntityType.CreateAnnotations(identityRole);
            IdentityRoleClaimEntityType.CreateAnnotations(identityRoleClaim);
            IdentityUserClaimEntityType.CreateAnnotations(identityUserClaim);
            IdentityUserLoginEntityType.CreateAnnotations(identityUserLogin);
            IdentityUserRoleEntityType.CreateAnnotations(identityUserRole);
            IdentityUserTokenEntityType.CreateAnnotations(identityUserToken);
            TeamUserInfoEntityType.CreateAnnotations(teamUserInfo);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.2");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var attachment = FindEntityType("GZCTF.Models.Data.Attachment")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            attachment.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var gZCTFModelsDataAttachmentTableBase = new TableBase("GZCTF.Models.Data.Attachment", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "integer", gZCTFModelsDataAttachmentTableBase);
            gZCTFModelsDataAttachmentTableBase.Columns.Add("Id", idColumnBase);
            var localFileIdColumnBase = new ColumnBase<ColumnMappingBase>("LocalFileId", "integer", gZCTFModelsDataAttachmentTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataAttachmentTableBase.Columns.Add("LocalFileId", localFileIdColumnBase);
            var remoteUrlColumnBase = new ColumnBase<ColumnMappingBase>("RemoteUrl", "text", gZCTFModelsDataAttachmentTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataAttachmentTableBase.Columns.Add("RemoteUrl", remoteUrlColumnBase);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "smallint", gZCTFModelsDataAttachmentTableBase);
            gZCTFModelsDataAttachmentTableBase.Columns.Add("Type", typeColumnBase);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.Attachment", gZCTFModelsDataAttachmentTableBase);
            var gZCTFModelsDataAttachmentMappingBase = new TableMappingBase<ColumnMappingBase>(attachment, gZCTFModelsDataAttachmentTableBase, true);
            gZCTFModelsDataAttachmentTableBase.AddTypeMapping(gZCTFModelsDataAttachmentMappingBase, false);
            defaultTableMappings.Add(gZCTFModelsDataAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, attachment.FindProperty("Id")!, gZCTFModelsDataAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)localFileIdColumnBase, attachment.FindProperty("LocalFileId")!, gZCTFModelsDataAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)remoteUrlColumnBase, attachment.FindProperty("RemoteUrl")!, gZCTFModelsDataAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, attachment.FindProperty("Type")!, gZCTFModelsDataAttachmentMappingBase);

            var tableMappings = new List<TableMapping>();
            attachment.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var attachmentsTable = new Table("Attachments", null, relationalModel);
            var idColumn = new Column("Id", "integer", attachmentsTable);
            attachmentsTable.Columns.Add("Id", idColumn);
            idColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var localFileIdColumn = new Column("LocalFileId", "integer", attachmentsTable)
            {
                IsNullable = true
            };
            attachmentsTable.Columns.Add("LocalFileId", localFileIdColumn);
            var remoteUrlColumn = new Column("RemoteUrl", "text", attachmentsTable)
            {
                IsNullable = true
            };
            attachmentsTable.Columns.Add("RemoteUrl", remoteUrlColumn);
            var typeColumn = new Column("Type", "smallint", attachmentsTable);
            attachmentsTable.Columns.Add("Type", typeColumn);
            var pK_Attachments = new UniqueConstraint("PK_Attachments", attachmentsTable, new[] { idColumn });
            attachmentsTable.PrimaryKey = pK_Attachments;
            var pK_AttachmentsUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.Attachment",
                new[] { "Id" });
            pK_Attachments.MappedKeys.Add(pK_AttachmentsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AttachmentsUc).Add(pK_Attachments);
            attachmentsTable.UniqueConstraints.Add("PK_Attachments", pK_Attachments);
            var iX_Attachments_LocalFileId = new TableIndex(
            "IX_Attachments_LocalFileId", attachmentsTable, new[] { localFileIdColumn }, false);
            var iX_Attachments_LocalFileIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.Attachment",
                new[] { "LocalFileId" });
            iX_Attachments_LocalFileId.MappedIndexes.Add(iX_Attachments_LocalFileIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Attachments_LocalFileIdIx).Add(iX_Attachments_LocalFileId);
            attachmentsTable.Indexes.Add("IX_Attachments_LocalFileId", iX_Attachments_LocalFileId);
            relationalModel.Tables.Add(("Attachments", null), attachmentsTable);
            var attachmentsTableMapping = new TableMapping(attachment, attachmentsTable, true);
            attachmentsTable.AddTypeMapping(attachmentsTableMapping, false);
            tableMappings.Add(attachmentsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, attachment.FindProperty("Id")!, attachmentsTableMapping);
            RelationalModel.CreateColumnMapping(localFileIdColumn, attachment.FindProperty("LocalFileId")!, attachmentsTableMapping);
            RelationalModel.CreateColumnMapping(remoteUrlColumn, attachment.FindProperty("RemoteUrl")!, attachmentsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, attachment.FindProperty("Type")!, attachmentsTableMapping);

            var cheatInfo = FindEntityType("GZCTF.Models.Data.CheatInfo")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            cheatInfo.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var gZCTFModelsDataCheatInfoTableBase = new TableBase("GZCTF.Models.Data.CheatInfo", null, relationalModel);
            var gameIdColumnBase = new ColumnBase<ColumnMappingBase>("GameId", "integer", gZCTFModelsDataCheatInfoTableBase);
            gZCTFModelsDataCheatInfoTableBase.Columns.Add("GameId", gameIdColumnBase);
            var sourceTeamIdColumnBase = new ColumnBase<ColumnMappingBase>("SourceTeamId", "integer", gZCTFModelsDataCheatInfoTableBase);
            gZCTFModelsDataCheatInfoTableBase.Columns.Add("SourceTeamId", sourceTeamIdColumnBase);
            var submissionIdColumnBase = new ColumnBase<ColumnMappingBase>("SubmissionId", "integer", gZCTFModelsDataCheatInfoTableBase);
            gZCTFModelsDataCheatInfoTableBase.Columns.Add("SubmissionId", submissionIdColumnBase);
            var submitTeamIdColumnBase = new ColumnBase<ColumnMappingBase>("SubmitTeamId", "integer", gZCTFModelsDataCheatInfoTableBase);
            gZCTFModelsDataCheatInfoTableBase.Columns.Add("SubmitTeamId", submitTeamIdColumnBase);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.CheatInfo", gZCTFModelsDataCheatInfoTableBase);
            var gZCTFModelsDataCheatInfoMappingBase = new TableMappingBase<ColumnMappingBase>(cheatInfo, gZCTFModelsDataCheatInfoTableBase, true);
            gZCTFModelsDataCheatInfoTableBase.AddTypeMapping(gZCTFModelsDataCheatInfoMappingBase, false);
            defaultTableMappings0.Add(gZCTFModelsDataCheatInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)submissionIdColumnBase, cheatInfo.FindProperty("SubmissionId")!, gZCTFModelsDataCheatInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gameIdColumnBase, cheatInfo.FindProperty("GameId")!, gZCTFModelsDataCheatInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceTeamIdColumnBase, cheatInfo.FindProperty("SourceTeamId")!, gZCTFModelsDataCheatInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)submitTeamIdColumnBase, cheatInfo.FindProperty("SubmitTeamId")!, gZCTFModelsDataCheatInfoMappingBase);

            var tableMappings0 = new List<TableMapping>();
            cheatInfo.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var cheatInfoTable = new Table("CheatInfo", null, relationalModel);
            var submissionIdColumn = new Column("SubmissionId", "integer", cheatInfoTable);
            cheatInfoTable.Columns.Add("SubmissionId", submissionIdColumn);
            var gameIdColumn = new Column("GameId", "integer", cheatInfoTable);
            cheatInfoTable.Columns.Add("GameId", gameIdColumn);
            var sourceTeamIdColumn = new Column("SourceTeamId", "integer", cheatInfoTable);
            cheatInfoTable.Columns.Add("SourceTeamId", sourceTeamIdColumn);
            var submitTeamIdColumn = new Column("SubmitTeamId", "integer", cheatInfoTable);
            cheatInfoTable.Columns.Add("SubmitTeamId", submitTeamIdColumn);
            var pK_CheatInfo = new UniqueConstraint("PK_CheatInfo", cheatInfoTable, new[] { submissionIdColumn });
            cheatInfoTable.PrimaryKey = pK_CheatInfo;
            var pK_CheatInfoUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.CheatInfo",
                new[] { "SubmissionId" });
            pK_CheatInfo.MappedKeys.Add(pK_CheatInfoUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CheatInfoUc).Add(pK_CheatInfo);
            cheatInfoTable.UniqueConstraints.Add("PK_CheatInfo", pK_CheatInfo);
            var iX_CheatInfo_GameId = new TableIndex(
            "IX_CheatInfo_GameId", cheatInfoTable, new[] { gameIdColumn }, false);
            var iX_CheatInfo_GameIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.CheatInfo",
                new[] { "GameId" });
            iX_CheatInfo_GameId.MappedIndexes.Add(iX_CheatInfo_GameIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CheatInfo_GameIdIx).Add(iX_CheatInfo_GameId);
            cheatInfoTable.Indexes.Add("IX_CheatInfo_GameId", iX_CheatInfo_GameId);
            var iX_CheatInfo_SourceTeamId = new TableIndex(
            "IX_CheatInfo_SourceTeamId", cheatInfoTable, new[] { sourceTeamIdColumn }, false);
            var iX_CheatInfo_SourceTeamIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.CheatInfo",
                new[] { "SourceTeamId" });
            iX_CheatInfo_SourceTeamId.MappedIndexes.Add(iX_CheatInfo_SourceTeamIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CheatInfo_SourceTeamIdIx).Add(iX_CheatInfo_SourceTeamId);
            cheatInfoTable.Indexes.Add("IX_CheatInfo_SourceTeamId", iX_CheatInfo_SourceTeamId);
            var iX_CheatInfo_SubmissionId = new TableIndex(
            "IX_CheatInfo_SubmissionId", cheatInfoTable, new[] { submissionIdColumn }, true);
            var iX_CheatInfo_SubmissionIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.CheatInfo",
                new[] { "SubmissionId" });
            iX_CheatInfo_SubmissionId.MappedIndexes.Add(iX_CheatInfo_SubmissionIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CheatInfo_SubmissionIdIx).Add(iX_CheatInfo_SubmissionId);
            cheatInfoTable.Indexes.Add("IX_CheatInfo_SubmissionId", iX_CheatInfo_SubmissionId);
            var iX_CheatInfo_SubmitTeamId = new TableIndex(
            "IX_CheatInfo_SubmitTeamId", cheatInfoTable, new[] { submitTeamIdColumn }, false);
            var iX_CheatInfo_SubmitTeamIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.CheatInfo",
                new[] { "SubmitTeamId" });
            iX_CheatInfo_SubmitTeamId.MappedIndexes.Add(iX_CheatInfo_SubmitTeamIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CheatInfo_SubmitTeamIdIx).Add(iX_CheatInfo_SubmitTeamId);
            cheatInfoTable.Indexes.Add("IX_CheatInfo_SubmitTeamId", iX_CheatInfo_SubmitTeamId);
            relationalModel.Tables.Add(("CheatInfo", null), cheatInfoTable);
            var cheatInfoTableMapping = new TableMapping(cheatInfo, cheatInfoTable, true);
            cheatInfoTable.AddTypeMapping(cheatInfoTableMapping, false);
            tableMappings0.Add(cheatInfoTableMapping);
            RelationalModel.CreateColumnMapping(submissionIdColumn, cheatInfo.FindProperty("SubmissionId")!, cheatInfoTableMapping);
            RelationalModel.CreateColumnMapping(gameIdColumn, cheatInfo.FindProperty("GameId")!, cheatInfoTableMapping);
            RelationalModel.CreateColumnMapping(sourceTeamIdColumn, cheatInfo.FindProperty("SourceTeamId")!, cheatInfoTableMapping);
            RelationalModel.CreateColumnMapping(submitTeamIdColumn, cheatInfo.FindProperty("SubmitTeamId")!, cheatInfoTableMapping);

            var config = FindEntityType("GZCTF.Models.Data.Config")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            config.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var gZCTFModelsDataConfigTableBase = new TableBase("GZCTF.Models.Data.Config", null, relationalModel);
            var configKeyColumnBase = new ColumnBase<ColumnMappingBase>("ConfigKey", "text", gZCTFModelsDataConfigTableBase);
            gZCTFModelsDataConfigTableBase.Columns.Add("ConfigKey", configKeyColumnBase);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("Value", "text", gZCTFModelsDataConfigTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataConfigTableBase.Columns.Add("Value", valueColumnBase);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.Config", gZCTFModelsDataConfigTableBase);
            var gZCTFModelsDataConfigMappingBase = new TableMappingBase<ColumnMappingBase>(config, gZCTFModelsDataConfigTableBase, true);
            gZCTFModelsDataConfigTableBase.AddTypeMapping(gZCTFModelsDataConfigMappingBase, false);
            defaultTableMappings1.Add(gZCTFModelsDataConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)configKeyColumnBase, config.FindProperty("ConfigKey")!, gZCTFModelsDataConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, config.FindProperty("Value")!, gZCTFModelsDataConfigMappingBase);

            var tableMappings1 = new List<TableMapping>();
            config.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var configsTable = new Table("Configs", null, relationalModel);
            var configKeyColumn = new Column("ConfigKey", "text", configsTable);
            configsTable.Columns.Add("ConfigKey", configKeyColumn);
            var valueColumn = new Column("Value", "text", configsTable)
            {
                IsNullable = true
            };
            configsTable.Columns.Add("Value", valueColumn);
            var pK_Configs = new UniqueConstraint("PK_Configs", configsTable, new[] { configKeyColumn });
            configsTable.PrimaryKey = pK_Configs;
            var pK_ConfigsUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.Config",
                new[] { "ConfigKey" });
            pK_Configs.MappedKeys.Add(pK_ConfigsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ConfigsUc).Add(pK_Configs);
            configsTable.UniqueConstraints.Add("PK_Configs", pK_Configs);
            relationalModel.Tables.Add(("Configs", null), configsTable);
            var configsTableMapping = new TableMapping(config, configsTable, true);
            configsTable.AddTypeMapping(configsTableMapping, false);
            tableMappings1.Add(configsTableMapping);
            RelationalModel.CreateColumnMapping(configKeyColumn, config.FindProperty("ConfigKey")!, configsTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, config.FindProperty("Value")!, configsTableMapping);

            var container = FindEntityType("GZCTF.Models.Data.Container")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            container.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var gZCTFModelsDataContainerTableBase = new TableBase("GZCTF.Models.Data.Container", null, relationalModel);
            var containerIdColumnBase = new ColumnBase<ColumnMappingBase>("ContainerId", "text", gZCTFModelsDataContainerTableBase);
            gZCTFModelsDataContainerTableBase.Columns.Add("ContainerId", containerIdColumnBase);
            var exerciseInstanceIdColumnBase = new ColumnBase<ColumnMappingBase>("ExerciseInstanceId", "integer", gZCTFModelsDataContainerTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataContainerTableBase.Columns.Add("ExerciseInstanceId", exerciseInstanceIdColumnBase);
            var expectStopAtColumnBase = new ColumnBase<ColumnMappingBase>("ExpectStopAt", "timestamp with time zone", gZCTFModelsDataContainerTableBase);
            gZCTFModelsDataContainerTableBase.Columns.Add("ExpectStopAt", expectStopAtColumnBase);
            var gameInstanceIdColumnBase = new ColumnBase<ColumnMappingBase>("GameInstanceId", "integer", gZCTFModelsDataContainerTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataContainerTableBase.Columns.Add("GameInstanceId", gameInstanceIdColumnBase);
            var iPColumnBase = new ColumnBase<ColumnMappingBase>("IP", "text", gZCTFModelsDataContainerTableBase);
            gZCTFModelsDataContainerTableBase.Columns.Add("IP", iPColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "uuid", gZCTFModelsDataContainerTableBase);
            gZCTFModelsDataContainerTableBase.Columns.Add("Id", idColumnBase0);
            var imageColumnBase = new ColumnBase<ColumnMappingBase>("Image", "text", gZCTFModelsDataContainerTableBase);
            gZCTFModelsDataContainerTableBase.Columns.Add("Image", imageColumnBase);
            var isProxyColumnBase = new ColumnBase<ColumnMappingBase>("IsProxy", "boolean", gZCTFModelsDataContainerTableBase);
            gZCTFModelsDataContainerTableBase.Columns.Add("IsProxy", isProxyColumnBase);
            var portColumnBase = new ColumnBase<ColumnMappingBase>("Port", "integer", gZCTFModelsDataContainerTableBase);
            gZCTFModelsDataContainerTableBase.Columns.Add("Port", portColumnBase);
            var publicIPColumnBase = new ColumnBase<ColumnMappingBase>("PublicIP", "text", gZCTFModelsDataContainerTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataContainerTableBase.Columns.Add("PublicIP", publicIPColumnBase);
            var publicPortColumnBase = new ColumnBase<ColumnMappingBase>("PublicPort", "integer", gZCTFModelsDataContainerTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataContainerTableBase.Columns.Add("PublicPort", publicPortColumnBase);
            var startedAtColumnBase = new ColumnBase<ColumnMappingBase>("StartedAt", "timestamp with time zone", gZCTFModelsDataContainerTableBase);
            gZCTFModelsDataContainerTableBase.Columns.Add("StartedAt", startedAtColumnBase);
            var statusColumnBase = new ColumnBase<ColumnMappingBase>("Status", "smallint", gZCTFModelsDataContainerTableBase);
            gZCTFModelsDataContainerTableBase.Columns.Add("Status", statusColumnBase);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.Container", gZCTFModelsDataContainerTableBase);
            var gZCTFModelsDataContainerMappingBase = new TableMappingBase<ColumnMappingBase>(container, gZCTFModelsDataContainerTableBase, true);
            gZCTFModelsDataContainerTableBase.AddTypeMapping(gZCTFModelsDataContainerMappingBase, false);
            defaultTableMappings2.Add(gZCTFModelsDataContainerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, container.FindProperty("Id")!, gZCTFModelsDataContainerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)containerIdColumnBase, container.FindProperty("ContainerId")!, gZCTFModelsDataContainerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)exerciseInstanceIdColumnBase, container.FindProperty("ExerciseInstanceId")!, gZCTFModelsDataContainerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expectStopAtColumnBase, container.FindProperty("ExpectStopAt")!, gZCTFModelsDataContainerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gameInstanceIdColumnBase, container.FindProperty("GameInstanceId")!, gZCTFModelsDataContainerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)iPColumnBase, container.FindProperty("IP")!, gZCTFModelsDataContainerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imageColumnBase, container.FindProperty("Image")!, gZCTFModelsDataContainerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isProxyColumnBase, container.FindProperty("IsProxy")!, gZCTFModelsDataContainerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)portColumnBase, container.FindProperty("Port")!, gZCTFModelsDataContainerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publicIPColumnBase, container.FindProperty("PublicIP")!, gZCTFModelsDataContainerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publicPortColumnBase, container.FindProperty("PublicPort")!, gZCTFModelsDataContainerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startedAtColumnBase, container.FindProperty("StartedAt")!, gZCTFModelsDataContainerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase, container.FindProperty("Status")!, gZCTFModelsDataContainerMappingBase);

            var tableMappings2 = new List<TableMapping>();
            container.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var containersTable = new Table("Containers", null, relationalModel);
            var idColumn0 = new Column("Id", "uuid", containersTable);
            containersTable.Columns.Add("Id", idColumn0);
            var containerIdColumn = new Column("ContainerId", "text", containersTable);
            containersTable.Columns.Add("ContainerId", containerIdColumn);
            var exerciseInstanceIdColumn = new Column("ExerciseInstanceId", "integer", containersTable)
            {
                IsNullable = true
            };
            containersTable.Columns.Add("ExerciseInstanceId", exerciseInstanceIdColumn);
            var expectStopAtColumn = new Column("ExpectStopAt", "timestamp with time zone", containersTable);
            containersTable.Columns.Add("ExpectStopAt", expectStopAtColumn);
            var gameInstanceIdColumn = new Column("GameInstanceId", "integer", containersTable)
            {
                IsNullable = true
            };
            containersTable.Columns.Add("GameInstanceId", gameInstanceIdColumn);
            var iPColumn = new Column("IP", "text", containersTable);
            containersTable.Columns.Add("IP", iPColumn);
            var imageColumn = new Column("Image", "text", containersTable);
            containersTable.Columns.Add("Image", imageColumn);
            var isProxyColumn = new Column("IsProxy", "boolean", containersTable);
            containersTable.Columns.Add("IsProxy", isProxyColumn);
            var portColumn = new Column("Port", "integer", containersTable);
            containersTable.Columns.Add("Port", portColumn);
            var publicIPColumn = new Column("PublicIP", "text", containersTable)
            {
                IsNullable = true
            };
            containersTable.Columns.Add("PublicIP", publicIPColumn);
            var publicPortColumn = new Column("PublicPort", "integer", containersTable)
            {
                IsNullable = true
            };
            containersTable.Columns.Add("PublicPort", publicPortColumn);
            var startedAtColumn = new Column("StartedAt", "timestamp with time zone", containersTable);
            containersTable.Columns.Add("StartedAt", startedAtColumn);
            var statusColumn = new Column("Status", "smallint", containersTable);
            containersTable.Columns.Add("Status", statusColumn);
            var pK_Containers = new UniqueConstraint("PK_Containers", containersTable, new[] { idColumn0 });
            containersTable.PrimaryKey = pK_Containers;
            var pK_ContainersUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.Container",
                new[] { "Id" });
            pK_Containers.MappedKeys.Add(pK_ContainersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ContainersUc).Add(pK_Containers);
            containersTable.UniqueConstraints.Add("PK_Containers", pK_Containers);
            var iX_Containers_ExerciseInstanceId = new TableIndex(
            "IX_Containers_ExerciseInstanceId", containersTable, new[] { exerciseInstanceIdColumn }, true);
            var iX_Containers_ExerciseInstanceIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.Container",
                new[] { "ExerciseInstanceId" });
            iX_Containers_ExerciseInstanceId.MappedIndexes.Add(iX_Containers_ExerciseInstanceIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Containers_ExerciseInstanceIdIx).Add(iX_Containers_ExerciseInstanceId);
            containersTable.Indexes.Add("IX_Containers_ExerciseInstanceId", iX_Containers_ExerciseInstanceId);
            var iX_Containers_GameInstanceId = new TableIndex(
            "IX_Containers_GameInstanceId", containersTable, new[] { gameInstanceIdColumn }, true);
            var iX_Containers_GameInstanceIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.Container",
                new[] { "GameInstanceId" });
            iX_Containers_GameInstanceId.MappedIndexes.Add(iX_Containers_GameInstanceIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Containers_GameInstanceIdIx).Add(iX_Containers_GameInstanceId);
            containersTable.Indexes.Add("IX_Containers_GameInstanceId", iX_Containers_GameInstanceId);
            relationalModel.Tables.Add(("Containers", null), containersTable);
            var containersTableMapping = new TableMapping(container, containersTable, true);
            containersTable.AddTypeMapping(containersTableMapping, false);
            tableMappings2.Add(containersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, container.FindProperty("Id")!, containersTableMapping);
            RelationalModel.CreateColumnMapping(containerIdColumn, container.FindProperty("ContainerId")!, containersTableMapping);
            RelationalModel.CreateColumnMapping(exerciseInstanceIdColumn, container.FindProperty("ExerciseInstanceId")!, containersTableMapping);
            RelationalModel.CreateColumnMapping(expectStopAtColumn, container.FindProperty("ExpectStopAt")!, containersTableMapping);
            RelationalModel.CreateColumnMapping(gameInstanceIdColumn, container.FindProperty("GameInstanceId")!, containersTableMapping);
            RelationalModel.CreateColumnMapping(iPColumn, container.FindProperty("IP")!, containersTableMapping);
            RelationalModel.CreateColumnMapping(imageColumn, container.FindProperty("Image")!, containersTableMapping);
            RelationalModel.CreateColumnMapping(isProxyColumn, container.FindProperty("IsProxy")!, containersTableMapping);
            RelationalModel.CreateColumnMapping(portColumn, container.FindProperty("Port")!, containersTableMapping);
            RelationalModel.CreateColumnMapping(publicIPColumn, container.FindProperty("PublicIP")!, containersTableMapping);
            RelationalModel.CreateColumnMapping(publicPortColumn, container.FindProperty("PublicPort")!, containersTableMapping);
            RelationalModel.CreateColumnMapping(startedAtColumn, container.FindProperty("StartedAt")!, containersTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn, container.FindProperty("Status")!, containersTableMapping);

            var exerciseChallenge = FindEntityType("GZCTF.Models.Data.ExerciseChallenge")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            exerciseChallenge.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var gZCTFModelsDataExerciseChallengeTableBase = new TableBase("GZCTF.Models.Data.ExerciseChallenge", null, relationalModel);
            var acceptedCountColumnBase = new ColumnBase<ColumnMappingBase>("AcceptedCount", "integer", gZCTFModelsDataExerciseChallengeTableBase);
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("AcceptedCount", acceptedCountColumnBase);
            var attachmentIdColumnBase = new ColumnBase<ColumnMappingBase>("AttachmentId", "integer", gZCTFModelsDataExerciseChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("AttachmentId", attachmentIdColumnBase);
            var cPUCountColumnBase = new ColumnBase<ColumnMappingBase>("CPUCount", "integer", gZCTFModelsDataExerciseChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("CPUCount", cPUCountColumnBase);
            var concurrencyStampColumnBase = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "uuid", gZCTFModelsDataExerciseChallengeTableBase);
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase);
            var containerExposePortColumnBase = new ColumnBase<ColumnMappingBase>("ContainerExposePort", "integer", gZCTFModelsDataExerciseChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("ContainerExposePort", containerExposePortColumnBase);
            var containerImageColumnBase = new ColumnBase<ColumnMappingBase>("ContainerImage", "text", gZCTFModelsDataExerciseChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("ContainerImage", containerImageColumnBase);
            var contentColumnBase = new ColumnBase<ColumnMappingBase>("Content", "text", gZCTFModelsDataExerciseChallengeTableBase);
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("Content", contentColumnBase);
            var creditColumnBase = new ColumnBase<ColumnMappingBase>("Credit", "boolean", gZCTFModelsDataExerciseChallengeTableBase);
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("Credit", creditColumnBase);
            var difficultyColumnBase = new ColumnBase<ColumnMappingBase>("Difficulty", "smallint", gZCTFModelsDataExerciseChallengeTableBase);
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("Difficulty", difficultyColumnBase);
            var fileNameColumnBase = new ColumnBase<ColumnMappingBase>("FileName", "text", gZCTFModelsDataExerciseChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("FileName", fileNameColumnBase);
            var flagTemplateColumnBase = new ColumnBase<ColumnMappingBase>("FlagTemplate", "text", gZCTFModelsDataExerciseChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("FlagTemplate", flagTemplateColumnBase);
            var hintsColumnBase = new ColumnBase<ColumnMappingBase>("Hints", "text", gZCTFModelsDataExerciseChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("Hints", hintsColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "integer", gZCTFModelsDataExerciseChallengeTableBase);
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("Id", idColumnBase1);
            var isEnabledColumnBase = new ColumnBase<ColumnMappingBase>("IsEnabled", "boolean", gZCTFModelsDataExerciseChallengeTableBase);
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("IsEnabled", isEnabledColumnBase);
            var memoryLimitColumnBase = new ColumnBase<ColumnMappingBase>("MemoryLimit", "integer", gZCTFModelsDataExerciseChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("MemoryLimit", memoryLimitColumnBase);
            var storageLimitColumnBase = new ColumnBase<ColumnMappingBase>("StorageLimit", "integer", gZCTFModelsDataExerciseChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("StorageLimit", storageLimitColumnBase);
            var submissionCountColumnBase = new ColumnBase<ColumnMappingBase>("SubmissionCount", "integer", gZCTFModelsDataExerciseChallengeTableBase);
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("SubmissionCount", submissionCountColumnBase);
            var tagColumnBase = new ColumnBase<ColumnMappingBase>("Tag", "smallint", gZCTFModelsDataExerciseChallengeTableBase);
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("Tag", tagColumnBase);
            var tagsColumnBase = new ColumnBase<ColumnMappingBase>("Tags", "text", gZCTFModelsDataExerciseChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("Tags", tagsColumnBase);
            var testContainerIdColumnBase = new ColumnBase<ColumnMappingBase>("TestContainerId", "uuid", gZCTFModelsDataExerciseChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("TestContainerId", testContainerIdColumnBase);
            var titleColumnBase = new ColumnBase<ColumnMappingBase>("Title", "text", gZCTFModelsDataExerciseChallengeTableBase);
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("Title", titleColumnBase);
            var typeColumnBase0 = new ColumnBase<ColumnMappingBase>("Type", "smallint", gZCTFModelsDataExerciseChallengeTableBase);
            gZCTFModelsDataExerciseChallengeTableBase.Columns.Add("Type", typeColumnBase0);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.ExerciseChallenge", gZCTFModelsDataExerciseChallengeTableBase);
            var gZCTFModelsDataExerciseChallengeMappingBase = new TableMappingBase<ColumnMappingBase>(exerciseChallenge, gZCTFModelsDataExerciseChallengeTableBase, true);
            gZCTFModelsDataExerciseChallengeTableBase.AddTypeMapping(gZCTFModelsDataExerciseChallengeMappingBase, false);
            defaultTableMappings3.Add(gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, exerciseChallenge.FindProperty("Id")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)acceptedCountColumnBase, exerciseChallenge.FindProperty("AcceptedCount")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)attachmentIdColumnBase, exerciseChallenge.FindProperty("AttachmentId")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cPUCountColumnBase, exerciseChallenge.FindProperty("CPUCount")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase, exerciseChallenge.FindProperty("ConcurrencyStamp")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)containerExposePortColumnBase, exerciseChallenge.FindProperty("ContainerExposePort")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)containerImageColumnBase, exerciseChallenge.FindProperty("ContainerImage")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentColumnBase, exerciseChallenge.FindProperty("Content")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creditColumnBase, exerciseChallenge.FindProperty("Credit")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)difficultyColumnBase, exerciseChallenge.FindProperty("Difficulty")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fileNameColumnBase, exerciseChallenge.FindProperty("FileName")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)flagTemplateColumnBase, exerciseChallenge.FindProperty("FlagTemplate")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hintsColumnBase, exerciseChallenge.FindProperty("Hints")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isEnabledColumnBase, exerciseChallenge.FindProperty("IsEnabled")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)memoryLimitColumnBase, exerciseChallenge.FindProperty("MemoryLimit")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)storageLimitColumnBase, exerciseChallenge.FindProperty("StorageLimit")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)submissionCountColumnBase, exerciseChallenge.FindProperty("SubmissionCount")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tagColumnBase, exerciseChallenge.FindProperty("Tag")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tagsColumnBase, exerciseChallenge.FindProperty("Tags")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)testContainerIdColumnBase, exerciseChallenge.FindProperty("TestContainerId")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase, exerciseChallenge.FindProperty("Title")!, gZCTFModelsDataExerciseChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase0, exerciseChallenge.FindProperty("Type")!, gZCTFModelsDataExerciseChallengeMappingBase);

            var tableMappings3 = new List<TableMapping>();
            exerciseChallenge.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var exerciseChallengesTable = new Table("ExerciseChallenges", null, relationalModel);
            var idColumn1 = new Column("Id", "integer", exerciseChallengesTable);
            exerciseChallengesTable.Columns.Add("Id", idColumn1);
            idColumn1.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var acceptedCountColumn = new Column("AcceptedCount", "integer", exerciseChallengesTable);
            exerciseChallengesTable.Columns.Add("AcceptedCount", acceptedCountColumn);
            var attachmentIdColumn = new Column("AttachmentId", "integer", exerciseChallengesTable)
            {
                IsNullable = true
            };
            exerciseChallengesTable.Columns.Add("AttachmentId", attachmentIdColumn);
            var cPUCountColumn = new Column("CPUCount", "integer", exerciseChallengesTable)
            {
                IsNullable = true
            };
            exerciseChallengesTable.Columns.Add("CPUCount", cPUCountColumn);
            var concurrencyStampColumn = new Column("ConcurrencyStamp", "uuid", exerciseChallengesTable);
            exerciseChallengesTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn);
            var containerExposePortColumn = new Column("ContainerExposePort", "integer", exerciseChallengesTable)
            {
                IsNullable = true
            };
            exerciseChallengesTable.Columns.Add("ContainerExposePort", containerExposePortColumn);
            var containerImageColumn = new Column("ContainerImage", "text", exerciseChallengesTable)
            {
                IsNullable = true
            };
            exerciseChallengesTable.Columns.Add("ContainerImage", containerImageColumn);
            var contentColumn = new Column("Content", "text", exerciseChallengesTable);
            exerciseChallengesTable.Columns.Add("Content", contentColumn);
            var creditColumn = new Column("Credit", "boolean", exerciseChallengesTable);
            exerciseChallengesTable.Columns.Add("Credit", creditColumn);
            var difficultyColumn = new Column("Difficulty", "smallint", exerciseChallengesTable);
            exerciseChallengesTable.Columns.Add("Difficulty", difficultyColumn);
            var fileNameColumn = new Column("FileName", "text", exerciseChallengesTable)
            {
                IsNullable = true
            };
            exerciseChallengesTable.Columns.Add("FileName", fileNameColumn);
            var flagTemplateColumn = new Column("FlagTemplate", "text", exerciseChallengesTable)
            {
                IsNullable = true
            };
            exerciseChallengesTable.Columns.Add("FlagTemplate", flagTemplateColumn);
            var hintsColumn = new Column("Hints", "text", exerciseChallengesTable)
            {
                IsNullable = true
            };
            exerciseChallengesTable.Columns.Add("Hints", hintsColumn);
            var isEnabledColumn = new Column("IsEnabled", "boolean", exerciseChallengesTable);
            exerciseChallengesTable.Columns.Add("IsEnabled", isEnabledColumn);
            var memoryLimitColumn = new Column("MemoryLimit", "integer", exerciseChallengesTable)
            {
                IsNullable = true
            };
            exerciseChallengesTable.Columns.Add("MemoryLimit", memoryLimitColumn);
            var storageLimitColumn = new Column("StorageLimit", "integer", exerciseChallengesTable)
            {
                IsNullable = true
            };
            exerciseChallengesTable.Columns.Add("StorageLimit", storageLimitColumn);
            var submissionCountColumn = new Column("SubmissionCount", "integer", exerciseChallengesTable);
            exerciseChallengesTable.Columns.Add("SubmissionCount", submissionCountColumn);
            var tagColumn = new Column("Tag", "smallint", exerciseChallengesTable);
            exerciseChallengesTable.Columns.Add("Tag", tagColumn);
            var tagsColumn = new Column("Tags", "text", exerciseChallengesTable)
            {
                IsNullable = true
            };
            exerciseChallengesTable.Columns.Add("Tags", tagsColumn);
            var testContainerIdColumn = new Column("TestContainerId", "uuid", exerciseChallengesTable)
            {
                IsNullable = true
            };
            exerciseChallengesTable.Columns.Add("TestContainerId", testContainerIdColumn);
            var titleColumn = new Column("Title", "text", exerciseChallengesTable);
            exerciseChallengesTable.Columns.Add("Title", titleColumn);
            var typeColumn0 = new Column("Type", "smallint", exerciseChallengesTable);
            exerciseChallengesTable.Columns.Add("Type", typeColumn0);
            var pK_ExerciseChallenges = new UniqueConstraint("PK_ExerciseChallenges", exerciseChallengesTable, new[] { idColumn1 });
            exerciseChallengesTable.PrimaryKey = pK_ExerciseChallenges;
            var pK_ExerciseChallengesUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.ExerciseChallenge",
                new[] { "Id" });
            pK_ExerciseChallenges.MappedKeys.Add(pK_ExerciseChallengesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ExerciseChallengesUc).Add(pK_ExerciseChallenges);
            exerciseChallengesTable.UniqueConstraints.Add("PK_ExerciseChallenges", pK_ExerciseChallenges);
            var iX_ExerciseChallenges_AttachmentId = new TableIndex(
            "IX_ExerciseChallenges_AttachmentId", exerciseChallengesTable, new[] { attachmentIdColumn }, false);
            var iX_ExerciseChallenges_AttachmentIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.ExerciseChallenge",
                new[] { "AttachmentId" });
            iX_ExerciseChallenges_AttachmentId.MappedIndexes.Add(iX_ExerciseChallenges_AttachmentIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ExerciseChallenges_AttachmentIdIx).Add(iX_ExerciseChallenges_AttachmentId);
            exerciseChallengesTable.Indexes.Add("IX_ExerciseChallenges_AttachmentId", iX_ExerciseChallenges_AttachmentId);
            var iX_ExerciseChallenges_TestContainerId = new TableIndex(
            "IX_ExerciseChallenges_TestContainerId", exerciseChallengesTable, new[] { testContainerIdColumn }, false);
            var iX_ExerciseChallenges_TestContainerIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.ExerciseChallenge",
                new[] { "TestContainerId" });
            iX_ExerciseChallenges_TestContainerId.MappedIndexes.Add(iX_ExerciseChallenges_TestContainerIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ExerciseChallenges_TestContainerIdIx).Add(iX_ExerciseChallenges_TestContainerId);
            exerciseChallengesTable.Indexes.Add("IX_ExerciseChallenges_TestContainerId", iX_ExerciseChallenges_TestContainerId);
            relationalModel.Tables.Add(("ExerciseChallenges", null), exerciseChallengesTable);
            var exerciseChallengesTableMapping = new TableMapping(exerciseChallenge, exerciseChallengesTable, true);
            exerciseChallengesTable.AddTypeMapping(exerciseChallengesTableMapping, false);
            tableMappings3.Add(exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, exerciseChallenge.FindProperty("Id")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(acceptedCountColumn, exerciseChallenge.FindProperty("AcceptedCount")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(attachmentIdColumn, exerciseChallenge.FindProperty("AttachmentId")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(cPUCountColumn, exerciseChallenge.FindProperty("CPUCount")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn, exerciseChallenge.FindProperty("ConcurrencyStamp")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(containerExposePortColumn, exerciseChallenge.FindProperty("ContainerExposePort")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(containerImageColumn, exerciseChallenge.FindProperty("ContainerImage")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(contentColumn, exerciseChallenge.FindProperty("Content")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(creditColumn, exerciseChallenge.FindProperty("Credit")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(difficultyColumn, exerciseChallenge.FindProperty("Difficulty")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(fileNameColumn, exerciseChallenge.FindProperty("FileName")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(flagTemplateColumn, exerciseChallenge.FindProperty("FlagTemplate")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(hintsColumn, exerciseChallenge.FindProperty("Hints")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(isEnabledColumn, exerciseChallenge.FindProperty("IsEnabled")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(memoryLimitColumn, exerciseChallenge.FindProperty("MemoryLimit")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(storageLimitColumn, exerciseChallenge.FindProperty("StorageLimit")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(submissionCountColumn, exerciseChallenge.FindProperty("SubmissionCount")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(tagColumn, exerciseChallenge.FindProperty("Tag")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(tagsColumn, exerciseChallenge.FindProperty("Tags")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(testContainerIdColumn, exerciseChallenge.FindProperty("TestContainerId")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn, exerciseChallenge.FindProperty("Title")!, exerciseChallengesTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn0, exerciseChallenge.FindProperty("Type")!, exerciseChallengesTableMapping);

            var exerciseDependency = FindEntityType("GZCTF.Models.Data.ExerciseDependency")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            exerciseDependency.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var gZCTFModelsDataExerciseDependencyTableBase = new TableBase("GZCTF.Models.Data.ExerciseDependency", null, relationalModel);
            var sourceIdColumnBase = new ColumnBase<ColumnMappingBase>("SourceId", "integer", gZCTFModelsDataExerciseDependencyTableBase);
            gZCTFModelsDataExerciseDependencyTableBase.Columns.Add("SourceId", sourceIdColumnBase);
            var targetIdColumnBase = new ColumnBase<ColumnMappingBase>("TargetId", "integer", gZCTFModelsDataExerciseDependencyTableBase);
            gZCTFModelsDataExerciseDependencyTableBase.Columns.Add("TargetId", targetIdColumnBase);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.ExerciseDependency", gZCTFModelsDataExerciseDependencyTableBase);
            var gZCTFModelsDataExerciseDependencyMappingBase = new TableMappingBase<ColumnMappingBase>(exerciseDependency, gZCTFModelsDataExerciseDependencyTableBase, true);
            gZCTFModelsDataExerciseDependencyTableBase.AddTypeMapping(gZCTFModelsDataExerciseDependencyMappingBase, false);
            defaultTableMappings4.Add(gZCTFModelsDataExerciseDependencyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceIdColumnBase, exerciseDependency.FindProperty("SourceId")!, gZCTFModelsDataExerciseDependencyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)targetIdColumnBase, exerciseDependency.FindProperty("TargetId")!, gZCTFModelsDataExerciseDependencyMappingBase);

            var tableMappings4 = new List<TableMapping>();
            exerciseDependency.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var exerciseDependenciesTable = new Table("ExerciseDependencies", null, relationalModel);
            var sourceIdColumn = new Column("SourceId", "integer", exerciseDependenciesTable);
            exerciseDependenciesTable.Columns.Add("SourceId", sourceIdColumn);
            var targetIdColumn = new Column("TargetId", "integer", exerciseDependenciesTable);
            exerciseDependenciesTable.Columns.Add("TargetId", targetIdColumn);
            var pK_ExerciseDependencies = new UniqueConstraint("PK_ExerciseDependencies", exerciseDependenciesTable, new[] { sourceIdColumn, targetIdColumn });
            exerciseDependenciesTable.PrimaryKey = pK_ExerciseDependencies;
            var pK_ExerciseDependenciesUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.ExerciseDependency",
                new[] { "SourceId", "TargetId" });
            pK_ExerciseDependencies.MappedKeys.Add(pK_ExerciseDependenciesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ExerciseDependenciesUc).Add(pK_ExerciseDependencies);
            exerciseDependenciesTable.UniqueConstraints.Add("PK_ExerciseDependencies", pK_ExerciseDependencies);
            var iX_ExerciseDependencies_SourceId = new TableIndex(
            "IX_ExerciseDependencies_SourceId", exerciseDependenciesTable, new[] { sourceIdColumn }, false);
            var iX_ExerciseDependencies_SourceIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.ExerciseDependency",
                new[] { "SourceId" });
            iX_ExerciseDependencies_SourceId.MappedIndexes.Add(iX_ExerciseDependencies_SourceIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ExerciseDependencies_SourceIdIx).Add(iX_ExerciseDependencies_SourceId);
            exerciseDependenciesTable.Indexes.Add("IX_ExerciseDependencies_SourceId", iX_ExerciseDependencies_SourceId);
            var iX_ExerciseDependencies_TargetId = new TableIndex(
            "IX_ExerciseDependencies_TargetId", exerciseDependenciesTable, new[] { targetIdColumn }, false);
            var iX_ExerciseDependencies_TargetIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.ExerciseDependency",
                new[] { "TargetId" });
            iX_ExerciseDependencies_TargetId.MappedIndexes.Add(iX_ExerciseDependencies_TargetIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ExerciseDependencies_TargetIdIx).Add(iX_ExerciseDependencies_TargetId);
            exerciseDependenciesTable.Indexes.Add("IX_ExerciseDependencies_TargetId", iX_ExerciseDependencies_TargetId);
            relationalModel.Tables.Add(("ExerciseDependencies", null), exerciseDependenciesTable);
            var exerciseDependenciesTableMapping = new TableMapping(exerciseDependency, exerciseDependenciesTable, true);
            exerciseDependenciesTable.AddTypeMapping(exerciseDependenciesTableMapping, false);
            tableMappings4.Add(exerciseDependenciesTableMapping);
            RelationalModel.CreateColumnMapping(sourceIdColumn, exerciseDependency.FindProperty("SourceId")!, exerciseDependenciesTableMapping);
            RelationalModel.CreateColumnMapping(targetIdColumn, exerciseDependency.FindProperty("TargetId")!, exerciseDependenciesTableMapping);

            var exerciseInstance = FindEntityType("GZCTF.Models.Data.ExerciseInstance")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            exerciseInstance.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var gZCTFModelsDataExerciseInstanceTableBase = new TableBase("GZCTF.Models.Data.ExerciseInstance", null, relationalModel);
            var containerIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ContainerId", "uuid", gZCTFModelsDataExerciseInstanceTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataExerciseInstanceTableBase.Columns.Add("ContainerId", containerIdColumnBase0);
            var exerciseIdColumnBase = new ColumnBase<ColumnMappingBase>("ExerciseId", "integer", gZCTFModelsDataExerciseInstanceTableBase);
            gZCTFModelsDataExerciseInstanceTableBase.Columns.Add("ExerciseId", exerciseIdColumnBase);
            var flagIdColumnBase = new ColumnBase<ColumnMappingBase>("FlagId", "integer", gZCTFModelsDataExerciseInstanceTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataExerciseInstanceTableBase.Columns.Add("FlagId", flagIdColumnBase);
            var isLoadedColumnBase = new ColumnBase<ColumnMappingBase>("IsLoaded", "boolean", gZCTFModelsDataExerciseInstanceTableBase);
            gZCTFModelsDataExerciseInstanceTableBase.Columns.Add("IsLoaded", isLoadedColumnBase);
            var isSolvedColumnBase = new ColumnBase<ColumnMappingBase>("IsSolved", "boolean", gZCTFModelsDataExerciseInstanceTableBase);
            gZCTFModelsDataExerciseInstanceTableBase.Columns.Add("IsSolved", isSolvedColumnBase);
            var lastContainerOperationColumnBase = new ColumnBase<ColumnMappingBase>("LastContainerOperation", "timestamp with time zone", gZCTFModelsDataExerciseInstanceTableBase);
            gZCTFModelsDataExerciseInstanceTableBase.Columns.Add("LastContainerOperation", lastContainerOperationColumnBase);
            var solveTimeUtcColumnBase = new ColumnBase<ColumnMappingBase>("SolveTimeUtc", "timestamp with time zone", gZCTFModelsDataExerciseInstanceTableBase);
            gZCTFModelsDataExerciseInstanceTableBase.Columns.Add("SolveTimeUtc", solveTimeUtcColumnBase);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "uuid", gZCTFModelsDataExerciseInstanceTableBase);
            gZCTFModelsDataExerciseInstanceTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.ExerciseInstance", gZCTFModelsDataExerciseInstanceTableBase);
            var gZCTFModelsDataExerciseInstanceMappingBase = new TableMappingBase<ColumnMappingBase>(exerciseInstance, gZCTFModelsDataExerciseInstanceTableBase, true);
            gZCTFModelsDataExerciseInstanceTableBase.AddTypeMapping(gZCTFModelsDataExerciseInstanceMappingBase, false);
            defaultTableMappings5.Add(gZCTFModelsDataExerciseInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)exerciseIdColumnBase, exerciseInstance.FindProperty("ExerciseId")!, gZCTFModelsDataExerciseInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, exerciseInstance.FindProperty("UserId")!, gZCTFModelsDataExerciseInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)containerIdColumnBase0, exerciseInstance.FindProperty("ContainerId")!, gZCTFModelsDataExerciseInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)flagIdColumnBase, exerciseInstance.FindProperty("FlagId")!, gZCTFModelsDataExerciseInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isLoadedColumnBase, exerciseInstance.FindProperty("IsLoaded")!, gZCTFModelsDataExerciseInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isSolvedColumnBase, exerciseInstance.FindProperty("IsSolved")!, gZCTFModelsDataExerciseInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastContainerOperationColumnBase, exerciseInstance.FindProperty("LastContainerOperation")!, gZCTFModelsDataExerciseInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)solveTimeUtcColumnBase, exerciseInstance.FindProperty("SolveTimeUtc")!, gZCTFModelsDataExerciseInstanceMappingBase);

            var tableMappings5 = new List<TableMapping>();
            exerciseInstance.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var exerciseInstancesTable = new Table("ExerciseInstances", null, relationalModel);
            var userIdColumn = new Column("UserId", "uuid", exerciseInstancesTable);
            exerciseInstancesTable.Columns.Add("UserId", userIdColumn);
            var exerciseIdColumn = new Column("ExerciseId", "integer", exerciseInstancesTable);
            exerciseInstancesTable.Columns.Add("ExerciseId", exerciseIdColumn);
            var containerIdColumn0 = new Column("ContainerId", "uuid", exerciseInstancesTable)
            {
                IsNullable = true
            };
            exerciseInstancesTable.Columns.Add("ContainerId", containerIdColumn0);
            var flagIdColumn = new Column("FlagId", "integer", exerciseInstancesTable)
            {
                IsNullable = true
            };
            exerciseInstancesTable.Columns.Add("FlagId", flagIdColumn);
            var isLoadedColumn = new Column("IsLoaded", "boolean", exerciseInstancesTable);
            exerciseInstancesTable.Columns.Add("IsLoaded", isLoadedColumn);
            var isSolvedColumn = new Column("IsSolved", "boolean", exerciseInstancesTable);
            exerciseInstancesTable.Columns.Add("IsSolved", isSolvedColumn);
            var lastContainerOperationColumn = new Column("LastContainerOperation", "timestamp with time zone", exerciseInstancesTable);
            exerciseInstancesTable.Columns.Add("LastContainerOperation", lastContainerOperationColumn);
            var solveTimeUtcColumn = new Column("SolveTimeUtc", "timestamp with time zone", exerciseInstancesTable);
            exerciseInstancesTable.Columns.Add("SolveTimeUtc", solveTimeUtcColumn);
            var pK_ExerciseInstances = new UniqueConstraint("PK_ExerciseInstances", exerciseInstancesTable, new[] { userIdColumn, exerciseIdColumn });
            exerciseInstancesTable.PrimaryKey = pK_ExerciseInstances;
            var pK_ExerciseInstancesUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.ExerciseInstance",
                new[] { "UserId", "ExerciseId" });
            pK_ExerciseInstances.MappedKeys.Add(pK_ExerciseInstancesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ExerciseInstancesUc).Add(pK_ExerciseInstances);
            exerciseInstancesTable.UniqueConstraints.Add("PK_ExerciseInstances", pK_ExerciseInstances);
            var iX_ExerciseInstances_ContainerId = new TableIndex(
            "IX_ExerciseInstances_ContainerId", exerciseInstancesTable, new[] { containerIdColumn0 }, true);
            var iX_ExerciseInstances_ContainerIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.ExerciseInstance",
                new[] { "ContainerId" });
            iX_ExerciseInstances_ContainerId.MappedIndexes.Add(iX_ExerciseInstances_ContainerIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ExerciseInstances_ContainerIdIx).Add(iX_ExerciseInstances_ContainerId);
            exerciseInstancesTable.Indexes.Add("IX_ExerciseInstances_ContainerId", iX_ExerciseInstances_ContainerId);
            var iX_ExerciseInstances_ExerciseId = new TableIndex(
            "IX_ExerciseInstances_ExerciseId", exerciseInstancesTable, new[] { exerciseIdColumn }, false);
            var iX_ExerciseInstances_ExerciseIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.ExerciseInstance",
                new[] { "ExerciseId" });
            iX_ExerciseInstances_ExerciseId.MappedIndexes.Add(iX_ExerciseInstances_ExerciseIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ExerciseInstances_ExerciseIdIx).Add(iX_ExerciseInstances_ExerciseId);
            exerciseInstancesTable.Indexes.Add("IX_ExerciseInstances_ExerciseId", iX_ExerciseInstances_ExerciseId);
            var iX_ExerciseInstances_FlagId = new TableIndex(
            "IX_ExerciseInstances_FlagId", exerciseInstancesTable, new[] { flagIdColumn }, false);
            var iX_ExerciseInstances_FlagIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.ExerciseInstance",
                new[] { "FlagId" });
            iX_ExerciseInstances_FlagId.MappedIndexes.Add(iX_ExerciseInstances_FlagIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ExerciseInstances_FlagIdIx).Add(iX_ExerciseInstances_FlagId);
            exerciseInstancesTable.Indexes.Add("IX_ExerciseInstances_FlagId", iX_ExerciseInstances_FlagId);
            var iX_ExerciseInstances_UserId = new TableIndex(
            "IX_ExerciseInstances_UserId", exerciseInstancesTable, new[] { userIdColumn }, false);
            var iX_ExerciseInstances_UserIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.ExerciseInstance",
                new[] { "UserId" });
            iX_ExerciseInstances_UserId.MappedIndexes.Add(iX_ExerciseInstances_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ExerciseInstances_UserIdIx).Add(iX_ExerciseInstances_UserId);
            exerciseInstancesTable.Indexes.Add("IX_ExerciseInstances_UserId", iX_ExerciseInstances_UserId);
            relationalModel.Tables.Add(("ExerciseInstances", null), exerciseInstancesTable);
            var exerciseInstancesTableMapping = new TableMapping(exerciseInstance, exerciseInstancesTable, true);
            exerciseInstancesTable.AddTypeMapping(exerciseInstancesTableMapping, false);
            tableMappings5.Add(exerciseInstancesTableMapping);
            RelationalModel.CreateColumnMapping(exerciseIdColumn, exerciseInstance.FindProperty("ExerciseId")!, exerciseInstancesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, exerciseInstance.FindProperty("UserId")!, exerciseInstancesTableMapping);
            RelationalModel.CreateColumnMapping(containerIdColumn0, exerciseInstance.FindProperty("ContainerId")!, exerciseInstancesTableMapping);
            RelationalModel.CreateColumnMapping(flagIdColumn, exerciseInstance.FindProperty("FlagId")!, exerciseInstancesTableMapping);
            RelationalModel.CreateColumnMapping(isLoadedColumn, exerciseInstance.FindProperty("IsLoaded")!, exerciseInstancesTableMapping);
            RelationalModel.CreateColumnMapping(isSolvedColumn, exerciseInstance.FindProperty("IsSolved")!, exerciseInstancesTableMapping);
            RelationalModel.CreateColumnMapping(lastContainerOperationColumn, exerciseInstance.FindProperty("LastContainerOperation")!, exerciseInstancesTableMapping);
            RelationalModel.CreateColumnMapping(solveTimeUtcColumn, exerciseInstance.FindProperty("SolveTimeUtc")!, exerciseInstancesTableMapping);

            var flagContext = FindEntityType("GZCTF.Models.Data.FlagContext")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            flagContext.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var gZCTFModelsDataFlagContextTableBase = new TableBase("GZCTF.Models.Data.FlagContext", null, relationalModel);
            var attachmentIdColumnBase0 = new ColumnBase<ColumnMappingBase>("AttachmentId", "integer", gZCTFModelsDataFlagContextTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataFlagContextTableBase.Columns.Add("AttachmentId", attachmentIdColumnBase0);
            var challengeIdColumnBase = new ColumnBase<ColumnMappingBase>("ChallengeId", "integer", gZCTFModelsDataFlagContextTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataFlagContextTableBase.Columns.Add("ChallengeId", challengeIdColumnBase);
            var exerciseIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ExerciseId", "integer", gZCTFModelsDataFlagContextTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataFlagContextTableBase.Columns.Add("ExerciseId", exerciseIdColumnBase0);
            var flagColumnBase = new ColumnBase<ColumnMappingBase>("Flag", "text", gZCTFModelsDataFlagContextTableBase);
            gZCTFModelsDataFlagContextTableBase.Columns.Add("Flag", flagColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "integer", gZCTFModelsDataFlagContextTableBase);
            gZCTFModelsDataFlagContextTableBase.Columns.Add("Id", idColumnBase2);
            var isOccupiedColumnBase = new ColumnBase<ColumnMappingBase>("IsOccupied", "boolean", gZCTFModelsDataFlagContextTableBase);
            gZCTFModelsDataFlagContextTableBase.Columns.Add("IsOccupied", isOccupiedColumnBase);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.FlagContext", gZCTFModelsDataFlagContextTableBase);
            var gZCTFModelsDataFlagContextMappingBase = new TableMappingBase<ColumnMappingBase>(flagContext, gZCTFModelsDataFlagContextTableBase, true);
            gZCTFModelsDataFlagContextTableBase.AddTypeMapping(gZCTFModelsDataFlagContextMappingBase, false);
            defaultTableMappings6.Add(gZCTFModelsDataFlagContextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, flagContext.FindProperty("Id")!, gZCTFModelsDataFlagContextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)attachmentIdColumnBase0, flagContext.FindProperty("AttachmentId")!, gZCTFModelsDataFlagContextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)challengeIdColumnBase, flagContext.FindProperty("ChallengeId")!, gZCTFModelsDataFlagContextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)exerciseIdColumnBase0, flagContext.FindProperty("ExerciseId")!, gZCTFModelsDataFlagContextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)flagColumnBase, flagContext.FindProperty("Flag")!, gZCTFModelsDataFlagContextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isOccupiedColumnBase, flagContext.FindProperty("IsOccupied")!, gZCTFModelsDataFlagContextMappingBase);

            var tableMappings6 = new List<TableMapping>();
            flagContext.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var flagContextsTable = new Table("FlagContexts", null, relationalModel);
            var idColumn2 = new Column("Id", "integer", flagContextsTable);
            flagContextsTable.Columns.Add("Id", idColumn2);
            idColumn2.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var attachmentIdColumn0 = new Column("AttachmentId", "integer", flagContextsTable)
            {
                IsNullable = true
            };
            flagContextsTable.Columns.Add("AttachmentId", attachmentIdColumn0);
            var challengeIdColumn = new Column("ChallengeId", "integer", flagContextsTable)
            {
                IsNullable = true
            };
            flagContextsTable.Columns.Add("ChallengeId", challengeIdColumn);
            var exerciseIdColumn0 = new Column("ExerciseId", "integer", flagContextsTable)
            {
                IsNullable = true
            };
            flagContextsTable.Columns.Add("ExerciseId", exerciseIdColumn0);
            var flagColumn = new Column("Flag", "text", flagContextsTable);
            flagContextsTable.Columns.Add("Flag", flagColumn);
            var isOccupiedColumn = new Column("IsOccupied", "boolean", flagContextsTable);
            flagContextsTable.Columns.Add("IsOccupied", isOccupiedColumn);
            var pK_FlagContexts = new UniqueConstraint("PK_FlagContexts", flagContextsTable, new[] { idColumn2 });
            flagContextsTable.PrimaryKey = pK_FlagContexts;
            var pK_FlagContextsUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.FlagContext",
                new[] { "Id" });
            pK_FlagContexts.MappedKeys.Add(pK_FlagContextsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_FlagContextsUc).Add(pK_FlagContexts);
            flagContextsTable.UniqueConstraints.Add("PK_FlagContexts", pK_FlagContexts);
            var iX_FlagContexts_AttachmentId = new TableIndex(
            "IX_FlagContexts_AttachmentId", flagContextsTable, new[] { attachmentIdColumn0 }, false);
            var iX_FlagContexts_AttachmentIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.FlagContext",
                new[] { "AttachmentId" });
            iX_FlagContexts_AttachmentId.MappedIndexes.Add(iX_FlagContexts_AttachmentIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_FlagContexts_AttachmentIdIx).Add(iX_FlagContexts_AttachmentId);
            flagContextsTable.Indexes.Add("IX_FlagContexts_AttachmentId", iX_FlagContexts_AttachmentId);
            var iX_FlagContexts_ChallengeId = new TableIndex(
            "IX_FlagContexts_ChallengeId", flagContextsTable, new[] { challengeIdColumn }, false);
            var iX_FlagContexts_ChallengeIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.FlagContext",
                new[] { "ChallengeId" });
            iX_FlagContexts_ChallengeId.MappedIndexes.Add(iX_FlagContexts_ChallengeIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_FlagContexts_ChallengeIdIx).Add(iX_FlagContexts_ChallengeId);
            flagContextsTable.Indexes.Add("IX_FlagContexts_ChallengeId", iX_FlagContexts_ChallengeId);
            var iX_FlagContexts_ExerciseId = new TableIndex(
            "IX_FlagContexts_ExerciseId", flagContextsTable, new[] { exerciseIdColumn0 }, false);
            var iX_FlagContexts_ExerciseIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.FlagContext",
                new[] { "ExerciseId" });
            iX_FlagContexts_ExerciseId.MappedIndexes.Add(iX_FlagContexts_ExerciseIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_FlagContexts_ExerciseIdIx).Add(iX_FlagContexts_ExerciseId);
            flagContextsTable.Indexes.Add("IX_FlagContexts_ExerciseId", iX_FlagContexts_ExerciseId);
            relationalModel.Tables.Add(("FlagContexts", null), flagContextsTable);
            var flagContextsTableMapping = new TableMapping(flagContext, flagContextsTable, true);
            flagContextsTable.AddTypeMapping(flagContextsTableMapping, false);
            tableMappings6.Add(flagContextsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, flagContext.FindProperty("Id")!, flagContextsTableMapping);
            RelationalModel.CreateColumnMapping(attachmentIdColumn0, flagContext.FindProperty("AttachmentId")!, flagContextsTableMapping);
            RelationalModel.CreateColumnMapping(challengeIdColumn, flagContext.FindProperty("ChallengeId")!, flagContextsTableMapping);
            RelationalModel.CreateColumnMapping(exerciseIdColumn0, flagContext.FindProperty("ExerciseId")!, flagContextsTableMapping);
            RelationalModel.CreateColumnMapping(flagColumn, flagContext.FindProperty("Flag")!, flagContextsTableMapping);
            RelationalModel.CreateColumnMapping(isOccupiedColumn, flagContext.FindProperty("IsOccupied")!, flagContextsTableMapping);

            var game = FindEntityType("GZCTF.Models.Data.Game")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            game.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var gZCTFModelsDataGameTableBase = new TableBase("GZCTF.Models.Data.Game", null, relationalModel);
            var acceptWithoutReviewColumnBase = new ColumnBase<ColumnMappingBase>("AcceptWithoutReview", "boolean", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("AcceptWithoutReview", acceptWithoutReviewColumnBase);
            var bloodBonusColumnBase = new ColumnBase<ColumnMappingBase>("BloodBonus", "bigint", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("BloodBonus", bloodBonusColumnBase);
            var containerCountLimitColumnBase = new ColumnBase<ColumnMappingBase>("ContainerCountLimit", "integer", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("ContainerCountLimit", containerCountLimitColumnBase);
            var contentColumnBase0 = new ColumnBase<ColumnMappingBase>("Content", "text", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("Content", contentColumnBase0);
            var endTimeUtcColumnBase = new ColumnBase<ColumnMappingBase>("EndTimeUtc", "timestamp with time zone", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("EndTimeUtc", endTimeUtcColumnBase);
            var hiddenColumnBase = new ColumnBase<ColumnMappingBase>("Hidden", "boolean", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("Hidden", hiddenColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "integer", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("Id", idColumnBase3);
            var inviteCodeColumnBase = new ColumnBase<ColumnMappingBase>("InviteCode", "text", gZCTFModelsDataGameTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameTableBase.Columns.Add("InviteCode", inviteCodeColumnBase);
            var organizationsColumnBase = new ColumnBase<ColumnMappingBase>("Organizations", "text", gZCTFModelsDataGameTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameTableBase.Columns.Add("Organizations", organizationsColumnBase);
            var posterHashColumnBase = new ColumnBase<ColumnMappingBase>("PosterHash", "character varying(64)", gZCTFModelsDataGameTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameTableBase.Columns.Add("PosterHash", posterHashColumnBase);
            var practiceModeColumnBase = new ColumnBase<ColumnMappingBase>("PracticeMode", "boolean", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("PracticeMode", practiceModeColumnBase);
            var privateKeyColumnBase = new ColumnBase<ColumnMappingBase>("PrivateKey", "character varying(63)", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("PrivateKey", privateKeyColumnBase);
            var publicKeyColumnBase = new ColumnBase<ColumnMappingBase>("PublicKey", "character varying(63)", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("PublicKey", publicKeyColumnBase);
            var startTimeUtcColumnBase = new ColumnBase<ColumnMappingBase>("StartTimeUtc", "timestamp with time zone", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("StartTimeUtc", startTimeUtcColumnBase);
            var summaryColumnBase = new ColumnBase<ColumnMappingBase>("Summary", "text", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("Summary", summaryColumnBase);
            var teamMemberCountLimitColumnBase = new ColumnBase<ColumnMappingBase>("TeamMemberCountLimit", "integer", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("TeamMemberCountLimit", teamMemberCountLimitColumnBase);
            var titleColumnBase0 = new ColumnBase<ColumnMappingBase>("Title", "text", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("Title", titleColumnBase0);
            var writeupDeadlineColumnBase = new ColumnBase<ColumnMappingBase>("WriteupDeadline", "timestamp with time zone", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("WriteupDeadline", writeupDeadlineColumnBase);
            var writeupNoteColumnBase = new ColumnBase<ColumnMappingBase>("WriteupNote", "text", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("WriteupNote", writeupNoteColumnBase);
            var writeupRequiredColumnBase = new ColumnBase<ColumnMappingBase>("WriteupRequired", "boolean", gZCTFModelsDataGameTableBase);
            gZCTFModelsDataGameTableBase.Columns.Add("WriteupRequired", writeupRequiredColumnBase);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.Game", gZCTFModelsDataGameTableBase);
            var gZCTFModelsDataGameMappingBase = new TableMappingBase<ColumnMappingBase>(game, gZCTFModelsDataGameTableBase, true);
            gZCTFModelsDataGameTableBase.AddTypeMapping(gZCTFModelsDataGameMappingBase, false);
            defaultTableMappings7.Add(gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, game.FindProperty("Id")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)acceptWithoutReviewColumnBase, game.FindProperty("AcceptWithoutReview")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bloodBonusColumnBase, game.FindProperty("BloodBonusValue")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)containerCountLimitColumnBase, game.FindProperty("ContainerCountLimit")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentColumnBase0, game.FindProperty("Content")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)endTimeUtcColumnBase, game.FindProperty("EndTimeUtc")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hiddenColumnBase, game.FindProperty("Hidden")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inviteCodeColumnBase, game.FindProperty("InviteCode")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)organizationsColumnBase, game.FindProperty("Organizations")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)posterHashColumnBase, game.FindProperty("PosterHash")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)practiceModeColumnBase, game.FindProperty("PracticeMode")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)privateKeyColumnBase, game.FindProperty("PrivateKey")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publicKeyColumnBase, game.FindProperty("PublicKey")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startTimeUtcColumnBase, game.FindProperty("StartTimeUtc")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)summaryColumnBase, game.FindProperty("Summary")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)teamMemberCountLimitColumnBase, game.FindProperty("TeamMemberCountLimit")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase0, game.FindProperty("Title")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)writeupDeadlineColumnBase, game.FindProperty("WriteupDeadline")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)writeupNoteColumnBase, game.FindProperty("WriteupNote")!, gZCTFModelsDataGameMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)writeupRequiredColumnBase, game.FindProperty("WriteupRequired")!, gZCTFModelsDataGameMappingBase);

            var tableMappings7 = new List<TableMapping>();
            game.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var gamesTable = new Table("Games", null, relationalModel);
            var idColumn3 = new Column("Id", "integer", gamesTable);
            gamesTable.Columns.Add("Id", idColumn3);
            idColumn3.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var acceptWithoutReviewColumn = new Column("AcceptWithoutReview", "boolean", gamesTable);
            gamesTable.Columns.Add("AcceptWithoutReview", acceptWithoutReviewColumn);
            var bloodBonusColumn = new Column("BloodBonus", "bigint", gamesTable);
            gamesTable.Columns.Add("BloodBonus", bloodBonusColumn);
            var containerCountLimitColumn = new Column("ContainerCountLimit", "integer", gamesTable);
            gamesTable.Columns.Add("ContainerCountLimit", containerCountLimitColumn);
            var contentColumn0 = new Column("Content", "text", gamesTable);
            gamesTable.Columns.Add("Content", contentColumn0);
            var endTimeUtcColumn = new Column("EndTimeUtc", "timestamp with time zone", gamesTable);
            gamesTable.Columns.Add("EndTimeUtc", endTimeUtcColumn);
            var hiddenColumn = new Column("Hidden", "boolean", gamesTable);
            gamesTable.Columns.Add("Hidden", hiddenColumn);
            var inviteCodeColumn = new Column("InviteCode", "text", gamesTable)
            {
                IsNullable = true
            };
            gamesTable.Columns.Add("InviteCode", inviteCodeColumn);
            var organizationsColumn = new Column("Organizations", "text", gamesTable)
            {
                IsNullable = true
            };
            gamesTable.Columns.Add("Organizations", organizationsColumn);
            var posterHashColumn = new Column("PosterHash", "character varying(64)", gamesTable)
            {
                IsNullable = true
            };
            gamesTable.Columns.Add("PosterHash", posterHashColumn);
            var practiceModeColumn = new Column("PracticeMode", "boolean", gamesTable);
            gamesTable.Columns.Add("PracticeMode", practiceModeColumn);
            var privateKeyColumn = new Column("PrivateKey", "character varying(63)", gamesTable);
            gamesTable.Columns.Add("PrivateKey", privateKeyColumn);
            var publicKeyColumn = new Column("PublicKey", "character varying(63)", gamesTable);
            gamesTable.Columns.Add("PublicKey", publicKeyColumn);
            var startTimeUtcColumn = new Column("StartTimeUtc", "timestamp with time zone", gamesTable);
            gamesTable.Columns.Add("StartTimeUtc", startTimeUtcColumn);
            var summaryColumn = new Column("Summary", "text", gamesTable);
            gamesTable.Columns.Add("Summary", summaryColumn);
            var teamMemberCountLimitColumn = new Column("TeamMemberCountLimit", "integer", gamesTable);
            gamesTable.Columns.Add("TeamMemberCountLimit", teamMemberCountLimitColumn);
            var titleColumn0 = new Column("Title", "text", gamesTable);
            gamesTable.Columns.Add("Title", titleColumn0);
            var writeupDeadlineColumn = new Column("WriteupDeadline", "timestamp with time zone", gamesTable);
            gamesTable.Columns.Add("WriteupDeadline", writeupDeadlineColumn);
            var writeupNoteColumn = new Column("WriteupNote", "text", gamesTable);
            gamesTable.Columns.Add("WriteupNote", writeupNoteColumn);
            var writeupRequiredColumn = new Column("WriteupRequired", "boolean", gamesTable);
            gamesTable.Columns.Add("WriteupRequired", writeupRequiredColumn);
            var pK_Games = new UniqueConstraint("PK_Games", gamesTable, new[] { idColumn3 });
            gamesTable.PrimaryKey = pK_Games;
            var pK_GamesUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.Game",
                new[] { "Id" });
            pK_Games.MappedKeys.Add(pK_GamesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_GamesUc).Add(pK_Games);
            gamesTable.UniqueConstraints.Add("PK_Games", pK_Games);
            relationalModel.Tables.Add(("Games", null), gamesTable);
            var gamesTableMapping = new TableMapping(game, gamesTable, true);
            gamesTable.AddTypeMapping(gamesTableMapping, false);
            tableMappings7.Add(gamesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, game.FindProperty("Id")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(acceptWithoutReviewColumn, game.FindProperty("AcceptWithoutReview")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(bloodBonusColumn, game.FindProperty("BloodBonusValue")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(containerCountLimitColumn, game.FindProperty("ContainerCountLimit")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(contentColumn0, game.FindProperty("Content")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(endTimeUtcColumn, game.FindProperty("EndTimeUtc")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(hiddenColumn, game.FindProperty("Hidden")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(inviteCodeColumn, game.FindProperty("InviteCode")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(organizationsColumn, game.FindProperty("Organizations")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(posterHashColumn, game.FindProperty("PosterHash")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(practiceModeColumn, game.FindProperty("PracticeMode")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(privateKeyColumn, game.FindProperty("PrivateKey")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(publicKeyColumn, game.FindProperty("PublicKey")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(startTimeUtcColumn, game.FindProperty("StartTimeUtc")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(summaryColumn, game.FindProperty("Summary")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(teamMemberCountLimitColumn, game.FindProperty("TeamMemberCountLimit")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn0, game.FindProperty("Title")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(writeupDeadlineColumn, game.FindProperty("WriteupDeadline")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(writeupNoteColumn, game.FindProperty("WriteupNote")!, gamesTableMapping);
            RelationalModel.CreateColumnMapping(writeupRequiredColumn, game.FindProperty("WriteupRequired")!, gamesTableMapping);

            var gameChallenge = FindEntityType("GZCTF.Models.Data.GameChallenge")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            gameChallenge.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var gZCTFModelsDataGameChallengeTableBase = new TableBase("GZCTF.Models.Data.GameChallenge", null, relationalModel);
            var acceptedCountColumnBase0 = new ColumnBase<ColumnMappingBase>("AcceptedCount", "integer", gZCTFModelsDataGameChallengeTableBase);
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("AcceptedCount", acceptedCountColumnBase0);
            var attachmentIdColumnBase1 = new ColumnBase<ColumnMappingBase>("AttachmentId", "integer", gZCTFModelsDataGameChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("AttachmentId", attachmentIdColumnBase1);
            var cPUCountColumnBase0 = new ColumnBase<ColumnMappingBase>("CPUCount", "integer", gZCTFModelsDataGameChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("CPUCount", cPUCountColumnBase0);
            var concurrencyStampColumnBase0 = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "uuid", gZCTFModelsDataGameChallengeTableBase);
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase0);
            var containerExposePortColumnBase0 = new ColumnBase<ColumnMappingBase>("ContainerExposePort", "integer", gZCTFModelsDataGameChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("ContainerExposePort", containerExposePortColumnBase0);
            var containerImageColumnBase0 = new ColumnBase<ColumnMappingBase>("ContainerImage", "text", gZCTFModelsDataGameChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("ContainerImage", containerImageColumnBase0);
            var contentColumnBase1 = new ColumnBase<ColumnMappingBase>("Content", "text", gZCTFModelsDataGameChallengeTableBase);
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("Content", contentColumnBase1);
            var difficultyColumnBase0 = new ColumnBase<ColumnMappingBase>("Difficulty", "double precision", gZCTFModelsDataGameChallengeTableBase);
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("Difficulty", difficultyColumnBase0);
            var enableTrafficCaptureColumnBase = new ColumnBase<ColumnMappingBase>("EnableTrafficCapture", "boolean", gZCTFModelsDataGameChallengeTableBase);
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("EnableTrafficCapture", enableTrafficCaptureColumnBase);
            var fileNameColumnBase0 = new ColumnBase<ColumnMappingBase>("FileName", "text", gZCTFModelsDataGameChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("FileName", fileNameColumnBase0);
            var flagTemplateColumnBase0 = new ColumnBase<ColumnMappingBase>("FlagTemplate", "text", gZCTFModelsDataGameChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("FlagTemplate", flagTemplateColumnBase0);
            var gameIdColumnBase0 = new ColumnBase<ColumnMappingBase>("GameId", "integer", gZCTFModelsDataGameChallengeTableBase);
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("GameId", gameIdColumnBase0);
            var hintsColumnBase0 = new ColumnBase<ColumnMappingBase>("Hints", "text", gZCTFModelsDataGameChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("Hints", hintsColumnBase0);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "integer", gZCTFModelsDataGameChallengeTableBase);
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("Id", idColumnBase4);
            var isEnabledColumnBase0 = new ColumnBase<ColumnMappingBase>("IsEnabled", "boolean", gZCTFModelsDataGameChallengeTableBase);
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("IsEnabled", isEnabledColumnBase0);
            var memoryLimitColumnBase0 = new ColumnBase<ColumnMappingBase>("MemoryLimit", "integer", gZCTFModelsDataGameChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("MemoryLimit", memoryLimitColumnBase0);
            var minScoreRateColumnBase = new ColumnBase<ColumnMappingBase>("MinScoreRate", "double precision", gZCTFModelsDataGameChallengeTableBase);
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("MinScoreRate", minScoreRateColumnBase);
            var originalScoreColumnBase = new ColumnBase<ColumnMappingBase>("OriginalScore", "integer", gZCTFModelsDataGameChallengeTableBase);
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("OriginalScore", originalScoreColumnBase);
            var storageLimitColumnBase0 = new ColumnBase<ColumnMappingBase>("StorageLimit", "integer", gZCTFModelsDataGameChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("StorageLimit", storageLimitColumnBase0);
            var submissionCountColumnBase0 = new ColumnBase<ColumnMappingBase>("SubmissionCount", "integer", gZCTFModelsDataGameChallengeTableBase);
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("SubmissionCount", submissionCountColumnBase0);
            var tagColumnBase0 = new ColumnBase<ColumnMappingBase>("Tag", "smallint", gZCTFModelsDataGameChallengeTableBase);
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("Tag", tagColumnBase0);
            var testContainerIdColumnBase0 = new ColumnBase<ColumnMappingBase>("TestContainerId", "uuid", gZCTFModelsDataGameChallengeTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("TestContainerId", testContainerIdColumnBase0);
            var titleColumnBase1 = new ColumnBase<ColumnMappingBase>("Title", "text", gZCTFModelsDataGameChallengeTableBase);
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("Title", titleColumnBase1);
            var typeColumnBase1 = new ColumnBase<ColumnMappingBase>("Type", "smallint", gZCTFModelsDataGameChallengeTableBase);
            gZCTFModelsDataGameChallengeTableBase.Columns.Add("Type", typeColumnBase1);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.GameChallenge", gZCTFModelsDataGameChallengeTableBase);
            var gZCTFModelsDataGameChallengeMappingBase = new TableMappingBase<ColumnMappingBase>(gameChallenge, gZCTFModelsDataGameChallengeTableBase, true);
            gZCTFModelsDataGameChallengeTableBase.AddTypeMapping(gZCTFModelsDataGameChallengeMappingBase, false);
            defaultTableMappings8.Add(gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, gameChallenge.FindProperty("Id")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)acceptedCountColumnBase0, gameChallenge.FindProperty("AcceptedCount")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)attachmentIdColumnBase1, gameChallenge.FindProperty("AttachmentId")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cPUCountColumnBase0, gameChallenge.FindProperty("CPUCount")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase0, gameChallenge.FindProperty("ConcurrencyStamp")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)containerExposePortColumnBase0, gameChallenge.FindProperty("ContainerExposePort")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)containerImageColumnBase0, gameChallenge.FindProperty("ContainerImage")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentColumnBase1, gameChallenge.FindProperty("Content")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)difficultyColumnBase0, gameChallenge.FindProperty("Difficulty")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enableTrafficCaptureColumnBase, gameChallenge.FindProperty("EnableTrafficCapture")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fileNameColumnBase0, gameChallenge.FindProperty("FileName")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)flagTemplateColumnBase0, gameChallenge.FindProperty("FlagTemplate")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gameIdColumnBase0, gameChallenge.FindProperty("GameId")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hintsColumnBase0, gameChallenge.FindProperty("Hints")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isEnabledColumnBase0, gameChallenge.FindProperty("IsEnabled")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)memoryLimitColumnBase0, gameChallenge.FindProperty("MemoryLimit")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)minScoreRateColumnBase, gameChallenge.FindProperty("MinScoreRate")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)originalScoreColumnBase, gameChallenge.FindProperty("OriginalScore")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)storageLimitColumnBase0, gameChallenge.FindProperty("StorageLimit")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)submissionCountColumnBase0, gameChallenge.FindProperty("SubmissionCount")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tagColumnBase0, gameChallenge.FindProperty("Tag")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)testContainerIdColumnBase0, gameChallenge.FindProperty("TestContainerId")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase1, gameChallenge.FindProperty("Title")!, gZCTFModelsDataGameChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase1, gameChallenge.FindProperty("Type")!, gZCTFModelsDataGameChallengeMappingBase);

            var tableMappings8 = new List<TableMapping>();
            gameChallenge.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var gameChallengesTable = new Table("GameChallenges", null, relationalModel);
            var idColumn4 = new Column("Id", "integer", gameChallengesTable);
            gameChallengesTable.Columns.Add("Id", idColumn4);
            idColumn4.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var acceptedCountColumn0 = new Column("AcceptedCount", "integer", gameChallengesTable);
            gameChallengesTable.Columns.Add("AcceptedCount", acceptedCountColumn0);
            var attachmentIdColumn1 = new Column("AttachmentId", "integer", gameChallengesTable)
            {
                IsNullable = true
            };
            gameChallengesTable.Columns.Add("AttachmentId", attachmentIdColumn1);
            var cPUCountColumn0 = new Column("CPUCount", "integer", gameChallengesTable)
            {
                IsNullable = true
            };
            gameChallengesTable.Columns.Add("CPUCount", cPUCountColumn0);
            var concurrencyStampColumn0 = new Column("ConcurrencyStamp", "uuid", gameChallengesTable);
            gameChallengesTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn0);
            var containerExposePortColumn0 = new Column("ContainerExposePort", "integer", gameChallengesTable)
            {
                IsNullable = true
            };
            gameChallengesTable.Columns.Add("ContainerExposePort", containerExposePortColumn0);
            var containerImageColumn0 = new Column("ContainerImage", "text", gameChallengesTable)
            {
                IsNullable = true
            };
            gameChallengesTable.Columns.Add("ContainerImage", containerImageColumn0);
            var contentColumn1 = new Column("Content", "text", gameChallengesTable);
            gameChallengesTable.Columns.Add("Content", contentColumn1);
            var difficultyColumn0 = new Column("Difficulty", "double precision", gameChallengesTable);
            gameChallengesTable.Columns.Add("Difficulty", difficultyColumn0);
            var enableTrafficCaptureColumn = new Column("EnableTrafficCapture", "boolean", gameChallengesTable);
            gameChallengesTable.Columns.Add("EnableTrafficCapture", enableTrafficCaptureColumn);
            var fileNameColumn0 = new Column("FileName", "text", gameChallengesTable)
            {
                IsNullable = true
            };
            gameChallengesTable.Columns.Add("FileName", fileNameColumn0);
            var flagTemplateColumn0 = new Column("FlagTemplate", "text", gameChallengesTable)
            {
                IsNullable = true
            };
            gameChallengesTable.Columns.Add("FlagTemplate", flagTemplateColumn0);
            var gameIdColumn0 = new Column("GameId", "integer", gameChallengesTable);
            gameChallengesTable.Columns.Add("GameId", gameIdColumn0);
            var hintsColumn0 = new Column("Hints", "text", gameChallengesTable)
            {
                IsNullable = true
            };
            gameChallengesTable.Columns.Add("Hints", hintsColumn0);
            var isEnabledColumn0 = new Column("IsEnabled", "boolean", gameChallengesTable);
            gameChallengesTable.Columns.Add("IsEnabled", isEnabledColumn0);
            var memoryLimitColumn0 = new Column("MemoryLimit", "integer", gameChallengesTable)
            {
                IsNullable = true
            };
            gameChallengesTable.Columns.Add("MemoryLimit", memoryLimitColumn0);
            var minScoreRateColumn = new Column("MinScoreRate", "double precision", gameChallengesTable);
            gameChallengesTable.Columns.Add("MinScoreRate", minScoreRateColumn);
            var originalScoreColumn = new Column("OriginalScore", "integer", gameChallengesTable);
            gameChallengesTable.Columns.Add("OriginalScore", originalScoreColumn);
            var storageLimitColumn0 = new Column("StorageLimit", "integer", gameChallengesTable)
            {
                IsNullable = true
            };
            gameChallengesTable.Columns.Add("StorageLimit", storageLimitColumn0);
            var submissionCountColumn0 = new Column("SubmissionCount", "integer", gameChallengesTable);
            gameChallengesTable.Columns.Add("SubmissionCount", submissionCountColumn0);
            var tagColumn0 = new Column("Tag", "smallint", gameChallengesTable);
            gameChallengesTable.Columns.Add("Tag", tagColumn0);
            var testContainerIdColumn0 = new Column("TestContainerId", "uuid", gameChallengesTable)
            {
                IsNullable = true
            };
            gameChallengesTable.Columns.Add("TestContainerId", testContainerIdColumn0);
            var titleColumn1 = new Column("Title", "text", gameChallengesTable);
            gameChallengesTable.Columns.Add("Title", titleColumn1);
            var typeColumn1 = new Column("Type", "smallint", gameChallengesTable);
            gameChallengesTable.Columns.Add("Type", typeColumn1);
            var pK_GameChallenges = new UniqueConstraint("PK_GameChallenges", gameChallengesTable, new[] { idColumn4 });
            gameChallengesTable.PrimaryKey = pK_GameChallenges;
            var pK_GameChallengesUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.GameChallenge",
                new[] { "Id" });
            pK_GameChallenges.MappedKeys.Add(pK_GameChallengesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_GameChallengesUc).Add(pK_GameChallenges);
            gameChallengesTable.UniqueConstraints.Add("PK_GameChallenges", pK_GameChallenges);
            var iX_GameChallenges_AttachmentId = new TableIndex(
            "IX_GameChallenges_AttachmentId", gameChallengesTable, new[] { attachmentIdColumn1 }, false);
            var iX_GameChallenges_AttachmentIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.GameChallenge",
                new[] { "AttachmentId" });
            iX_GameChallenges_AttachmentId.MappedIndexes.Add(iX_GameChallenges_AttachmentIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_GameChallenges_AttachmentIdIx).Add(iX_GameChallenges_AttachmentId);
            gameChallengesTable.Indexes.Add("IX_GameChallenges_AttachmentId", iX_GameChallenges_AttachmentId);
            var iX_GameChallenges_GameId = new TableIndex(
            "IX_GameChallenges_GameId", gameChallengesTable, new[] { gameIdColumn0 }, false);
            var iX_GameChallenges_GameIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.GameChallenge",
                new[] { "GameId" });
            iX_GameChallenges_GameId.MappedIndexes.Add(iX_GameChallenges_GameIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_GameChallenges_GameIdIx).Add(iX_GameChallenges_GameId);
            gameChallengesTable.Indexes.Add("IX_GameChallenges_GameId", iX_GameChallenges_GameId);
            var iX_GameChallenges_TestContainerId = new TableIndex(
            "IX_GameChallenges_TestContainerId", gameChallengesTable, new[] { testContainerIdColumn0 }, false);
            var iX_GameChallenges_TestContainerIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.GameChallenge",
                new[] { "TestContainerId" });
            iX_GameChallenges_TestContainerId.MappedIndexes.Add(iX_GameChallenges_TestContainerIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_GameChallenges_TestContainerIdIx).Add(iX_GameChallenges_TestContainerId);
            gameChallengesTable.Indexes.Add("IX_GameChallenges_TestContainerId", iX_GameChallenges_TestContainerId);
            relationalModel.Tables.Add(("GameChallenges", null), gameChallengesTable);
            var gameChallengesTableMapping = new TableMapping(gameChallenge, gameChallengesTable, true);
            gameChallengesTable.AddTypeMapping(gameChallengesTableMapping, false);
            tableMappings8.Add(gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, gameChallenge.FindProperty("Id")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(acceptedCountColumn0, gameChallenge.FindProperty("AcceptedCount")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(attachmentIdColumn1, gameChallenge.FindProperty("AttachmentId")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(cPUCountColumn0, gameChallenge.FindProperty("CPUCount")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn0, gameChallenge.FindProperty("ConcurrencyStamp")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(containerExposePortColumn0, gameChallenge.FindProperty("ContainerExposePort")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(containerImageColumn0, gameChallenge.FindProperty("ContainerImage")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(contentColumn1, gameChallenge.FindProperty("Content")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(difficultyColumn0, gameChallenge.FindProperty("Difficulty")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(enableTrafficCaptureColumn, gameChallenge.FindProperty("EnableTrafficCapture")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(fileNameColumn0, gameChallenge.FindProperty("FileName")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(flagTemplateColumn0, gameChallenge.FindProperty("FlagTemplate")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(gameIdColumn0, gameChallenge.FindProperty("GameId")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(hintsColumn0, gameChallenge.FindProperty("Hints")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(isEnabledColumn0, gameChallenge.FindProperty("IsEnabled")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(memoryLimitColumn0, gameChallenge.FindProperty("MemoryLimit")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(minScoreRateColumn, gameChallenge.FindProperty("MinScoreRate")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(originalScoreColumn, gameChallenge.FindProperty("OriginalScore")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(storageLimitColumn0, gameChallenge.FindProperty("StorageLimit")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(submissionCountColumn0, gameChallenge.FindProperty("SubmissionCount")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(tagColumn0, gameChallenge.FindProperty("Tag")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(testContainerIdColumn0, gameChallenge.FindProperty("TestContainerId")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn1, gameChallenge.FindProperty("Title")!, gameChallengesTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn1, gameChallenge.FindProperty("Type")!, gameChallengesTableMapping);

            var gameEvent = FindEntityType("GZCTF.Models.Data.GameEvent")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            gameEvent.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var gZCTFModelsDataGameEventTableBase = new TableBase("GZCTF.Models.Data.GameEvent", null, relationalModel);
            var gameIdColumnBase1 = new ColumnBase<ColumnMappingBase>("GameId", "integer", gZCTFModelsDataGameEventTableBase);
            gZCTFModelsDataGameEventTableBase.Columns.Add("GameId", gameIdColumnBase1);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "integer", gZCTFModelsDataGameEventTableBase);
            gZCTFModelsDataGameEventTableBase.Columns.Add("Id", idColumnBase5);
            var publishTimeUtcColumnBase = new ColumnBase<ColumnMappingBase>("PublishTimeUtc", "timestamp with time zone", gZCTFModelsDataGameEventTableBase);
            gZCTFModelsDataGameEventTableBase.Columns.Add("PublishTimeUtc", publishTimeUtcColumnBase);
            var teamIdColumnBase = new ColumnBase<ColumnMappingBase>("TeamId", "integer", gZCTFModelsDataGameEventTableBase);
            gZCTFModelsDataGameEventTableBase.Columns.Add("TeamId", teamIdColumnBase);
            var typeColumnBase2 = new ColumnBase<ColumnMappingBase>("Type", "smallint", gZCTFModelsDataGameEventTableBase);
            gZCTFModelsDataGameEventTableBase.Columns.Add("Type", typeColumnBase2);
            var userIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserId", "uuid", gZCTFModelsDataGameEventTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameEventTableBase.Columns.Add("UserId", userIdColumnBase0);
            var valuesColumnBase = new ColumnBase<ColumnMappingBase>("Values", "text", gZCTFModelsDataGameEventTableBase);
            gZCTFModelsDataGameEventTableBase.Columns.Add("Values", valuesColumnBase);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.GameEvent", gZCTFModelsDataGameEventTableBase);
            var gZCTFModelsDataGameEventMappingBase = new TableMappingBase<ColumnMappingBase>(gameEvent, gZCTFModelsDataGameEventTableBase, true);
            gZCTFModelsDataGameEventTableBase.AddTypeMapping(gZCTFModelsDataGameEventMappingBase, false);
            defaultTableMappings9.Add(gZCTFModelsDataGameEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, gameEvent.FindProperty("Id")!, gZCTFModelsDataGameEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gameIdColumnBase1, gameEvent.FindProperty("GameId")!, gZCTFModelsDataGameEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publishTimeUtcColumnBase, gameEvent.FindProperty("PublishTimeUtc")!, gZCTFModelsDataGameEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)teamIdColumnBase, gameEvent.FindProperty("TeamId")!, gZCTFModelsDataGameEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase2, gameEvent.FindProperty("Type")!, gZCTFModelsDataGameEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase0, gameEvent.FindProperty("UserId")!, gZCTFModelsDataGameEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valuesColumnBase, gameEvent.FindProperty("Values")!, gZCTFModelsDataGameEventMappingBase);

            var tableMappings9 = new List<TableMapping>();
            gameEvent.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var gameEventsTable = new Table("GameEvents", null, relationalModel);
            var idColumn5 = new Column("Id", "integer", gameEventsTable);
            gameEventsTable.Columns.Add("Id", idColumn5);
            idColumn5.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var gameIdColumn1 = new Column("GameId", "integer", gameEventsTable);
            gameEventsTable.Columns.Add("GameId", gameIdColumn1);
            var publishTimeUtcColumn = new Column("PublishTimeUtc", "timestamp with time zone", gameEventsTable);
            gameEventsTable.Columns.Add("PublishTimeUtc", publishTimeUtcColumn);
            var teamIdColumn = new Column("TeamId", "integer", gameEventsTable);
            gameEventsTable.Columns.Add("TeamId", teamIdColumn);
            var typeColumn2 = new Column("Type", "smallint", gameEventsTable);
            gameEventsTable.Columns.Add("Type", typeColumn2);
            var userIdColumn0 = new Column("UserId", "uuid", gameEventsTable)
            {
                IsNullable = true
            };
            gameEventsTable.Columns.Add("UserId", userIdColumn0);
            var valuesColumn = new Column("Values", "text", gameEventsTable);
            gameEventsTable.Columns.Add("Values", valuesColumn);
            var pK_GameEvents = new UniqueConstraint("PK_GameEvents", gameEventsTable, new[] { idColumn5 });
            gameEventsTable.PrimaryKey = pK_GameEvents;
            var pK_GameEventsUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.GameEvent",
                new[] { "Id" });
            pK_GameEvents.MappedKeys.Add(pK_GameEventsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_GameEventsUc).Add(pK_GameEvents);
            gameEventsTable.UniqueConstraints.Add("PK_GameEvents", pK_GameEvents);
            var iX_GameEvents_GameId = new TableIndex(
            "IX_GameEvents_GameId", gameEventsTable, new[] { gameIdColumn1 }, false);
            var iX_GameEvents_GameIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.GameEvent",
                new[] { "GameId" });
            iX_GameEvents_GameId.MappedIndexes.Add(iX_GameEvents_GameIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_GameEvents_GameIdIx).Add(iX_GameEvents_GameId);
            gameEventsTable.Indexes.Add("IX_GameEvents_GameId", iX_GameEvents_GameId);
            var iX_GameEvents_TeamId = new TableIndex(
            "IX_GameEvents_TeamId", gameEventsTable, new[] { teamIdColumn }, false);
            var iX_GameEvents_TeamIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.GameEvent",
                new[] { "TeamId" });
            iX_GameEvents_TeamId.MappedIndexes.Add(iX_GameEvents_TeamIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_GameEvents_TeamIdIx).Add(iX_GameEvents_TeamId);
            gameEventsTable.Indexes.Add("IX_GameEvents_TeamId", iX_GameEvents_TeamId);
            var iX_GameEvents_UserId = new TableIndex(
            "IX_GameEvents_UserId", gameEventsTable, new[] { userIdColumn0 }, false);
            var iX_GameEvents_UserIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.GameEvent",
                new[] { "UserId" });
            iX_GameEvents_UserId.MappedIndexes.Add(iX_GameEvents_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_GameEvents_UserIdIx).Add(iX_GameEvents_UserId);
            gameEventsTable.Indexes.Add("IX_GameEvents_UserId", iX_GameEvents_UserId);
            relationalModel.Tables.Add(("GameEvents", null), gameEventsTable);
            var gameEventsTableMapping = new TableMapping(gameEvent, gameEventsTable, true);
            gameEventsTable.AddTypeMapping(gameEventsTableMapping, false);
            tableMappings9.Add(gameEventsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, gameEvent.FindProperty("Id")!, gameEventsTableMapping);
            RelationalModel.CreateColumnMapping(gameIdColumn1, gameEvent.FindProperty("GameId")!, gameEventsTableMapping);
            RelationalModel.CreateColumnMapping(publishTimeUtcColumn, gameEvent.FindProperty("PublishTimeUtc")!, gameEventsTableMapping);
            RelationalModel.CreateColumnMapping(teamIdColumn, gameEvent.FindProperty("TeamId")!, gameEventsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn2, gameEvent.FindProperty("Type")!, gameEventsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn0, gameEvent.FindProperty("UserId")!, gameEventsTableMapping);
            RelationalModel.CreateColumnMapping(valuesColumn, gameEvent.FindProperty("Values")!, gameEventsTableMapping);

            var gameInstance = FindEntityType("GZCTF.Models.Data.GameInstance")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            gameInstance.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var gZCTFModelsDataGameInstanceTableBase = new TableBase("GZCTF.Models.Data.GameInstance", null, relationalModel);
            var challengeIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ChallengeId", "integer", gZCTFModelsDataGameInstanceTableBase);
            gZCTFModelsDataGameInstanceTableBase.Columns.Add("ChallengeId", challengeIdColumnBase0);
            var containerIdColumnBase1 = new ColumnBase<ColumnMappingBase>("ContainerId", "uuid", gZCTFModelsDataGameInstanceTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameInstanceTableBase.Columns.Add("ContainerId", containerIdColumnBase1);
            var flagIdColumnBase0 = new ColumnBase<ColumnMappingBase>("FlagId", "integer", gZCTFModelsDataGameInstanceTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataGameInstanceTableBase.Columns.Add("FlagId", flagIdColumnBase0);
            var isLoadedColumnBase0 = new ColumnBase<ColumnMappingBase>("IsLoaded", "boolean", gZCTFModelsDataGameInstanceTableBase);
            gZCTFModelsDataGameInstanceTableBase.Columns.Add("IsLoaded", isLoadedColumnBase0);
            var isSolvedColumnBase0 = new ColumnBase<ColumnMappingBase>("IsSolved", "boolean", gZCTFModelsDataGameInstanceTableBase);
            gZCTFModelsDataGameInstanceTableBase.Columns.Add("IsSolved", isSolvedColumnBase0);
            var lastContainerOperationColumnBase0 = new ColumnBase<ColumnMappingBase>("LastContainerOperation", "timestamp with time zone", gZCTFModelsDataGameInstanceTableBase);
            gZCTFModelsDataGameInstanceTableBase.Columns.Add("LastContainerOperation", lastContainerOperationColumnBase0);
            var participationIdColumnBase = new ColumnBase<ColumnMappingBase>("ParticipationId", "integer", gZCTFModelsDataGameInstanceTableBase);
            gZCTFModelsDataGameInstanceTableBase.Columns.Add("ParticipationId", participationIdColumnBase);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.GameInstance", gZCTFModelsDataGameInstanceTableBase);
            var gZCTFModelsDataGameInstanceMappingBase = new TableMappingBase<ColumnMappingBase>(gameInstance, gZCTFModelsDataGameInstanceTableBase, true);
            gZCTFModelsDataGameInstanceTableBase.AddTypeMapping(gZCTFModelsDataGameInstanceMappingBase, false);
            defaultTableMappings10.Add(gZCTFModelsDataGameInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)challengeIdColumnBase0, gameInstance.FindProperty("ChallengeId")!, gZCTFModelsDataGameInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)participationIdColumnBase, gameInstance.FindProperty("ParticipationId")!, gZCTFModelsDataGameInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)containerIdColumnBase1, gameInstance.FindProperty("ContainerId")!, gZCTFModelsDataGameInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)flagIdColumnBase0, gameInstance.FindProperty("FlagId")!, gZCTFModelsDataGameInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isLoadedColumnBase0, gameInstance.FindProperty("IsLoaded")!, gZCTFModelsDataGameInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isSolvedColumnBase0, gameInstance.FindProperty("IsSolved")!, gZCTFModelsDataGameInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastContainerOperationColumnBase0, gameInstance.FindProperty("LastContainerOperation")!, gZCTFModelsDataGameInstanceMappingBase);

            var tableMappings10 = new List<TableMapping>();
            gameInstance.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var gameInstancesTable = new Table("GameInstances", null, relationalModel);
            var challengeIdColumn0 = new Column("ChallengeId", "integer", gameInstancesTable);
            gameInstancesTable.Columns.Add("ChallengeId", challengeIdColumn0);
            var participationIdColumn = new Column("ParticipationId", "integer", gameInstancesTable);
            gameInstancesTable.Columns.Add("ParticipationId", participationIdColumn);
            var containerIdColumn1 = new Column("ContainerId", "uuid", gameInstancesTable)
            {
                IsNullable = true
            };
            gameInstancesTable.Columns.Add("ContainerId", containerIdColumn1);
            var flagIdColumn0 = new Column("FlagId", "integer", gameInstancesTable)
            {
                IsNullable = true
            };
            gameInstancesTable.Columns.Add("FlagId", flagIdColumn0);
            var isLoadedColumn0 = new Column("IsLoaded", "boolean", gameInstancesTable);
            gameInstancesTable.Columns.Add("IsLoaded", isLoadedColumn0);
            var isSolvedColumn0 = new Column("IsSolved", "boolean", gameInstancesTable);
            gameInstancesTable.Columns.Add("IsSolved", isSolvedColumn0);
            var lastContainerOperationColumn0 = new Column("LastContainerOperation", "timestamp with time zone", gameInstancesTable);
            gameInstancesTable.Columns.Add("LastContainerOperation", lastContainerOperationColumn0);
            var pK_GameInstances = new UniqueConstraint("PK_GameInstances", gameInstancesTable, new[] { challengeIdColumn0, participationIdColumn });
            gameInstancesTable.PrimaryKey = pK_GameInstances;
            var pK_GameInstancesUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.GameInstance",
                new[] { "ChallengeId", "ParticipationId" });
            pK_GameInstances.MappedKeys.Add(pK_GameInstancesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_GameInstancesUc).Add(pK_GameInstances);
            gameInstancesTable.UniqueConstraints.Add("PK_GameInstances", pK_GameInstances);
            var iX_GameInstances_ContainerId = new TableIndex(
            "IX_GameInstances_ContainerId", gameInstancesTable, new[] { containerIdColumn1 }, true);
            var iX_GameInstances_ContainerIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.GameInstance",
                new[] { "ContainerId" });
            iX_GameInstances_ContainerId.MappedIndexes.Add(iX_GameInstances_ContainerIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_GameInstances_ContainerIdIx).Add(iX_GameInstances_ContainerId);
            gameInstancesTable.Indexes.Add("IX_GameInstances_ContainerId", iX_GameInstances_ContainerId);
            var iX_GameInstances_FlagId = new TableIndex(
            "IX_GameInstances_FlagId", gameInstancesTable, new[] { flagIdColumn0 }, false);
            var iX_GameInstances_FlagIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.GameInstance",
                new[] { "FlagId" });
            iX_GameInstances_FlagId.MappedIndexes.Add(iX_GameInstances_FlagIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_GameInstances_FlagIdIx).Add(iX_GameInstances_FlagId);
            gameInstancesTable.Indexes.Add("IX_GameInstances_FlagId", iX_GameInstances_FlagId);
            var iX_GameInstances_ParticipationId = new TableIndex(
            "IX_GameInstances_ParticipationId", gameInstancesTable, new[] { participationIdColumn }, false);
            var iX_GameInstances_ParticipationIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.GameInstance",
                new[] { "ParticipationId" });
            iX_GameInstances_ParticipationId.MappedIndexes.Add(iX_GameInstances_ParticipationIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_GameInstances_ParticipationIdIx).Add(iX_GameInstances_ParticipationId);
            gameInstancesTable.Indexes.Add("IX_GameInstances_ParticipationId", iX_GameInstances_ParticipationId);
            relationalModel.Tables.Add(("GameInstances", null), gameInstancesTable);
            var gameInstancesTableMapping = new TableMapping(gameInstance, gameInstancesTable, true);
            gameInstancesTable.AddTypeMapping(gameInstancesTableMapping, false);
            tableMappings10.Add(gameInstancesTableMapping);
            RelationalModel.CreateColumnMapping(challengeIdColumn0, gameInstance.FindProperty("ChallengeId")!, gameInstancesTableMapping);
            RelationalModel.CreateColumnMapping(participationIdColumn, gameInstance.FindProperty("ParticipationId")!, gameInstancesTableMapping);
            RelationalModel.CreateColumnMapping(containerIdColumn1, gameInstance.FindProperty("ContainerId")!, gameInstancesTableMapping);
            RelationalModel.CreateColumnMapping(flagIdColumn0, gameInstance.FindProperty("FlagId")!, gameInstancesTableMapping);
            RelationalModel.CreateColumnMapping(isLoadedColumn0, gameInstance.FindProperty("IsLoaded")!, gameInstancesTableMapping);
            RelationalModel.CreateColumnMapping(isSolvedColumn0, gameInstance.FindProperty("IsSolved")!, gameInstancesTableMapping);
            RelationalModel.CreateColumnMapping(lastContainerOperationColumn0, gameInstance.FindProperty("LastContainerOperation")!, gameInstancesTableMapping);

            var gameNotice = FindEntityType("GZCTF.Models.Data.GameNotice")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            gameNotice.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var gZCTFModelsDataGameNoticeTableBase = new TableBase("GZCTF.Models.Data.GameNotice", null, relationalModel);
            var gameIdColumnBase2 = new ColumnBase<ColumnMappingBase>("GameId", "integer", gZCTFModelsDataGameNoticeTableBase);
            gZCTFModelsDataGameNoticeTableBase.Columns.Add("GameId", gameIdColumnBase2);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("Id", "integer", gZCTFModelsDataGameNoticeTableBase);
            gZCTFModelsDataGameNoticeTableBase.Columns.Add("Id", idColumnBase6);
            var publishTimeUtcColumnBase0 = new ColumnBase<ColumnMappingBase>("PublishTimeUtc", "timestamp with time zone", gZCTFModelsDataGameNoticeTableBase);
            gZCTFModelsDataGameNoticeTableBase.Columns.Add("PublishTimeUtc", publishTimeUtcColumnBase0);
            var typeColumnBase3 = new ColumnBase<ColumnMappingBase>("Type", "smallint", gZCTFModelsDataGameNoticeTableBase);
            gZCTFModelsDataGameNoticeTableBase.Columns.Add("Type", typeColumnBase3);
            var valuesColumnBase0 = new ColumnBase<ColumnMappingBase>("Values", "text", gZCTFModelsDataGameNoticeTableBase);
            gZCTFModelsDataGameNoticeTableBase.Columns.Add("Values", valuesColumnBase0);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.GameNotice", gZCTFModelsDataGameNoticeTableBase);
            var gZCTFModelsDataGameNoticeMappingBase = new TableMappingBase<ColumnMappingBase>(gameNotice, gZCTFModelsDataGameNoticeTableBase, true);
            gZCTFModelsDataGameNoticeTableBase.AddTypeMapping(gZCTFModelsDataGameNoticeMappingBase, false);
            defaultTableMappings11.Add(gZCTFModelsDataGameNoticeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, gameNotice.FindProperty("Id")!, gZCTFModelsDataGameNoticeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gameIdColumnBase2, gameNotice.FindProperty("GameId")!, gZCTFModelsDataGameNoticeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publishTimeUtcColumnBase0, gameNotice.FindProperty("PublishTimeUtc")!, gZCTFModelsDataGameNoticeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase3, gameNotice.FindProperty("Type")!, gZCTFModelsDataGameNoticeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valuesColumnBase0, gameNotice.FindProperty("Values")!, gZCTFModelsDataGameNoticeMappingBase);

            var tableMappings11 = new List<TableMapping>();
            gameNotice.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var gameNoticesTable = new Table("GameNotices", null, relationalModel);
            var idColumn6 = new Column("Id", "integer", gameNoticesTable);
            gameNoticesTable.Columns.Add("Id", idColumn6);
            idColumn6.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var gameIdColumn2 = new Column("GameId", "integer", gameNoticesTable);
            gameNoticesTable.Columns.Add("GameId", gameIdColumn2);
            var publishTimeUtcColumn0 = new Column("PublishTimeUtc", "timestamp with time zone", gameNoticesTable);
            gameNoticesTable.Columns.Add("PublishTimeUtc", publishTimeUtcColumn0);
            var typeColumn3 = new Column("Type", "smallint", gameNoticesTable);
            gameNoticesTable.Columns.Add("Type", typeColumn3);
            var valuesColumn0 = new Column("Values", "text", gameNoticesTable);
            gameNoticesTable.Columns.Add("Values", valuesColumn0);
            var pK_GameNotices = new UniqueConstraint("PK_GameNotices", gameNoticesTable, new[] { idColumn6 });
            gameNoticesTable.PrimaryKey = pK_GameNotices;
            var pK_GameNoticesUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.GameNotice",
                new[] { "Id" });
            pK_GameNotices.MappedKeys.Add(pK_GameNoticesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_GameNoticesUc).Add(pK_GameNotices);
            gameNoticesTable.UniqueConstraints.Add("PK_GameNotices", pK_GameNotices);
            var iX_GameNotices_GameId = new TableIndex(
            "IX_GameNotices_GameId", gameNoticesTable, new[] { gameIdColumn2 }, false);
            var iX_GameNotices_GameIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.GameNotice",
                new[] { "GameId" });
            iX_GameNotices_GameId.MappedIndexes.Add(iX_GameNotices_GameIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_GameNotices_GameIdIx).Add(iX_GameNotices_GameId);
            gameNoticesTable.Indexes.Add("IX_GameNotices_GameId", iX_GameNotices_GameId);
            relationalModel.Tables.Add(("GameNotices", null), gameNoticesTable);
            var gameNoticesTableMapping = new TableMapping(gameNotice, gameNoticesTable, true);
            gameNoticesTable.AddTypeMapping(gameNoticesTableMapping, false);
            tableMappings11.Add(gameNoticesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, gameNotice.FindProperty("Id")!, gameNoticesTableMapping);
            RelationalModel.CreateColumnMapping(gameIdColumn2, gameNotice.FindProperty("GameId")!, gameNoticesTableMapping);
            RelationalModel.CreateColumnMapping(publishTimeUtcColumn0, gameNotice.FindProperty("PublishTimeUtc")!, gameNoticesTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn3, gameNotice.FindProperty("Type")!, gameNoticesTableMapping);
            RelationalModel.CreateColumnMapping(valuesColumn0, gameNotice.FindProperty("Values")!, gameNoticesTableMapping);

            var localFile = FindEntityType("GZCTF.Models.Data.LocalFile")!;

            var defaultTableMappings12 = new List<TableMappingBase<ColumnMappingBase>>();
            localFile.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings12);
            var gZCTFModelsDataLocalFileTableBase = new TableBase("GZCTF.Models.Data.LocalFile", null, relationalModel);
            var fileSizeColumnBase = new ColumnBase<ColumnMappingBase>("FileSize", "bigint", gZCTFModelsDataLocalFileTableBase);
            gZCTFModelsDataLocalFileTableBase.Columns.Add("FileSize", fileSizeColumnBase);
            var hashColumnBase = new ColumnBase<ColumnMappingBase>("Hash", "character varying(64)", gZCTFModelsDataLocalFileTableBase);
            gZCTFModelsDataLocalFileTableBase.Columns.Add("Hash", hashColumnBase);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("Id", "integer", gZCTFModelsDataLocalFileTableBase);
            gZCTFModelsDataLocalFileTableBase.Columns.Add("Id", idColumnBase7);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "text", gZCTFModelsDataLocalFileTableBase);
            gZCTFModelsDataLocalFileTableBase.Columns.Add("Name", nameColumnBase);
            var referenceCountColumnBase = new ColumnBase<ColumnMappingBase>("ReferenceCount", "bigint", gZCTFModelsDataLocalFileTableBase);
            gZCTFModelsDataLocalFileTableBase.Columns.Add("ReferenceCount", referenceCountColumnBase);
            var uploadTimeUtcColumnBase = new ColumnBase<ColumnMappingBase>("UploadTimeUtc", "timestamp with time zone", gZCTFModelsDataLocalFileTableBase);
            gZCTFModelsDataLocalFileTableBase.Columns.Add("UploadTimeUtc", uploadTimeUtcColumnBase);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.LocalFile", gZCTFModelsDataLocalFileTableBase);
            var gZCTFModelsDataLocalFileMappingBase = new TableMappingBase<ColumnMappingBase>(localFile, gZCTFModelsDataLocalFileTableBase, true);
            gZCTFModelsDataLocalFileTableBase.AddTypeMapping(gZCTFModelsDataLocalFileMappingBase, false);
            defaultTableMappings12.Add(gZCTFModelsDataLocalFileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, localFile.FindProperty("Id")!, gZCTFModelsDataLocalFileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fileSizeColumnBase, localFile.FindProperty("FileSize")!, gZCTFModelsDataLocalFileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hashColumnBase, localFile.FindProperty("Hash")!, gZCTFModelsDataLocalFileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, localFile.FindProperty("Name")!, gZCTFModelsDataLocalFileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)referenceCountColumnBase, localFile.FindProperty("ReferenceCount")!, gZCTFModelsDataLocalFileMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)uploadTimeUtcColumnBase, localFile.FindProperty("UploadTimeUtc")!, gZCTFModelsDataLocalFileMappingBase);

            var tableMappings12 = new List<TableMapping>();
            localFile.SetRuntimeAnnotation("Relational:TableMappings", tableMappings12);
            var filesTable = new Table("Files", null, relationalModel);
            var idColumn7 = new Column("Id", "integer", filesTable);
            filesTable.Columns.Add("Id", idColumn7);
            idColumn7.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var fileSizeColumn = new Column("FileSize", "bigint", filesTable);
            filesTable.Columns.Add("FileSize", fileSizeColumn);
            var hashColumn = new Column("Hash", "character varying(64)", filesTable);
            filesTable.Columns.Add("Hash", hashColumn);
            var nameColumn = new Column("Name", "text", filesTable);
            filesTable.Columns.Add("Name", nameColumn);
            var referenceCountColumn = new Column("ReferenceCount", "bigint", filesTable);
            filesTable.Columns.Add("ReferenceCount", referenceCountColumn);
            var uploadTimeUtcColumn = new Column("UploadTimeUtc", "timestamp with time zone", filesTable);
            filesTable.Columns.Add("UploadTimeUtc", uploadTimeUtcColumn);
            var pK_Files = new UniqueConstraint("PK_Files", filesTable, new[] { idColumn7 });
            filesTable.PrimaryKey = pK_Files;
            var pK_FilesUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.LocalFile",
                new[] { "Id" });
            pK_Files.MappedKeys.Add(pK_FilesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_FilesUc).Add(pK_Files);
            filesTable.UniqueConstraints.Add("PK_Files", pK_Files);
            var iX_Files_Hash = new TableIndex(
            "IX_Files_Hash", filesTable, new[] { hashColumn }, false);
            var iX_Files_HashIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.LocalFile",
                new[] { "Hash" });
            iX_Files_Hash.MappedIndexes.Add(iX_Files_HashIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Files_HashIx).Add(iX_Files_Hash);
            filesTable.Indexes.Add("IX_Files_Hash", iX_Files_Hash);
            relationalModel.Tables.Add(("Files", null), filesTable);
            var filesTableMapping = new TableMapping(localFile, filesTable, true);
            filesTable.AddTypeMapping(filesTableMapping, false);
            tableMappings12.Add(filesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn7, localFile.FindProperty("Id")!, filesTableMapping);
            RelationalModel.CreateColumnMapping(fileSizeColumn, localFile.FindProperty("FileSize")!, filesTableMapping);
            RelationalModel.CreateColumnMapping(hashColumn, localFile.FindProperty("Hash")!, filesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, localFile.FindProperty("Name")!, filesTableMapping);
            RelationalModel.CreateColumnMapping(referenceCountColumn, localFile.FindProperty("ReferenceCount")!, filesTableMapping);
            RelationalModel.CreateColumnMapping(uploadTimeUtcColumn, localFile.FindProperty("UploadTimeUtc")!, filesTableMapping);

            var logModel = FindEntityType("GZCTF.Models.Data.LogModel")!;

            var defaultTableMappings13 = new List<TableMappingBase<ColumnMappingBase>>();
            logModel.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings13);
            var gZCTFModelsDataLogModelTableBase = new TableBase("GZCTF.Models.Data.LogModel", null, relationalModel);
            var exceptionColumnBase = new ColumnBase<ColumnMappingBase>("Exception", "text", gZCTFModelsDataLogModelTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataLogModelTableBase.Columns.Add("Exception", exceptionColumnBase);
            var idColumnBase8 = new ColumnBase<ColumnMappingBase>("Id", "integer", gZCTFModelsDataLogModelTableBase);
            gZCTFModelsDataLogModelTableBase.Columns.Add("Id", idColumnBase8);
            var levelColumnBase = new ColumnBase<ColumnMappingBase>("Level", "character varying(50)", gZCTFModelsDataLogModelTableBase);
            gZCTFModelsDataLogModelTableBase.Columns.Add("Level", levelColumnBase);
            var loggerColumnBase = new ColumnBase<ColumnMappingBase>("Logger", "character varying(250)", gZCTFModelsDataLogModelTableBase);
            gZCTFModelsDataLogModelTableBase.Columns.Add("Logger", loggerColumnBase);
            var messageColumnBase = new ColumnBase<ColumnMappingBase>("Message", "text", gZCTFModelsDataLogModelTableBase);
            gZCTFModelsDataLogModelTableBase.Columns.Add("Message", messageColumnBase);
            var remoteIPColumnBase = new ColumnBase<ColumnMappingBase>("RemoteIP", "character varying(40)", gZCTFModelsDataLogModelTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataLogModelTableBase.Columns.Add("RemoteIP", remoteIPColumnBase);
            var statusColumnBase0 = new ColumnBase<ColumnMappingBase>("Status", "character varying(20)", gZCTFModelsDataLogModelTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataLogModelTableBase.Columns.Add("Status", statusColumnBase0);
            var timeUtcColumnBase = new ColumnBase<ColumnMappingBase>("TimeUtc", "timestamp with time zone", gZCTFModelsDataLogModelTableBase);
            gZCTFModelsDataLogModelTableBase.Columns.Add("TimeUtc", timeUtcColumnBase);
            var userNameColumnBase = new ColumnBase<ColumnMappingBase>("UserName", "character varying(25)", gZCTFModelsDataLogModelTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataLogModelTableBase.Columns.Add("UserName", userNameColumnBase);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.LogModel", gZCTFModelsDataLogModelTableBase);
            var gZCTFModelsDataLogModelMappingBase = new TableMappingBase<ColumnMappingBase>(logModel, gZCTFModelsDataLogModelTableBase, true);
            gZCTFModelsDataLogModelTableBase.AddTypeMapping(gZCTFModelsDataLogModelMappingBase, false);
            defaultTableMappings13.Add(gZCTFModelsDataLogModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase8, logModel.FindProperty("Id")!, gZCTFModelsDataLogModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)exceptionColumnBase, logModel.FindProperty("Exception")!, gZCTFModelsDataLogModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)levelColumnBase, logModel.FindProperty("Level")!, gZCTFModelsDataLogModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loggerColumnBase, logModel.FindProperty("Logger")!, gZCTFModelsDataLogModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase, logModel.FindProperty("Message")!, gZCTFModelsDataLogModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)remoteIPColumnBase, logModel.FindProperty("RemoteIP")!, gZCTFModelsDataLogModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase0, logModel.FindProperty("Status")!, gZCTFModelsDataLogModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeUtcColumnBase, logModel.FindProperty("TimeUtc")!, gZCTFModelsDataLogModelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase, logModel.FindProperty("UserName")!, gZCTFModelsDataLogModelMappingBase);

            var tableMappings13 = new List<TableMapping>();
            logModel.SetRuntimeAnnotation("Relational:TableMappings", tableMappings13);
            var logsTable = new Table("Logs", null, relationalModel);
            var idColumn8 = new Column("Id", "integer", logsTable);
            logsTable.Columns.Add("Id", idColumn8);
            idColumn8.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var exceptionColumn = new Column("Exception", "text", logsTable)
            {
                IsNullable = true
            };
            logsTable.Columns.Add("Exception", exceptionColumn);
            var levelColumn = new Column("Level", "character varying(50)", logsTable);
            logsTable.Columns.Add("Level", levelColumn);
            var loggerColumn = new Column("Logger", "character varying(250)", logsTable);
            logsTable.Columns.Add("Logger", loggerColumn);
            var messageColumn = new Column("Message", "text", logsTable);
            logsTable.Columns.Add("Message", messageColumn);
            var remoteIPColumn = new Column("RemoteIP", "character varying(40)", logsTable)
            {
                IsNullable = true
            };
            logsTable.Columns.Add("RemoteIP", remoteIPColumn);
            var statusColumn0 = new Column("Status", "character varying(20)", logsTable)
            {
                IsNullable = true
            };
            logsTable.Columns.Add("Status", statusColumn0);
            var timeUtcColumn = new Column("TimeUtc", "timestamp with time zone", logsTable);
            logsTable.Columns.Add("TimeUtc", timeUtcColumn);
            var userNameColumn = new Column("UserName", "character varying(25)", logsTable)
            {
                IsNullable = true
            };
            logsTable.Columns.Add("UserName", userNameColumn);
            var pK_Logs = new UniqueConstraint("PK_Logs", logsTable, new[] { idColumn8 });
            logsTable.PrimaryKey = pK_Logs;
            var pK_LogsUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.LogModel",
                new[] { "Id" });
            pK_Logs.MappedKeys.Add(pK_LogsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_LogsUc).Add(pK_Logs);
            logsTable.UniqueConstraints.Add("PK_Logs", pK_Logs);
            relationalModel.Tables.Add(("Logs", null), logsTable);
            var logsTableMapping = new TableMapping(logModel, logsTable, true);
            logsTable.AddTypeMapping(logsTableMapping, false);
            tableMappings13.Add(logsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn8, logModel.FindProperty("Id")!, logsTableMapping);
            RelationalModel.CreateColumnMapping(exceptionColumn, logModel.FindProperty("Exception")!, logsTableMapping);
            RelationalModel.CreateColumnMapping(levelColumn, logModel.FindProperty("Level")!, logsTableMapping);
            RelationalModel.CreateColumnMapping(loggerColumn, logModel.FindProperty("Logger")!, logsTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn, logModel.FindProperty("Message")!, logsTableMapping);
            RelationalModel.CreateColumnMapping(remoteIPColumn, logModel.FindProperty("RemoteIP")!, logsTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn0, logModel.FindProperty("Status")!, logsTableMapping);
            RelationalModel.CreateColumnMapping(timeUtcColumn, logModel.FindProperty("TimeUtc")!, logsTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn, logModel.FindProperty("UserName")!, logsTableMapping);

            var participation = FindEntityType("GZCTF.Models.Data.Participation")!;

            var defaultTableMappings14 = new List<TableMappingBase<ColumnMappingBase>>();
            participation.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings14);
            var gZCTFModelsDataParticipationTableBase = new TableBase("GZCTF.Models.Data.Participation", null, relationalModel);
            var gameIdColumnBase3 = new ColumnBase<ColumnMappingBase>("GameId", "integer", gZCTFModelsDataParticipationTableBase);
            gZCTFModelsDataParticipationTableBase.Columns.Add("GameId", gameIdColumnBase3);
            var idColumnBase9 = new ColumnBase<ColumnMappingBase>("Id", "integer", gZCTFModelsDataParticipationTableBase);
            gZCTFModelsDataParticipationTableBase.Columns.Add("Id", idColumnBase9);
            var organizationColumnBase = new ColumnBase<ColumnMappingBase>("Organization", "text", gZCTFModelsDataParticipationTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataParticipationTableBase.Columns.Add("Organization", organizationColumnBase);
            var statusColumnBase1 = new ColumnBase<ColumnMappingBase>("Status", "integer", gZCTFModelsDataParticipationTableBase);
            gZCTFModelsDataParticipationTableBase.Columns.Add("Status", statusColumnBase1);
            var teamIdColumnBase0 = new ColumnBase<ColumnMappingBase>("TeamId", "integer", gZCTFModelsDataParticipationTableBase);
            gZCTFModelsDataParticipationTableBase.Columns.Add("TeamId", teamIdColumnBase0);
            var tokenColumnBase = new ColumnBase<ColumnMappingBase>("Token", "text", gZCTFModelsDataParticipationTableBase);
            gZCTFModelsDataParticipationTableBase.Columns.Add("Token", tokenColumnBase);
            var writeupIdColumnBase = new ColumnBase<ColumnMappingBase>("WriteupId", "integer", gZCTFModelsDataParticipationTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataParticipationTableBase.Columns.Add("WriteupId", writeupIdColumnBase);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.Participation", gZCTFModelsDataParticipationTableBase);
            var gZCTFModelsDataParticipationMappingBase = new TableMappingBase<ColumnMappingBase>(participation, gZCTFModelsDataParticipationTableBase, true);
            gZCTFModelsDataParticipationTableBase.AddTypeMapping(gZCTFModelsDataParticipationMappingBase, false);
            defaultTableMappings14.Add(gZCTFModelsDataParticipationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase9, participation.FindProperty("Id")!, gZCTFModelsDataParticipationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gameIdColumnBase3, participation.FindProperty("GameId")!, gZCTFModelsDataParticipationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)organizationColumnBase, participation.FindProperty("Organization")!, gZCTFModelsDataParticipationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase1, participation.FindProperty("Status")!, gZCTFModelsDataParticipationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)teamIdColumnBase0, participation.FindProperty("TeamId")!, gZCTFModelsDataParticipationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tokenColumnBase, participation.FindProperty("Token")!, gZCTFModelsDataParticipationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)writeupIdColumnBase, participation.FindProperty("WriteupId")!, gZCTFModelsDataParticipationMappingBase);

            var tableMappings14 = new List<TableMapping>();
            participation.SetRuntimeAnnotation("Relational:TableMappings", tableMappings14);
            var participationsTable = new Table("Participations", null, relationalModel);
            var idColumn9 = new Column("Id", "integer", participationsTable);
            participationsTable.Columns.Add("Id", idColumn9);
            idColumn9.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var gameIdColumn3 = new Column("GameId", "integer", participationsTable);
            participationsTable.Columns.Add("GameId", gameIdColumn3);
            var organizationColumn = new Column("Organization", "text", participationsTable)
            {
                IsNullable = true
            };
            participationsTable.Columns.Add("Organization", organizationColumn);
            var statusColumn1 = new Column("Status", "integer", participationsTable);
            participationsTable.Columns.Add("Status", statusColumn1);
            var teamIdColumn0 = new Column("TeamId", "integer", participationsTable);
            participationsTable.Columns.Add("TeamId", teamIdColumn0);
            var tokenColumn = new Column("Token", "text", participationsTable);
            participationsTable.Columns.Add("Token", tokenColumn);
            var writeupIdColumn = new Column("WriteupId", "integer", participationsTable)
            {
                IsNullable = true
            };
            participationsTable.Columns.Add("WriteupId", writeupIdColumn);
            var pK_Participations = new UniqueConstraint("PK_Participations", participationsTable, new[] { idColumn9 });
            participationsTable.PrimaryKey = pK_Participations;
            var pK_ParticipationsUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.Participation",
                new[] { "Id" });
            pK_Participations.MappedKeys.Add(pK_ParticipationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ParticipationsUc).Add(pK_Participations);
            participationsTable.UniqueConstraints.Add("PK_Participations", pK_Participations);
            var iX_Participations_GameId = new TableIndex(
            "IX_Participations_GameId", participationsTable, new[] { gameIdColumn3 }, false);
            var iX_Participations_GameIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.Participation",
                new[] { "GameId" });
            iX_Participations_GameId.MappedIndexes.Add(iX_Participations_GameIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Participations_GameIdIx).Add(iX_Participations_GameId);
            participationsTable.Indexes.Add("IX_Participations_GameId", iX_Participations_GameId);
            var iX_Participations_TeamId = new TableIndex(
            "IX_Participations_TeamId", participationsTable, new[] { teamIdColumn0 }, false);
            var iX_Participations_TeamIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.Participation",
                new[] { "TeamId" });
            iX_Participations_TeamId.MappedIndexes.Add(iX_Participations_TeamIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Participations_TeamIdIx).Add(iX_Participations_TeamId);
            participationsTable.Indexes.Add("IX_Participations_TeamId", iX_Participations_TeamId);
            var iX_Participations_TeamId_GameId = new TableIndex(
            "IX_Participations_TeamId_GameId", participationsTable, new[] { teamIdColumn0, gameIdColumn3 }, false);
            var iX_Participations_TeamId_GameIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.Participation",
                new[] { "TeamId", "GameId" });
            iX_Participations_TeamId_GameId.MappedIndexes.Add(iX_Participations_TeamId_GameIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Participations_TeamId_GameIdIx).Add(iX_Participations_TeamId_GameId);
            participationsTable.Indexes.Add("IX_Participations_TeamId_GameId", iX_Participations_TeamId_GameId);
            var iX_Participations_WriteupId = new TableIndex(
            "IX_Participations_WriteupId", participationsTable, new[] { writeupIdColumn }, false);
            var iX_Participations_WriteupIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.Participation",
                new[] { "WriteupId" });
            iX_Participations_WriteupId.MappedIndexes.Add(iX_Participations_WriteupIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Participations_WriteupIdIx).Add(iX_Participations_WriteupId);
            participationsTable.Indexes.Add("IX_Participations_WriteupId", iX_Participations_WriteupId);
            relationalModel.Tables.Add(("Participations", null), participationsTable);
            var participationsTableMapping = new TableMapping(participation, participationsTable, true);
            participationsTable.AddTypeMapping(participationsTableMapping, false);
            tableMappings14.Add(participationsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn9, participation.FindProperty("Id")!, participationsTableMapping);
            RelationalModel.CreateColumnMapping(gameIdColumn3, participation.FindProperty("GameId")!, participationsTableMapping);
            RelationalModel.CreateColumnMapping(organizationColumn, participation.FindProperty("Organization")!, participationsTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn1, participation.FindProperty("Status")!, participationsTableMapping);
            RelationalModel.CreateColumnMapping(teamIdColumn0, participation.FindProperty("TeamId")!, participationsTableMapping);
            RelationalModel.CreateColumnMapping(tokenColumn, participation.FindProperty("Token")!, participationsTableMapping);
            RelationalModel.CreateColumnMapping(writeupIdColumn, participation.FindProperty("WriteupId")!, participationsTableMapping);

            var post = FindEntityType("GZCTF.Models.Data.Post")!;

            var defaultTableMappings15 = new List<TableMappingBase<ColumnMappingBase>>();
            post.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings15);
            var gZCTFModelsDataPostTableBase = new TableBase("GZCTF.Models.Data.Post", null, relationalModel);
            var authorIdColumnBase = new ColumnBase<ColumnMappingBase>("AuthorId", "uuid", gZCTFModelsDataPostTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataPostTableBase.Columns.Add("AuthorId", authorIdColumnBase);
            var contentColumnBase2 = new ColumnBase<ColumnMappingBase>("Content", "text", gZCTFModelsDataPostTableBase);
            gZCTFModelsDataPostTableBase.Columns.Add("Content", contentColumnBase2);
            var idColumnBase10 = new ColumnBase<ColumnMappingBase>("Id", "character varying(8)", gZCTFModelsDataPostTableBase);
            gZCTFModelsDataPostTableBase.Columns.Add("Id", idColumnBase10);
            var isPinnedColumnBase = new ColumnBase<ColumnMappingBase>("IsPinned", "boolean", gZCTFModelsDataPostTableBase);
            gZCTFModelsDataPostTableBase.Columns.Add("IsPinned", isPinnedColumnBase);
            var summaryColumnBase0 = new ColumnBase<ColumnMappingBase>("Summary", "text", gZCTFModelsDataPostTableBase);
            gZCTFModelsDataPostTableBase.Columns.Add("Summary", summaryColumnBase0);
            var tagsColumnBase0 = new ColumnBase<ColumnMappingBase>("Tags", "text", gZCTFModelsDataPostTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataPostTableBase.Columns.Add("Tags", tagsColumnBase0);
            var titleColumnBase2 = new ColumnBase<ColumnMappingBase>("Title", "text", gZCTFModelsDataPostTableBase);
            gZCTFModelsDataPostTableBase.Columns.Add("Title", titleColumnBase2);
            var updateTimeUtcColumnBase = new ColumnBase<ColumnMappingBase>("UpdateTimeUtc", "timestamp with time zone", gZCTFModelsDataPostTableBase);
            gZCTFModelsDataPostTableBase.Columns.Add("UpdateTimeUtc", updateTimeUtcColumnBase);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.Post", gZCTFModelsDataPostTableBase);
            var gZCTFModelsDataPostMappingBase = new TableMappingBase<ColumnMappingBase>(post, gZCTFModelsDataPostTableBase, true);
            gZCTFModelsDataPostTableBase.AddTypeMapping(gZCTFModelsDataPostMappingBase, false);
            defaultTableMappings15.Add(gZCTFModelsDataPostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase10, post.FindProperty("Id")!, gZCTFModelsDataPostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)authorIdColumnBase, post.FindProperty("AuthorId")!, gZCTFModelsDataPostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentColumnBase2, post.FindProperty("Content")!, gZCTFModelsDataPostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isPinnedColumnBase, post.FindProperty("IsPinned")!, gZCTFModelsDataPostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)summaryColumnBase0, post.FindProperty("Summary")!, gZCTFModelsDataPostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tagsColumnBase0, post.FindProperty("Tags")!, gZCTFModelsDataPostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase2, post.FindProperty("Title")!, gZCTFModelsDataPostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateTimeUtcColumnBase, post.FindProperty("UpdateTimeUtc")!, gZCTFModelsDataPostMappingBase);

            var tableMappings15 = new List<TableMapping>();
            post.SetRuntimeAnnotation("Relational:TableMappings", tableMappings15);
            var postsTable = new Table("Posts", null, relationalModel);
            var idColumn10 = new Column("Id", "character varying(8)", postsTable);
            postsTable.Columns.Add("Id", idColumn10);
            var authorIdColumn = new Column("AuthorId", "uuid", postsTable)
            {
                IsNullable = true
            };
            postsTable.Columns.Add("AuthorId", authorIdColumn);
            var contentColumn2 = new Column("Content", "text", postsTable);
            postsTable.Columns.Add("Content", contentColumn2);
            var isPinnedColumn = new Column("IsPinned", "boolean", postsTable);
            postsTable.Columns.Add("IsPinned", isPinnedColumn);
            var summaryColumn0 = new Column("Summary", "text", postsTable);
            postsTable.Columns.Add("Summary", summaryColumn0);
            var tagsColumn0 = new Column("Tags", "text", postsTable)
            {
                IsNullable = true
            };
            postsTable.Columns.Add("Tags", tagsColumn0);
            var titleColumn2 = new Column("Title", "text", postsTable);
            postsTable.Columns.Add("Title", titleColumn2);
            var updateTimeUtcColumn = new Column("UpdateTimeUtc", "timestamp with time zone", postsTable);
            postsTable.Columns.Add("UpdateTimeUtc", updateTimeUtcColumn);
            var pK_Posts = new UniqueConstraint("PK_Posts", postsTable, new[] { idColumn10 });
            postsTable.PrimaryKey = pK_Posts;
            var pK_PostsUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.Post",
                new[] { "Id" });
            pK_Posts.MappedKeys.Add(pK_PostsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PostsUc).Add(pK_Posts);
            postsTable.UniqueConstraints.Add("PK_Posts", pK_Posts);
            var iX_Posts_AuthorId = new TableIndex(
            "IX_Posts_AuthorId", postsTable, new[] { authorIdColumn }, false);
            var iX_Posts_AuthorIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.Post",
                new[] { "AuthorId" });
            iX_Posts_AuthorId.MappedIndexes.Add(iX_Posts_AuthorIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Posts_AuthorIdIx).Add(iX_Posts_AuthorId);
            postsTable.Indexes.Add("IX_Posts_AuthorId", iX_Posts_AuthorId);
            relationalModel.Tables.Add(("Posts", null), postsTable);
            var postsTableMapping = new TableMapping(post, postsTable, true);
            postsTable.AddTypeMapping(postsTableMapping, false);
            tableMappings15.Add(postsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn10, post.FindProperty("Id")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(authorIdColumn, post.FindProperty("AuthorId")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(contentColumn2, post.FindProperty("Content")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(isPinnedColumn, post.FindProperty("IsPinned")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(summaryColumn0, post.FindProperty("Summary")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(tagsColumn0, post.FindProperty("Tags")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn2, post.FindProperty("Title")!, postsTableMapping);
            RelationalModel.CreateColumnMapping(updateTimeUtcColumn, post.FindProperty("UpdateTimeUtc")!, postsTableMapping);

            var submission = FindEntityType("GZCTF.Models.Data.Submission")!;

            var defaultTableMappings16 = new List<TableMappingBase<ColumnMappingBase>>();
            submission.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings16);
            var gZCTFModelsDataSubmissionTableBase = new TableBase("GZCTF.Models.Data.Submission", null, relationalModel);
            var answerColumnBase = new ColumnBase<ColumnMappingBase>("Answer", "character varying(127)", gZCTFModelsDataSubmissionTableBase);
            gZCTFModelsDataSubmissionTableBase.Columns.Add("Answer", answerColumnBase);
            var challengeIdColumnBase1 = new ColumnBase<ColumnMappingBase>("ChallengeId", "integer", gZCTFModelsDataSubmissionTableBase);
            gZCTFModelsDataSubmissionTableBase.Columns.Add("ChallengeId", challengeIdColumnBase1);
            var gameIdColumnBase4 = new ColumnBase<ColumnMappingBase>("GameId", "integer", gZCTFModelsDataSubmissionTableBase);
            gZCTFModelsDataSubmissionTableBase.Columns.Add("GameId", gameIdColumnBase4);
            var idColumnBase11 = new ColumnBase<ColumnMappingBase>("Id", "integer", gZCTFModelsDataSubmissionTableBase);
            gZCTFModelsDataSubmissionTableBase.Columns.Add("Id", idColumnBase11);
            var participationIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ParticipationId", "integer", gZCTFModelsDataSubmissionTableBase);
            gZCTFModelsDataSubmissionTableBase.Columns.Add("ParticipationId", participationIdColumnBase0);
            var statusColumnBase2 = new ColumnBase<ColumnMappingBase>("Status", "text", gZCTFModelsDataSubmissionTableBase);
            gZCTFModelsDataSubmissionTableBase.Columns.Add("Status", statusColumnBase2);
            var submitTimeUtcColumnBase = new ColumnBase<ColumnMappingBase>("SubmitTimeUtc", "timestamp with time zone", gZCTFModelsDataSubmissionTableBase);
            gZCTFModelsDataSubmissionTableBase.Columns.Add("SubmitTimeUtc", submitTimeUtcColumnBase);
            var teamIdColumnBase1 = new ColumnBase<ColumnMappingBase>("TeamId", "integer", gZCTFModelsDataSubmissionTableBase);
            gZCTFModelsDataSubmissionTableBase.Columns.Add("TeamId", teamIdColumnBase1);
            var userIdColumnBase1 = new ColumnBase<ColumnMappingBase>("UserId", "uuid", gZCTFModelsDataSubmissionTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataSubmissionTableBase.Columns.Add("UserId", userIdColumnBase1);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.Submission", gZCTFModelsDataSubmissionTableBase);
            var gZCTFModelsDataSubmissionMappingBase = new TableMappingBase<ColumnMappingBase>(submission, gZCTFModelsDataSubmissionTableBase, true);
            gZCTFModelsDataSubmissionTableBase.AddTypeMapping(gZCTFModelsDataSubmissionMappingBase, false);
            defaultTableMappings16.Add(gZCTFModelsDataSubmissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase11, submission.FindProperty("Id")!, gZCTFModelsDataSubmissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)answerColumnBase, submission.FindProperty("Answer")!, gZCTFModelsDataSubmissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)challengeIdColumnBase1, submission.FindProperty("ChallengeId")!, gZCTFModelsDataSubmissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gameIdColumnBase4, submission.FindProperty("GameId")!, gZCTFModelsDataSubmissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)participationIdColumnBase0, submission.FindProperty("ParticipationId")!, gZCTFModelsDataSubmissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase2, submission.FindProperty("Status")!, gZCTFModelsDataSubmissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)submitTimeUtcColumnBase, submission.FindProperty("SubmitTimeUtc")!, gZCTFModelsDataSubmissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)teamIdColumnBase1, submission.FindProperty("TeamId")!, gZCTFModelsDataSubmissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, submission.FindProperty("UserId")!, gZCTFModelsDataSubmissionMappingBase);

            var tableMappings16 = new List<TableMapping>();
            submission.SetRuntimeAnnotation("Relational:TableMappings", tableMappings16);
            var submissionsTable = new Table("Submissions", null, relationalModel);
            var idColumn11 = new Column("Id", "integer", submissionsTable);
            submissionsTable.Columns.Add("Id", idColumn11);
            idColumn11.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var answerColumn = new Column("Answer", "character varying(127)", submissionsTable);
            submissionsTable.Columns.Add("Answer", answerColumn);
            var challengeIdColumn1 = new Column("ChallengeId", "integer", submissionsTable);
            submissionsTable.Columns.Add("ChallengeId", challengeIdColumn1);
            var gameIdColumn4 = new Column("GameId", "integer", submissionsTable);
            submissionsTable.Columns.Add("GameId", gameIdColumn4);
            var participationIdColumn0 = new Column("ParticipationId", "integer", submissionsTable);
            submissionsTable.Columns.Add("ParticipationId", participationIdColumn0);
            var statusColumn2 = new Column("Status", "text", submissionsTable);
            submissionsTable.Columns.Add("Status", statusColumn2);
            var submitTimeUtcColumn = new Column("SubmitTimeUtc", "timestamp with time zone", submissionsTable);
            submissionsTable.Columns.Add("SubmitTimeUtc", submitTimeUtcColumn);
            var teamIdColumn1 = new Column("TeamId", "integer", submissionsTable);
            submissionsTable.Columns.Add("TeamId", teamIdColumn1);
            var userIdColumn1 = new Column("UserId", "uuid", submissionsTable)
            {
                IsNullable = true
            };
            submissionsTable.Columns.Add("UserId", userIdColumn1);
            var pK_Submissions = new UniqueConstraint("PK_Submissions", submissionsTable, new[] { idColumn11 });
            submissionsTable.PrimaryKey = pK_Submissions;
            var pK_SubmissionsUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.Submission",
                new[] { "Id" });
            pK_Submissions.MappedKeys.Add(pK_SubmissionsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SubmissionsUc).Add(pK_Submissions);
            submissionsTable.UniqueConstraints.Add("PK_Submissions", pK_Submissions);
            var iX_Submissions_ChallengeId = new TableIndex(
            "IX_Submissions_ChallengeId", submissionsTable, new[] { challengeIdColumn1 }, false);
            var iX_Submissions_ChallengeIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.Submission",
                new[] { "ChallengeId" });
            iX_Submissions_ChallengeId.MappedIndexes.Add(iX_Submissions_ChallengeIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Submissions_ChallengeIdIx).Add(iX_Submissions_ChallengeId);
            submissionsTable.Indexes.Add("IX_Submissions_ChallengeId", iX_Submissions_ChallengeId);
            var iX_Submissions_GameId = new TableIndex(
            "IX_Submissions_GameId", submissionsTable, new[] { gameIdColumn4 }, false);
            var iX_Submissions_GameIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.Submission",
                new[] { "GameId" });
            iX_Submissions_GameId.MappedIndexes.Add(iX_Submissions_GameIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Submissions_GameIdIx).Add(iX_Submissions_GameId);
            submissionsTable.Indexes.Add("IX_Submissions_GameId", iX_Submissions_GameId);
            var iX_Submissions_ParticipationId = new TableIndex(
            "IX_Submissions_ParticipationId", submissionsTable, new[] { participationIdColumn0 }, false);
            var iX_Submissions_ParticipationIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.Submission",
                new[] { "ParticipationId" });
            iX_Submissions_ParticipationId.MappedIndexes.Add(iX_Submissions_ParticipationIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Submissions_ParticipationIdIx).Add(iX_Submissions_ParticipationId);
            submissionsTable.Indexes.Add("IX_Submissions_ParticipationId", iX_Submissions_ParticipationId);
            var iX_Submissions_TeamId_ChallengeId_GameId = new TableIndex(
            "IX_Submissions_TeamId_ChallengeId_GameId", submissionsTable, new[] { teamIdColumn1, challengeIdColumn1, gameIdColumn4 }, false);
            var iX_Submissions_TeamId_ChallengeId_GameIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.Submission",
                new[] { "TeamId", "ChallengeId", "GameId" });
            iX_Submissions_TeamId_ChallengeId_GameId.MappedIndexes.Add(iX_Submissions_TeamId_ChallengeId_GameIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Submissions_TeamId_ChallengeId_GameIdIx).Add(iX_Submissions_TeamId_ChallengeId_GameId);
            submissionsTable.Indexes.Add("IX_Submissions_TeamId_ChallengeId_GameId", iX_Submissions_TeamId_ChallengeId_GameId);
            var iX_Submissions_UserId = new TableIndex(
            "IX_Submissions_UserId", submissionsTable, new[] { userIdColumn1 }, false);
            var iX_Submissions_UserIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.Submission",
                new[] { "UserId" });
            iX_Submissions_UserId.MappedIndexes.Add(iX_Submissions_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Submissions_UserIdIx).Add(iX_Submissions_UserId);
            submissionsTable.Indexes.Add("IX_Submissions_UserId", iX_Submissions_UserId);
            relationalModel.Tables.Add(("Submissions", null), submissionsTable);
            var submissionsTableMapping = new TableMapping(submission, submissionsTable, true);
            submissionsTable.AddTypeMapping(submissionsTableMapping, false);
            tableMappings16.Add(submissionsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn11, submission.FindProperty("Id")!, submissionsTableMapping);
            RelationalModel.CreateColumnMapping(answerColumn, submission.FindProperty("Answer")!, submissionsTableMapping);
            RelationalModel.CreateColumnMapping(challengeIdColumn1, submission.FindProperty("ChallengeId")!, submissionsTableMapping);
            RelationalModel.CreateColumnMapping(gameIdColumn4, submission.FindProperty("GameId")!, submissionsTableMapping);
            RelationalModel.CreateColumnMapping(participationIdColumn0, submission.FindProperty("ParticipationId")!, submissionsTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn2, submission.FindProperty("Status")!, submissionsTableMapping);
            RelationalModel.CreateColumnMapping(submitTimeUtcColumn, submission.FindProperty("SubmitTimeUtc")!, submissionsTableMapping);
            RelationalModel.CreateColumnMapping(teamIdColumn1, submission.FindProperty("TeamId")!, submissionsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn1, submission.FindProperty("UserId")!, submissionsTableMapping);

            var team = FindEntityType("GZCTF.Models.Data.Team")!;

            var defaultTableMappings17 = new List<TableMappingBase<ColumnMappingBase>>();
            team.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings17);
            var gZCTFModelsDataTeamTableBase = new TableBase("GZCTF.Models.Data.Team", null, relationalModel);
            var avatarHashColumnBase = new ColumnBase<ColumnMappingBase>("AvatarHash", "character varying(64)", gZCTFModelsDataTeamTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataTeamTableBase.Columns.Add("AvatarHash", avatarHashColumnBase);
            var bioColumnBase = new ColumnBase<ColumnMappingBase>("Bio", "character varying(32)", gZCTFModelsDataTeamTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataTeamTableBase.Columns.Add("Bio", bioColumnBase);
            var captainIdColumnBase = new ColumnBase<ColumnMappingBase>("CaptainId", "uuid", gZCTFModelsDataTeamTableBase);
            gZCTFModelsDataTeamTableBase.Columns.Add("CaptainId", captainIdColumnBase);
            var idColumnBase12 = new ColumnBase<ColumnMappingBase>("Id", "integer", gZCTFModelsDataTeamTableBase);
            gZCTFModelsDataTeamTableBase.Columns.Add("Id", idColumnBase12);
            var inviteTokenColumnBase = new ColumnBase<ColumnMappingBase>("InviteToken", "character varying(32)", gZCTFModelsDataTeamTableBase);
            gZCTFModelsDataTeamTableBase.Columns.Add("InviteToken", inviteTokenColumnBase);
            var lockedColumnBase = new ColumnBase<ColumnMappingBase>("Locked", "boolean", gZCTFModelsDataTeamTableBase);
            gZCTFModelsDataTeamTableBase.Columns.Add("Locked", lockedColumnBase);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "character varying(16)", gZCTFModelsDataTeamTableBase);
            gZCTFModelsDataTeamTableBase.Columns.Add("Name", nameColumnBase0);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.Team", gZCTFModelsDataTeamTableBase);
            var gZCTFModelsDataTeamMappingBase = new TableMappingBase<ColumnMappingBase>(team, gZCTFModelsDataTeamTableBase, true);
            gZCTFModelsDataTeamTableBase.AddTypeMapping(gZCTFModelsDataTeamMappingBase, false);
            defaultTableMappings17.Add(gZCTFModelsDataTeamMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase12, team.FindProperty("Id")!, gZCTFModelsDataTeamMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)avatarHashColumnBase, team.FindProperty("AvatarHash")!, gZCTFModelsDataTeamMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bioColumnBase, team.FindProperty("Bio")!, gZCTFModelsDataTeamMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)captainIdColumnBase, team.FindProperty("CaptainId")!, gZCTFModelsDataTeamMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inviteTokenColumnBase, team.FindProperty("InviteToken")!, gZCTFModelsDataTeamMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockedColumnBase, team.FindProperty("Locked")!, gZCTFModelsDataTeamMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, team.FindProperty("Name")!, gZCTFModelsDataTeamMappingBase);

            var tableMappings17 = new List<TableMapping>();
            team.SetRuntimeAnnotation("Relational:TableMappings", tableMappings17);
            var teamsTable = new Table("Teams", null, relationalModel);
            var idColumn12 = new Column("Id", "integer", teamsTable);
            teamsTable.Columns.Add("Id", idColumn12);
            idColumn12.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var avatarHashColumn = new Column("AvatarHash", "character varying(64)", teamsTable)
            {
                IsNullable = true
            };
            teamsTable.Columns.Add("AvatarHash", avatarHashColumn);
            var bioColumn = new Column("Bio", "character varying(32)", teamsTable)
            {
                IsNullable = true
            };
            teamsTable.Columns.Add("Bio", bioColumn);
            var captainIdColumn = new Column("CaptainId", "uuid", teamsTable);
            teamsTable.Columns.Add("CaptainId", captainIdColumn);
            var inviteTokenColumn = new Column("InviteToken", "character varying(32)", teamsTable);
            teamsTable.Columns.Add("InviteToken", inviteTokenColumn);
            var lockedColumn = new Column("Locked", "boolean", teamsTable);
            teamsTable.Columns.Add("Locked", lockedColumn);
            var nameColumn0 = new Column("Name", "character varying(16)", teamsTable);
            teamsTable.Columns.Add("Name", nameColumn0);
            var pK_Teams = new UniqueConstraint("PK_Teams", teamsTable, new[] { idColumn12 });
            teamsTable.PrimaryKey = pK_Teams;
            var pK_TeamsUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.Team",
                new[] { "Id" });
            pK_Teams.MappedKeys.Add(pK_TeamsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_TeamsUc).Add(pK_Teams);
            teamsTable.UniqueConstraints.Add("PK_Teams", pK_Teams);
            var iX_Teams_CaptainId = new TableIndex(
            "IX_Teams_CaptainId", teamsTable, new[] { captainIdColumn }, false);
            var iX_Teams_CaptainIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.Team",
                new[] { "CaptainId" });
            iX_Teams_CaptainId.MappedIndexes.Add(iX_Teams_CaptainIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Teams_CaptainIdIx).Add(iX_Teams_CaptainId);
            teamsTable.Indexes.Add("IX_Teams_CaptainId", iX_Teams_CaptainId);
            relationalModel.Tables.Add(("Teams", null), teamsTable);
            var teamsTableMapping = new TableMapping(team, teamsTable, true);
            teamsTable.AddTypeMapping(teamsTableMapping, false);
            tableMappings17.Add(teamsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn12, team.FindProperty("Id")!, teamsTableMapping);
            RelationalModel.CreateColumnMapping(avatarHashColumn, team.FindProperty("AvatarHash")!, teamsTableMapping);
            RelationalModel.CreateColumnMapping(bioColumn, team.FindProperty("Bio")!, teamsTableMapping);
            RelationalModel.CreateColumnMapping(captainIdColumn, team.FindProperty("CaptainId")!, teamsTableMapping);
            RelationalModel.CreateColumnMapping(inviteTokenColumn, team.FindProperty("InviteToken")!, teamsTableMapping);
            RelationalModel.CreateColumnMapping(lockedColumn, team.FindProperty("Locked")!, teamsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, team.FindProperty("Name")!, teamsTableMapping);

            var userInfo = FindEntityType("GZCTF.Models.Data.UserInfo")!;

            var defaultTableMappings18 = new List<TableMappingBase<ColumnMappingBase>>();
            userInfo.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings18);
            var gZCTFModelsDataUserInfoTableBase = new TableBase("GZCTF.Models.Data.UserInfo", null, relationalModel);
            var accessFailedCountColumnBase = new ColumnBase<ColumnMappingBase>("AccessFailedCount", "integer", gZCTFModelsDataUserInfoTableBase);
            gZCTFModelsDataUserInfoTableBase.Columns.Add("AccessFailedCount", accessFailedCountColumnBase);
            var avatarHashColumnBase0 = new ColumnBase<ColumnMappingBase>("AvatarHash", "character varying(64)", gZCTFModelsDataUserInfoTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataUserInfoTableBase.Columns.Add("AvatarHash", avatarHashColumnBase0);
            var bioColumnBase0 = new ColumnBase<ColumnMappingBase>("Bio", "character varying(63)", gZCTFModelsDataUserInfoTableBase);
            gZCTFModelsDataUserInfoTableBase.Columns.Add("Bio", bioColumnBase0);
            var concurrencyStampColumnBase1 = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "text", gZCTFModelsDataUserInfoTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataUserInfoTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase1);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "character varying(256)", gZCTFModelsDataUserInfoTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataUserInfoTableBase.Columns.Add("Email", emailColumnBase);
            var emailConfirmedColumnBase = new ColumnBase<ColumnMappingBase>("EmailConfirmed", "boolean", gZCTFModelsDataUserInfoTableBase);
            gZCTFModelsDataUserInfoTableBase.Columns.Add("EmailConfirmed", emailConfirmedColumnBase);
            var exerciseVisibleColumnBase = new ColumnBase<ColumnMappingBase>("ExerciseVisible", "boolean", gZCTFModelsDataUserInfoTableBase);
            gZCTFModelsDataUserInfoTableBase.Columns.Add("ExerciseVisible", exerciseVisibleColumnBase);
            var iPColumnBase0 = new ColumnBase<ColumnMappingBase>("IP", "text", gZCTFModelsDataUserInfoTableBase);
            gZCTFModelsDataUserInfoTableBase.Columns.Add("IP", iPColumnBase0);
            var idColumnBase13 = new ColumnBase<ColumnMappingBase>("Id", "uuid", gZCTFModelsDataUserInfoTableBase);
            gZCTFModelsDataUserInfoTableBase.Columns.Add("Id", idColumnBase13);
            var lastSignedInUtcColumnBase = new ColumnBase<ColumnMappingBase>("LastSignedInUtc", "timestamp with time zone", gZCTFModelsDataUserInfoTableBase);
            gZCTFModelsDataUserInfoTableBase.Columns.Add("LastSignedInUtc", lastSignedInUtcColumnBase);
            var lastVisitedUtcColumnBase = new ColumnBase<ColumnMappingBase>("LastVisitedUtc", "timestamp with time zone", gZCTFModelsDataUserInfoTableBase);
            gZCTFModelsDataUserInfoTableBase.Columns.Add("LastVisitedUtc", lastVisitedUtcColumnBase);
            var lockoutEnabledColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnabled", "boolean", gZCTFModelsDataUserInfoTableBase);
            gZCTFModelsDataUserInfoTableBase.Columns.Add("LockoutEnabled", lockoutEnabledColumnBase);
            var lockoutEndColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnd", "timestamp with time zone", gZCTFModelsDataUserInfoTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataUserInfoTableBase.Columns.Add("LockoutEnd", lockoutEndColumnBase);
            var normalizedEmailColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedEmail", "character varying(256)", gZCTFModelsDataUserInfoTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataUserInfoTableBase.Columns.Add("NormalizedEmail", normalizedEmailColumnBase);
            var normalizedUserNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedUserName", "character varying(256)", gZCTFModelsDataUserInfoTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataUserInfoTableBase.Columns.Add("NormalizedUserName", normalizedUserNameColumnBase);
            var passwordHashColumnBase = new ColumnBase<ColumnMappingBase>("PasswordHash", "text", gZCTFModelsDataUserInfoTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataUserInfoTableBase.Columns.Add("PasswordHash", passwordHashColumnBase);
            var phoneNumberColumnBase = new ColumnBase<ColumnMappingBase>("PhoneNumber", "text", gZCTFModelsDataUserInfoTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataUserInfoTableBase.Columns.Add("PhoneNumber", phoneNumberColumnBase);
            var phoneNumberConfirmedColumnBase = new ColumnBase<ColumnMappingBase>("PhoneNumberConfirmed", "boolean", gZCTFModelsDataUserInfoTableBase);
            gZCTFModelsDataUserInfoTableBase.Columns.Add("PhoneNumberConfirmed", phoneNumberConfirmedColumnBase);
            var realNameColumnBase = new ColumnBase<ColumnMappingBase>("RealName", "character varying(7)", gZCTFModelsDataUserInfoTableBase);
            gZCTFModelsDataUserInfoTableBase.Columns.Add("RealName", realNameColumnBase);
            var registerTimeUtcColumnBase = new ColumnBase<ColumnMappingBase>("RegisterTimeUtc", "timestamp with time zone", gZCTFModelsDataUserInfoTableBase);
            gZCTFModelsDataUserInfoTableBase.Columns.Add("RegisterTimeUtc", registerTimeUtcColumnBase);
            var roleColumnBase = new ColumnBase<ColumnMappingBase>("Role", "integer", gZCTFModelsDataUserInfoTableBase);
            gZCTFModelsDataUserInfoTableBase.Columns.Add("Role", roleColumnBase);
            var securityStampColumnBase = new ColumnBase<ColumnMappingBase>("SecurityStamp", "text", gZCTFModelsDataUserInfoTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataUserInfoTableBase.Columns.Add("SecurityStamp", securityStampColumnBase);
            var stdNumberColumnBase = new ColumnBase<ColumnMappingBase>("StdNumber", "character varying(31)", gZCTFModelsDataUserInfoTableBase);
            gZCTFModelsDataUserInfoTableBase.Columns.Add("StdNumber", stdNumberColumnBase);
            var twoFactorEnabledColumnBase = new ColumnBase<ColumnMappingBase>("TwoFactorEnabled", "boolean", gZCTFModelsDataUserInfoTableBase);
            gZCTFModelsDataUserInfoTableBase.Columns.Add("TwoFactorEnabled", twoFactorEnabledColumnBase);
            var userNameColumnBase0 = new ColumnBase<ColumnMappingBase>("UserName", "character varying(16)", gZCTFModelsDataUserInfoTableBase)
            {
                IsNullable = true
            };
            gZCTFModelsDataUserInfoTableBase.Columns.Add("UserName", userNameColumnBase0);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.UserInfo", gZCTFModelsDataUserInfoTableBase);
            var gZCTFModelsDataUserInfoMappingBase = new TableMappingBase<ColumnMappingBase>(userInfo, gZCTFModelsDataUserInfoTableBase, true);
            gZCTFModelsDataUserInfoTableBase.AddTypeMapping(gZCTFModelsDataUserInfoMappingBase, false);
            defaultTableMappings18.Add(gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase13, userInfo.FindProperty("Id")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accessFailedCountColumnBase, userInfo.FindProperty("AccessFailedCount")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)avatarHashColumnBase0, userInfo.FindProperty("AvatarHash")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bioColumnBase0, userInfo.FindProperty("Bio")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase1, userInfo.FindProperty("ConcurrencyStamp")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, userInfo.FindProperty("Email")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailConfirmedColumnBase, userInfo.FindProperty("EmailConfirmed")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)exerciseVisibleColumnBase, userInfo.FindProperty("ExerciseVisible")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)iPColumnBase0, userInfo.FindProperty("IP")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastSignedInUtcColumnBase, userInfo.FindProperty("LastSignedInUtc")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastVisitedUtcColumnBase, userInfo.FindProperty("LastVisitedUtc")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEnabledColumnBase, userInfo.FindProperty("LockoutEnabled")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEndColumnBase, userInfo.FindProperty("LockoutEnd")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedEmailColumnBase, userInfo.FindProperty("NormalizedEmail")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedUserNameColumnBase, userInfo.FindProperty("NormalizedUserName")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordHashColumnBase, userInfo.FindProperty("PasswordHash")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneNumberColumnBase, userInfo.FindProperty("PhoneNumber")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneNumberConfirmedColumnBase, userInfo.FindProperty("PhoneNumberConfirmed")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)realNameColumnBase, userInfo.FindProperty("RealName")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)registerTimeUtcColumnBase, userInfo.FindProperty("RegisterTimeUtc")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleColumnBase, userInfo.FindProperty("Role")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)securityStampColumnBase, userInfo.FindProperty("SecurityStamp")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stdNumberColumnBase, userInfo.FindProperty("StdNumber")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)twoFactorEnabledColumnBase, userInfo.FindProperty("TwoFactorEnabled")!, gZCTFModelsDataUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase0, userInfo.FindProperty("UserName")!, gZCTFModelsDataUserInfoMappingBase);

            var tableMappings18 = new List<TableMapping>();
            userInfo.SetRuntimeAnnotation("Relational:TableMappings", tableMappings18);
            var aspNetUsersTable = new Table("AspNetUsers", null, relationalModel);
            var idColumn13 = new Column("Id", "uuid", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("Id", idColumn13);
            var accessFailedCountColumn = new Column("AccessFailedCount", "integer", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("AccessFailedCount", accessFailedCountColumn);
            var avatarHashColumn0 = new Column("AvatarHash", "character varying(64)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("AvatarHash", avatarHashColumn0);
            var bioColumn0 = new Column("Bio", "character varying(63)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("Bio", bioColumn0);
            var concurrencyStampColumn1 = new Column("ConcurrencyStamp", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn1);
            var emailColumn = new Column("Email", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("Email", emailColumn);
            var emailConfirmedColumn = new Column("EmailConfirmed", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("EmailConfirmed", emailConfirmedColumn);
            var exerciseVisibleColumn = new Column("ExerciseVisible", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("ExerciseVisible", exerciseVisibleColumn);
            var iPColumn0 = new Column("IP", "text", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("IP", iPColumn0);
            var lastSignedInUtcColumn = new Column("LastSignedInUtc", "timestamp with time zone", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("LastSignedInUtc", lastSignedInUtcColumn);
            var lastVisitedUtcColumn = new Column("LastVisitedUtc", "timestamp with time zone", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("LastVisitedUtc", lastVisitedUtcColumn);
            var lockoutEnabledColumn = new Column("LockoutEnabled", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("LockoutEnabled", lockoutEnabledColumn);
            var lockoutEndColumn = new Column("LockoutEnd", "timestamp with time zone", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LockoutEnd", lockoutEndColumn);
            var normalizedEmailColumn = new Column("NormalizedEmail", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("NormalizedEmail", normalizedEmailColumn);
            var normalizedUserNameColumn = new Column("NormalizedUserName", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("NormalizedUserName", normalizedUserNameColumn);
            var passwordHashColumn = new Column("PasswordHash", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("PasswordHash", passwordHashColumn);
            var phoneNumberColumn = new Column("PhoneNumber", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("PhoneNumber", phoneNumberColumn);
            var phoneNumberConfirmedColumn = new Column("PhoneNumberConfirmed", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("PhoneNumberConfirmed", phoneNumberConfirmedColumn);
            var realNameColumn = new Column("RealName", "character varying(7)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("RealName", realNameColumn);
            var registerTimeUtcColumn = new Column("RegisterTimeUtc", "timestamp with time zone", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("RegisterTimeUtc", registerTimeUtcColumn);
            var roleColumn = new Column("Role", "integer", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("Role", roleColumn);
            var securityStampColumn = new Column("SecurityStamp", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("SecurityStamp", securityStampColumn);
            var stdNumberColumn = new Column("StdNumber", "character varying(31)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("StdNumber", stdNumberColumn);
            var twoFactorEnabledColumn = new Column("TwoFactorEnabled", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("TwoFactorEnabled", twoFactorEnabledColumn);
            var userNameColumn0 = new Column("UserName", "character varying(16)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("UserName", userNameColumn0);
            var pK_AspNetUsers = new UniqueConstraint("PK_AspNetUsers", aspNetUsersTable, new[] { idColumn13 });
            aspNetUsersTable.PrimaryKey = pK_AspNetUsers;
            var pK_AspNetUsersUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.UserInfo",
                new[] { "Id" });
            pK_AspNetUsers.MappedKeys.Add(pK_AspNetUsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUsersUc).Add(pK_AspNetUsers);
            aspNetUsersTable.UniqueConstraints.Add("PK_AspNetUsers", pK_AspNetUsers);
            var emailIndex = new TableIndex(
            "EmailIndex", aspNetUsersTable, new[] { normalizedEmailColumn }, false);
            var emailIndexIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.UserInfo",
                new[] { "NormalizedEmail" });
            emailIndex.MappedIndexes.Add(emailIndexIx);
            RelationalModel.GetOrCreateTableIndexes(emailIndexIx).Add(emailIndex);
            aspNetUsersTable.Indexes.Add("EmailIndex", emailIndex);
            var userNameIndex = new TableIndex(
            "UserNameIndex", aspNetUsersTable, new[] { normalizedUserNameColumn }, true);
            var userNameIndexIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.UserInfo",
                new[] { "NormalizedUserName" });
            userNameIndex.MappedIndexes.Add(userNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(userNameIndexIx).Add(userNameIndex);
            aspNetUsersTable.Indexes.Add("UserNameIndex", userNameIndex);
            relationalModel.Tables.Add(("AspNetUsers", null), aspNetUsersTable);
            var aspNetUsersTableMapping = new TableMapping(userInfo, aspNetUsersTable, true);
            aspNetUsersTable.AddTypeMapping(aspNetUsersTableMapping, false);
            tableMappings18.Add(aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn13, userInfo.FindProperty("Id")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(accessFailedCountColumn, userInfo.FindProperty("AccessFailedCount")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(avatarHashColumn0, userInfo.FindProperty("AvatarHash")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(bioColumn0, userInfo.FindProperty("Bio")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn1, userInfo.FindProperty("ConcurrencyStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, userInfo.FindProperty("Email")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailConfirmedColumn, userInfo.FindProperty("EmailConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(exerciseVisibleColumn, userInfo.FindProperty("ExerciseVisible")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(iPColumn0, userInfo.FindProperty("IP")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastSignedInUtcColumn, userInfo.FindProperty("LastSignedInUtc")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastVisitedUtcColumn, userInfo.FindProperty("LastVisitedUtc")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEnabledColumn, userInfo.FindProperty("LockoutEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEndColumn, userInfo.FindProperty("LockoutEnd")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalizedEmailColumn, userInfo.FindProperty("NormalizedEmail")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalizedUserNameColumn, userInfo.FindProperty("NormalizedUserName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(passwordHashColumn, userInfo.FindProperty("PasswordHash")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phoneNumberColumn, userInfo.FindProperty("PhoneNumber")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phoneNumberConfirmedColumn, userInfo.FindProperty("PhoneNumberConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(realNameColumn, userInfo.FindProperty("RealName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(registerTimeUtcColumn, userInfo.FindProperty("RegisterTimeUtc")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(roleColumn, userInfo.FindProperty("Role")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(securityStampColumn, userInfo.FindProperty("SecurityStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(stdNumberColumn, userInfo.FindProperty("StdNumber")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(twoFactorEnabledColumn, userInfo.FindProperty("TwoFactorEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn0, userInfo.FindProperty("UserName")!, aspNetUsersTableMapping);

            var userParticipation = FindEntityType("GZCTF.Models.Data.UserParticipation")!;

            var defaultTableMappings19 = new List<TableMappingBase<ColumnMappingBase>>();
            userParticipation.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings19);
            var gZCTFModelsDataUserParticipationTableBase = new TableBase("GZCTF.Models.Data.UserParticipation", null, relationalModel);
            var gameIdColumnBase5 = new ColumnBase<ColumnMappingBase>("GameId", "integer", gZCTFModelsDataUserParticipationTableBase);
            gZCTFModelsDataUserParticipationTableBase.Columns.Add("GameId", gameIdColumnBase5);
            var participationIdColumnBase1 = new ColumnBase<ColumnMappingBase>("ParticipationId", "integer", gZCTFModelsDataUserParticipationTableBase);
            gZCTFModelsDataUserParticipationTableBase.Columns.Add("ParticipationId", participationIdColumnBase1);
            var teamIdColumnBase2 = new ColumnBase<ColumnMappingBase>("TeamId", "integer", gZCTFModelsDataUserParticipationTableBase);
            gZCTFModelsDataUserParticipationTableBase.Columns.Add("TeamId", teamIdColumnBase2);
            var userIdColumnBase2 = new ColumnBase<ColumnMappingBase>("UserId", "uuid", gZCTFModelsDataUserParticipationTableBase);
            gZCTFModelsDataUserParticipationTableBase.Columns.Add("UserId", userIdColumnBase2);
            relationalModel.DefaultTables.Add("GZCTF.Models.Data.UserParticipation", gZCTFModelsDataUserParticipationTableBase);
            var gZCTFModelsDataUserParticipationMappingBase = new TableMappingBase<ColumnMappingBase>(userParticipation, gZCTFModelsDataUserParticipationTableBase, true);
            gZCTFModelsDataUserParticipationTableBase.AddTypeMapping(gZCTFModelsDataUserParticipationMappingBase, false);
            defaultTableMappings19.Add(gZCTFModelsDataUserParticipationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gameIdColumnBase5, userParticipation.FindProperty("GameId")!, gZCTFModelsDataUserParticipationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)teamIdColumnBase2, userParticipation.FindProperty("TeamId")!, gZCTFModelsDataUserParticipationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase2, userParticipation.FindProperty("UserId")!, gZCTFModelsDataUserParticipationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)participationIdColumnBase1, userParticipation.FindProperty("ParticipationId")!, gZCTFModelsDataUserParticipationMappingBase);

            var tableMappings19 = new List<TableMapping>();
            userParticipation.SetRuntimeAnnotation("Relational:TableMappings", tableMappings19);
            var userParticipationsTable = new Table("UserParticipations", null, relationalModel);
            var gameIdColumn5 = new Column("GameId", "integer", userParticipationsTable);
            userParticipationsTable.Columns.Add("GameId", gameIdColumn5);
            var teamIdColumn2 = new Column("TeamId", "integer", userParticipationsTable);
            userParticipationsTable.Columns.Add("TeamId", teamIdColumn2);
            var userIdColumn2 = new Column("UserId", "uuid", userParticipationsTable);
            userParticipationsTable.Columns.Add("UserId", userIdColumn2);
            var participationIdColumn1 = new Column("ParticipationId", "integer", userParticipationsTable);
            userParticipationsTable.Columns.Add("ParticipationId", participationIdColumn1);
            var pK_UserParticipations = new UniqueConstraint("PK_UserParticipations", userParticipationsTable, new[] { gameIdColumn5, teamIdColumn2, userIdColumn2 });
            userParticipationsTable.PrimaryKey = pK_UserParticipations;
            var pK_UserParticipationsUc = RelationalModel.GetKey(this,
                "GZCTF.Models.Data.UserParticipation",
                new[] { "GameId", "TeamId", "UserId" });
            pK_UserParticipations.MappedKeys.Add(pK_UserParticipationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UserParticipationsUc).Add(pK_UserParticipations);
            userParticipationsTable.UniqueConstraints.Add("PK_UserParticipations", pK_UserParticipations);
            var iX_UserParticipations_ParticipationId = new TableIndex(
            "IX_UserParticipations_ParticipationId", userParticipationsTable, new[] { participationIdColumn1 }, false);
            var iX_UserParticipations_ParticipationIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.UserParticipation",
                new[] { "ParticipationId" });
            iX_UserParticipations_ParticipationId.MappedIndexes.Add(iX_UserParticipations_ParticipationIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_UserParticipations_ParticipationIdIx).Add(iX_UserParticipations_ParticipationId);
            userParticipationsTable.Indexes.Add("IX_UserParticipations_ParticipationId", iX_UserParticipations_ParticipationId);
            var iX_UserParticipations_TeamId = new TableIndex(
            "IX_UserParticipations_TeamId", userParticipationsTable, new[] { teamIdColumn2 }, false);
            var iX_UserParticipations_TeamIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.UserParticipation",
                new[] { "TeamId" });
            iX_UserParticipations_TeamId.MappedIndexes.Add(iX_UserParticipations_TeamIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_UserParticipations_TeamIdIx).Add(iX_UserParticipations_TeamId);
            userParticipationsTable.Indexes.Add("IX_UserParticipations_TeamId", iX_UserParticipations_TeamId);
            var iX_UserParticipations_UserId_GameId = new TableIndex(
            "IX_UserParticipations_UserId_GameId", userParticipationsTable, new[] { userIdColumn2, gameIdColumn5 }, true);
            var iX_UserParticipations_UserId_GameIdIx = RelationalModel.GetIndex(this,
                "GZCTF.Models.Data.UserParticipation",
                new[] { "UserId", "GameId" });
            iX_UserParticipations_UserId_GameId.MappedIndexes.Add(iX_UserParticipations_UserId_GameIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_UserParticipations_UserId_GameIdIx).Add(iX_UserParticipations_UserId_GameId);
            userParticipationsTable.Indexes.Add("IX_UserParticipations_UserId_GameId", iX_UserParticipations_UserId_GameId);
            relationalModel.Tables.Add(("UserParticipations", null), userParticipationsTable);
            var userParticipationsTableMapping = new TableMapping(userParticipation, userParticipationsTable, true);
            userParticipationsTable.AddTypeMapping(userParticipationsTableMapping, false);
            tableMappings19.Add(userParticipationsTableMapping);
            RelationalModel.CreateColumnMapping(gameIdColumn5, userParticipation.FindProperty("GameId")!, userParticipationsTableMapping);
            RelationalModel.CreateColumnMapping(teamIdColumn2, userParticipation.FindProperty("TeamId")!, userParticipationsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn2, userParticipation.FindProperty("UserId")!, userParticipationsTableMapping);
            RelationalModel.CreateColumnMapping(participationIdColumn1, userParticipation.FindProperty("ParticipationId")!, userParticipationsTableMapping);

            var dataProtectionKey = FindEntityType("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey")!;

            var defaultTableMappings20 = new List<TableMappingBase<ColumnMappingBase>>();
            dataProtectionKey.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings20);
            var microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase = new TableBase("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", null, relationalModel);
            var friendlyNameColumnBase = new ColumnBase<ColumnMappingBase>("FriendlyName", "text", microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase.Columns.Add("FriendlyName", friendlyNameColumnBase);
            var idColumnBase14 = new ColumnBase<ColumnMappingBase>("Id", "integer", microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase);
            microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase.Columns.Add("Id", idColumnBase14);
            var xmlColumnBase = new ColumnBase<ColumnMappingBase>("Xml", "text", microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase.Columns.Add("Xml", xmlColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase);
            var microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyMappingBase = new TableMappingBase<ColumnMappingBase>(dataProtectionKey, microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase, true);
            microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase.AddTypeMapping(microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyMappingBase, false);
            defaultTableMappings20.Add(microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase14, dataProtectionKey.FindProperty("Id")!, microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)friendlyNameColumnBase, dataProtectionKey.FindProperty("FriendlyName")!, microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xmlColumnBase, dataProtectionKey.FindProperty("Xml")!, microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyMappingBase);

            var tableMappings20 = new List<TableMapping>();
            dataProtectionKey.SetRuntimeAnnotation("Relational:TableMappings", tableMappings20);
            var dataProtectionKeysTable = new Table("DataProtectionKeys", null, relationalModel);
            var idColumn14 = new Column("Id", "integer", dataProtectionKeysTable);
            dataProtectionKeysTable.Columns.Add("Id", idColumn14);
            idColumn14.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var friendlyNameColumn = new Column("FriendlyName", "text", dataProtectionKeysTable)
            {
                IsNullable = true
            };
            dataProtectionKeysTable.Columns.Add("FriendlyName", friendlyNameColumn);
            var xmlColumn = new Column("Xml", "text", dataProtectionKeysTable)
            {
                IsNullable = true
            };
            dataProtectionKeysTable.Columns.Add("Xml", xmlColumn);
            var pK_DataProtectionKeys = new UniqueConstraint("PK_DataProtectionKeys", dataProtectionKeysTable, new[] { idColumn14 });
            dataProtectionKeysTable.PrimaryKey = pK_DataProtectionKeys;
            var pK_DataProtectionKeysUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey",
                new[] { "Id" });
            pK_DataProtectionKeys.MappedKeys.Add(pK_DataProtectionKeysUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DataProtectionKeysUc).Add(pK_DataProtectionKeys);
            dataProtectionKeysTable.UniqueConstraints.Add("PK_DataProtectionKeys", pK_DataProtectionKeys);
            relationalModel.Tables.Add(("DataProtectionKeys", null), dataProtectionKeysTable);
            var dataProtectionKeysTableMapping = new TableMapping(dataProtectionKey, dataProtectionKeysTable, true);
            dataProtectionKeysTable.AddTypeMapping(dataProtectionKeysTableMapping, false);
            tableMappings20.Add(dataProtectionKeysTableMapping);
            RelationalModel.CreateColumnMapping(idColumn14, dataProtectionKey.FindProperty("Id")!, dataProtectionKeysTableMapping);
            RelationalModel.CreateColumnMapping(friendlyNameColumn, dataProtectionKey.FindProperty("FriendlyName")!, dataProtectionKeysTableMapping);
            RelationalModel.CreateColumnMapping(xmlColumn, dataProtectionKey.FindProperty("Xml")!, dataProtectionKeysTableMapping);

            var identityRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")!;

            var defaultTableMappings21 = new List<TableMappingBase<ColumnMappingBase>>();
            identityRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings21);
            var microsoftAspNetCoreIdentityIdentityRoleSystemGuidTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null, relationalModel);
            var concurrencyStampColumnBase2 = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "text", microsoftAspNetCoreIdentityIdentityRoleSystemGuidTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleSystemGuidTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase2);
            var idColumnBase15 = new ColumnBase<ColumnMappingBase>("Id", "uuid", microsoftAspNetCoreIdentityIdentityRoleSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityRoleSystemGuidTableBase.Columns.Add("Id", idColumnBase15);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "character varying(256)", microsoftAspNetCoreIdentityIdentityRoleSystemGuidTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleSystemGuidTableBase.Columns.Add("Name", nameColumnBase1);
            var normalizedNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedName", "character varying(256)", microsoftAspNetCoreIdentityIdentityRoleSystemGuidTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleSystemGuidTableBase.Columns.Add("NormalizedName", normalizedNameColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", microsoftAspNetCoreIdentityIdentityRoleSystemGuidTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleSystemGuidMappingBase = new TableMappingBase<ColumnMappingBase>(identityRole, microsoftAspNetCoreIdentityIdentityRoleSystemGuidTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleSystemGuidTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleSystemGuidMappingBase, false);
            defaultTableMappings21.Add(microsoftAspNetCoreIdentityIdentityRoleSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase15, identityRole.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase2, identityRole.FindProperty("ConcurrencyStamp")!, microsoftAspNetCoreIdentityIdentityRoleSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, identityRole.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityRoleSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedNameColumnBase, identityRole.FindProperty("NormalizedName")!, microsoftAspNetCoreIdentityIdentityRoleSystemGuidMappingBase);

            var tableMappings21 = new List<TableMapping>();
            identityRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings21);
            var aspNetRolesTable = new Table("AspNetRoles", null, relationalModel);
            var idColumn15 = new Column("Id", "uuid", aspNetRolesTable);
            aspNetRolesTable.Columns.Add("Id", idColumn15);
            var concurrencyStampColumn2 = new Column("ConcurrencyStamp", "text", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn2);
            var nameColumn1 = new Column("Name", "character varying(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("Name", nameColumn1);
            var normalizedNameColumn = new Column("NormalizedName", "character varying(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("NormalizedName", normalizedNameColumn);
            var pK_AspNetRoles = new UniqueConstraint("PK_AspNetRoles", aspNetRolesTable, new[] { idColumn15 });
            aspNetRolesTable.PrimaryKey = pK_AspNetRoles;
            var pK_AspNetRolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>",
                new[] { "Id" });
            pK_AspNetRoles.MappedKeys.Add(pK_AspNetRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRolesUc).Add(pK_AspNetRoles);
            aspNetRolesTable.UniqueConstraints.Add("PK_AspNetRoles", pK_AspNetRoles);
            var roleNameIndex = new TableIndex(
            "RoleNameIndex", aspNetRolesTable, new[] { normalizedNameColumn }, true);
            var roleNameIndexIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>",
                new[] { "NormalizedName" });
            roleNameIndex.MappedIndexes.Add(roleNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(roleNameIndexIx).Add(roleNameIndex);
            aspNetRolesTable.Indexes.Add("RoleNameIndex", roleNameIndex);
            relationalModel.Tables.Add(("AspNetRoles", null), aspNetRolesTable);
            var aspNetRolesTableMapping = new TableMapping(identityRole, aspNetRolesTable, true);
            aspNetRolesTable.AddTypeMapping(aspNetRolesTableMapping, false);
            tableMappings21.Add(aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn15, identityRole.FindProperty("Id")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn2, identityRole.FindProperty("ConcurrencyStamp")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, identityRole.FindProperty("Name")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(normalizedNameColumn, identityRole.FindProperty("NormalizedName")!, aspNetRolesTableMapping);

            var identityRoleClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>")!;

            var defaultTableMappings22 = new List<TableMappingBase<ColumnMappingBase>>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings22);
            var microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", null, relationalModel);
            var claimTypeColumnBase = new ColumnBase<ColumnMappingBase>("ClaimType", "text", microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase.Columns.Add("ClaimType", claimTypeColumnBase);
            var claimValueColumnBase = new ColumnBase<ColumnMappingBase>("ClaimValue", "text", microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase.Columns.Add("ClaimValue", claimValueColumnBase);
            var idColumnBase16 = new ColumnBase<ColumnMappingBase>("Id", "integer", microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase.Columns.Add("Id", idColumnBase16);
            var roleIdColumnBase = new ColumnBase<ColumnMappingBase>("RoleId", "uuid", microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase.Columns.Add("RoleId", roleIdColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidMappingBase = new TableMappingBase<ColumnMappingBase>(identityRoleClaim, microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidMappingBase, false);
            defaultTableMappings22.Add(microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase16, identityRoleClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase, identityRoleClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase, identityRoleClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase, identityRoleClaim.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityRoleClaimSystemGuidMappingBase);

            var tableMappings22 = new List<TableMapping>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings22);
            var aspNetRoleClaimsTable = new Table("AspNetRoleClaims", null, relationalModel);
            var idColumn16 = new Column("Id", "integer", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("Id", idColumn16);
            idColumn16.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var claimTypeColumn = new Column("ClaimType", "text", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimType", claimTypeColumn);
            var claimValueColumn = new Column("ClaimValue", "text", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimValue", claimValueColumn);
            var roleIdColumn = new Column("RoleId", "uuid", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("RoleId", roleIdColumn);
            var pK_AspNetRoleClaims = new UniqueConstraint("PK_AspNetRoleClaims", aspNetRoleClaimsTable, new[] { idColumn16 });
            aspNetRoleClaimsTable.PrimaryKey = pK_AspNetRoleClaims;
            var pK_AspNetRoleClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>",
                new[] { "Id" });
            pK_AspNetRoleClaims.MappedKeys.Add(pK_AspNetRoleClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRoleClaimsUc).Add(pK_AspNetRoleClaims);
            aspNetRoleClaimsTable.UniqueConstraints.Add("PK_AspNetRoleClaims", pK_AspNetRoleClaims);
            var iX_AspNetRoleClaims_RoleId = new TableIndex(
            "IX_AspNetRoleClaims_RoleId", aspNetRoleClaimsTable, new[] { roleIdColumn }, false);
            var iX_AspNetRoleClaims_RoleIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>",
                new[] { "RoleId" });
            iX_AspNetRoleClaims_RoleId.MappedIndexes.Add(iX_AspNetRoleClaims_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetRoleClaims_RoleIdIx).Add(iX_AspNetRoleClaims_RoleId);
            aspNetRoleClaimsTable.Indexes.Add("IX_AspNetRoleClaims_RoleId", iX_AspNetRoleClaims_RoleId);
            relationalModel.Tables.Add(("AspNetRoleClaims", null), aspNetRoleClaimsTable);
            var aspNetRoleClaimsTableMapping = new TableMapping(identityRoleClaim, aspNetRoleClaimsTable, true);
            aspNetRoleClaimsTable.AddTypeMapping(aspNetRoleClaimsTableMapping, false);
            tableMappings22.Add(aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn16, identityRoleClaim.FindProperty("Id")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn, identityRoleClaim.FindProperty("ClaimType")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn, identityRoleClaim.FindProperty("ClaimValue")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn, identityRoleClaim.FindProperty("RoleId")!, aspNetRoleClaimsTableMapping);

            var identityUserClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>")!;

            var defaultTableMappings23 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings23);
            var microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", null, relationalModel);
            var claimTypeColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimType", "text", microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase.Columns.Add("ClaimType", claimTypeColumnBase0);
            var claimValueColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimValue", "text", microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase.Columns.Add("ClaimValue", claimValueColumnBase0);
            var idColumnBase17 = new ColumnBase<ColumnMappingBase>("Id", "integer", microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase.Columns.Add("Id", idColumnBase17);
            var userIdColumnBase3 = new ColumnBase<ColumnMappingBase>("UserId", "uuid", microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase.Columns.Add("UserId", userIdColumnBase3);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase);
            var microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserClaim, microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidMappingBase, false);
            defaultTableMappings23.Add(microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase17, identityUserClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase0, identityUserClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase0, identityUserClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase3, identityUserClaim.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserClaimSystemGuidMappingBase);

            var tableMappings23 = new List<TableMapping>();
            identityUserClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings23);
            var aspNetUserClaimsTable = new Table("AspNetUserClaims", null, relationalModel);
            var idColumn17 = new Column("Id", "integer", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("Id", idColumn17);
            idColumn17.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var claimTypeColumn0 = new Column("ClaimType", "text", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimType", claimTypeColumn0);
            var claimValueColumn0 = new Column("ClaimValue", "text", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimValue", claimValueColumn0);
            var userIdColumn3 = new Column("UserId", "uuid", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("UserId", userIdColumn3);
            var pK_AspNetUserClaims = new UniqueConstraint("PK_AspNetUserClaims", aspNetUserClaimsTable, new[] { idColumn17 });
            aspNetUserClaimsTable.PrimaryKey = pK_AspNetUserClaims;
            var pK_AspNetUserClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>",
                new[] { "Id" });
            pK_AspNetUserClaims.MappedKeys.Add(pK_AspNetUserClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserClaimsUc).Add(pK_AspNetUserClaims);
            aspNetUserClaimsTable.UniqueConstraints.Add("PK_AspNetUserClaims", pK_AspNetUserClaims);
            var iX_AspNetUserClaims_UserId = new TableIndex(
            "IX_AspNetUserClaims_UserId", aspNetUserClaimsTable, new[] { userIdColumn3 }, false);
            var iX_AspNetUserClaims_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>",
                new[] { "UserId" });
            iX_AspNetUserClaims_UserId.MappedIndexes.Add(iX_AspNetUserClaims_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserClaims_UserIdIx).Add(iX_AspNetUserClaims_UserId);
            aspNetUserClaimsTable.Indexes.Add("IX_AspNetUserClaims_UserId", iX_AspNetUserClaims_UserId);
            relationalModel.Tables.Add(("AspNetUserClaims", null), aspNetUserClaimsTable);
            var aspNetUserClaimsTableMapping = new TableMapping(identityUserClaim, aspNetUserClaimsTable, true);
            aspNetUserClaimsTable.AddTypeMapping(aspNetUserClaimsTableMapping, false);
            tableMappings23.Add(aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn17, identityUserClaim.FindProperty("Id")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn0, identityUserClaim.FindProperty("ClaimType")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn0, identityUserClaim.FindProperty("ClaimValue")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn3, identityUserClaim.FindProperty("UserId")!, aspNetUserClaimsTableMapping);

            var identityUserLogin = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>")!;

            var defaultTableMappings24 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserLogin.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings24);
            var microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", null, relationalModel);
            var loginProviderColumnBase = new ColumnBase<ColumnMappingBase>("LoginProvider", "text", microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase.Columns.Add("LoginProvider", loginProviderColumnBase);
            var providerDisplayNameColumnBase = new ColumnBase<ColumnMappingBase>("ProviderDisplayName", "text", microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase.Columns.Add("ProviderDisplayName", providerDisplayNameColumnBase);
            var providerKeyColumnBase = new ColumnBase<ColumnMappingBase>("ProviderKey", "text", microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase.Columns.Add("ProviderKey", providerKeyColumnBase);
            var userIdColumnBase4 = new ColumnBase<ColumnMappingBase>("UserId", "uuid", microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase.Columns.Add("UserId", userIdColumnBase4);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase);
            var microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserLogin, microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidMappingBase, false);
            defaultTableMappings24.Add(microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase, identityUserLogin.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerKeyColumnBase, identityUserLogin.FindProperty("ProviderKey")!, microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerDisplayNameColumnBase, identityUserLogin.FindProperty("ProviderDisplayName")!, microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase4, identityUserLogin.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserLoginSystemGuidMappingBase);

            var tableMappings24 = new List<TableMapping>();
            identityUserLogin.SetRuntimeAnnotation("Relational:TableMappings", tableMappings24);
            var aspNetUserLoginsTable = new Table("AspNetUserLogins", null, relationalModel);
            var loginProviderColumn = new Column("LoginProvider", "text", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("LoginProvider", loginProviderColumn);
            var providerKeyColumn = new Column("ProviderKey", "text", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("ProviderKey", providerKeyColumn);
            var providerDisplayNameColumn = new Column("ProviderDisplayName", "text", aspNetUserLoginsTable)
            {
                IsNullable = true
            };
            aspNetUserLoginsTable.Columns.Add("ProviderDisplayName", providerDisplayNameColumn);
            var userIdColumn4 = new Column("UserId", "uuid", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("UserId", userIdColumn4);
            var pK_AspNetUserLogins = new UniqueConstraint("PK_AspNetUserLogins", aspNetUserLoginsTable, new[] { loginProviderColumn, providerKeyColumn });
            aspNetUserLoginsTable.PrimaryKey = pK_AspNetUserLogins;
            var pK_AspNetUserLoginsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>",
                new[] { "LoginProvider", "ProviderKey" });
            pK_AspNetUserLogins.MappedKeys.Add(pK_AspNetUserLoginsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserLoginsUc).Add(pK_AspNetUserLogins);
            aspNetUserLoginsTable.UniqueConstraints.Add("PK_AspNetUserLogins", pK_AspNetUserLogins);
            var iX_AspNetUserLogins_UserId = new TableIndex(
            "IX_AspNetUserLogins_UserId", aspNetUserLoginsTable, new[] { userIdColumn4 }, false);
            var iX_AspNetUserLogins_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>",
                new[] { "UserId" });
            iX_AspNetUserLogins_UserId.MappedIndexes.Add(iX_AspNetUserLogins_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserLogins_UserIdIx).Add(iX_AspNetUserLogins_UserId);
            aspNetUserLoginsTable.Indexes.Add("IX_AspNetUserLogins_UserId", iX_AspNetUserLogins_UserId);
            relationalModel.Tables.Add(("AspNetUserLogins", null), aspNetUserLoginsTable);
            var aspNetUserLoginsTableMapping = new TableMapping(identityUserLogin, aspNetUserLoginsTable, true);
            aspNetUserLoginsTable.AddTypeMapping(aspNetUserLoginsTableMapping, false);
            tableMappings24.Add(aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn, identityUserLogin.FindProperty("LoginProvider")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerKeyColumn, identityUserLogin.FindProperty("ProviderKey")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerDisplayNameColumn, identityUserLogin.FindProperty("ProviderDisplayName")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn4, identityUserLogin.FindProperty("UserId")!, aspNetUserLoginsTableMapping);

            var identityUserRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>")!;

            var defaultTableMappings25 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings25);
            var microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", null, relationalModel);
            var roleIdColumnBase0 = new ColumnBase<ColumnMappingBase>("RoleId", "uuid", microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase.Columns.Add("RoleId", roleIdColumnBase0);
            var userIdColumnBase5 = new ColumnBase<ColumnMappingBase>("UserId", "uuid", microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase.Columns.Add("UserId", userIdColumnBase5);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase);
            var microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserRole, microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidMappingBase, false);
            defaultTableMappings25.Add(microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase0, identityUserRole.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase5, identityUserRole.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserRoleSystemGuidMappingBase);

            var tableMappings25 = new List<TableMapping>();
            identityUserRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings25);
            var aspNetUserRolesTable = new Table("AspNetUserRoles", null, relationalModel);
            var userIdColumn5 = new Column("UserId", "uuid", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("UserId", userIdColumn5);
            var roleIdColumn0 = new Column("RoleId", "uuid", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("RoleId", roleIdColumn0);
            var pK_AspNetUserRoles = new UniqueConstraint("PK_AspNetUserRoles", aspNetUserRolesTable, new[] { userIdColumn5, roleIdColumn0 });
            aspNetUserRolesTable.PrimaryKey = pK_AspNetUserRoles;
            var pK_AspNetUserRolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>",
                new[] { "UserId", "RoleId" });
            pK_AspNetUserRoles.MappedKeys.Add(pK_AspNetUserRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserRolesUc).Add(pK_AspNetUserRoles);
            aspNetUserRolesTable.UniqueConstraints.Add("PK_AspNetUserRoles", pK_AspNetUserRoles);
            var iX_AspNetUserRoles_RoleId = new TableIndex(
            "IX_AspNetUserRoles_RoleId", aspNetUserRolesTable, new[] { roleIdColumn0 }, false);
            var iX_AspNetUserRoles_RoleIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>",
                new[] { "RoleId" });
            iX_AspNetUserRoles_RoleId.MappedIndexes.Add(iX_AspNetUserRoles_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserRoles_RoleIdIx).Add(iX_AspNetUserRoles_RoleId);
            aspNetUserRolesTable.Indexes.Add("IX_AspNetUserRoles_RoleId", iX_AspNetUserRoles_RoleId);
            relationalModel.Tables.Add(("AspNetUserRoles", null), aspNetUserRolesTable);
            var aspNetUserRolesTableMapping = new TableMapping(identityUserRole, aspNetUserRolesTable, true);
            aspNetUserRolesTable.AddTypeMapping(aspNetUserRolesTableMapping, false);
            tableMappings25.Add(aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn0, identityUserRole.FindProperty("RoleId")!, aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn5, identityUserRole.FindProperty("UserId")!, aspNetUserRolesTableMapping);

            var identityUserToken = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>")!;

            var defaultTableMappings26 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserToken.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings26);
            var microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", null, relationalModel);
            var loginProviderColumnBase0 = new ColumnBase<ColumnMappingBase>("LoginProvider", "text", microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase.Columns.Add("LoginProvider", loginProviderColumnBase0);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("Name", "text", microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase.Columns.Add("Name", nameColumnBase2);
            var userIdColumnBase6 = new ColumnBase<ColumnMappingBase>("UserId", "uuid", microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase.Columns.Add("UserId", userIdColumnBase6);
            var valueColumnBase0 = new ColumnBase<ColumnMappingBase>("Value", "text", microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase.Columns.Add("Value", valueColumnBase0);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase);
            var microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserToken, microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidMappingBase, false);
            defaultTableMappings26.Add(microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase0, identityUserToken.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, identityUserToken.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase6, identityUserToken.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase0, identityUserToken.FindProperty("Value")!, microsoftAspNetCoreIdentityIdentityUserTokenSystemGuidMappingBase);

            var tableMappings26 = new List<TableMapping>();
            identityUserToken.SetRuntimeAnnotation("Relational:TableMappings", tableMappings26);
            var aspNetUserTokensTable = new Table("AspNetUserTokens", null, relationalModel);
            var userIdColumn6 = new Column("UserId", "uuid", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("UserId", userIdColumn6);
            var loginProviderColumn0 = new Column("LoginProvider", "text", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("LoginProvider", loginProviderColumn0);
            var nameColumn2 = new Column("Name", "text", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("Name", nameColumn2);
            var valueColumn0 = new Column("Value", "text", aspNetUserTokensTable)
            {
                IsNullable = true
            };
            aspNetUserTokensTable.Columns.Add("Value", valueColumn0);
            var pK_AspNetUserTokens = new UniqueConstraint("PK_AspNetUserTokens", aspNetUserTokensTable, new[] { userIdColumn6, loginProviderColumn0, nameColumn2 });
            aspNetUserTokensTable.PrimaryKey = pK_AspNetUserTokens;
            var pK_AspNetUserTokensUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>",
                new[] { "UserId", "LoginProvider", "Name" });
            pK_AspNetUserTokens.MappedKeys.Add(pK_AspNetUserTokensUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserTokensUc).Add(pK_AspNetUserTokens);
            aspNetUserTokensTable.UniqueConstraints.Add("PK_AspNetUserTokens", pK_AspNetUserTokens);
            relationalModel.Tables.Add(("AspNetUserTokens", null), aspNetUserTokensTable);
            var aspNetUserTokensTableMapping = new TableMapping(identityUserToken, aspNetUserTokensTable, true);
            aspNetUserTokensTable.AddTypeMapping(aspNetUserTokensTableMapping, false);
            tableMappings26.Add(aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn0, identityUserToken.FindProperty("LoginProvider")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, identityUserToken.FindProperty("Name")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn6, identityUserToken.FindProperty("UserId")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn0, identityUserToken.FindProperty("Value")!, aspNetUserTokensTableMapping);

            var teamUserInfo = FindEntityType("TeamUserInfo")!;

            var defaultTableMappings27 = new List<TableMappingBase<ColumnMappingBase>>();
            teamUserInfo.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings27);
            var teamUserInfoTableBase = new TableBase("TeamUserInfo", null, relationalModel);
            var membersIdColumnBase = new ColumnBase<ColumnMappingBase>("MembersId", "uuid", teamUserInfoTableBase);
            teamUserInfoTableBase.Columns.Add("MembersId", membersIdColumnBase);
            var teamsIdColumnBase = new ColumnBase<ColumnMappingBase>("TeamsId", "integer", teamUserInfoTableBase);
            teamUserInfoTableBase.Columns.Add("TeamsId", teamsIdColumnBase);
            relationalModel.DefaultTables.Add("TeamUserInfo", teamUserInfoTableBase);
            var teamUserInfoMappingBase = new TableMappingBase<ColumnMappingBase>(teamUserInfo, teamUserInfoTableBase, true);
            teamUserInfoTableBase.AddTypeMapping(teamUserInfoMappingBase, false);
            defaultTableMappings27.Add(teamUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)membersIdColumnBase, teamUserInfo.FindProperty("MembersId")!, teamUserInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)teamsIdColumnBase, teamUserInfo.FindProperty("TeamsId")!, teamUserInfoMappingBase);

            var tableMappings27 = new List<TableMapping>();
            teamUserInfo.SetRuntimeAnnotation("Relational:TableMappings", tableMappings27);
            var teamUserInfoTable = new Table("TeamUserInfo", null, relationalModel);
            var membersIdColumn = new Column("MembersId", "uuid", teamUserInfoTable);
            teamUserInfoTable.Columns.Add("MembersId", membersIdColumn);
            var teamsIdColumn = new Column("TeamsId", "integer", teamUserInfoTable);
            teamUserInfoTable.Columns.Add("TeamsId", teamsIdColumn);
            var pK_TeamUserInfo = new UniqueConstraint("PK_TeamUserInfo", teamUserInfoTable, new[] { membersIdColumn, teamsIdColumn });
            teamUserInfoTable.PrimaryKey = pK_TeamUserInfo;
            var pK_TeamUserInfoUc = RelationalModel.GetKey(this,
                "TeamUserInfo",
                new[] { "MembersId", "TeamsId" });
            pK_TeamUserInfo.MappedKeys.Add(pK_TeamUserInfoUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_TeamUserInfoUc).Add(pK_TeamUserInfo);
            teamUserInfoTable.UniqueConstraints.Add("PK_TeamUserInfo", pK_TeamUserInfo);
            var iX_TeamUserInfo_TeamsId = new TableIndex(
            "IX_TeamUserInfo_TeamsId", teamUserInfoTable, new[] { teamsIdColumn }, false);
            var iX_TeamUserInfo_TeamsIdIx = RelationalModel.GetIndex(this,
                "TeamUserInfo",
                new[] { "TeamsId" });
            iX_TeamUserInfo_TeamsId.MappedIndexes.Add(iX_TeamUserInfo_TeamsIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_TeamUserInfo_TeamsIdIx).Add(iX_TeamUserInfo_TeamsId);
            teamUserInfoTable.Indexes.Add("IX_TeamUserInfo_TeamsId", iX_TeamUserInfo_TeamsId);
            relationalModel.Tables.Add(("TeamUserInfo", null), teamUserInfoTable);
            var teamUserInfoTableMapping = new TableMapping(teamUserInfo, teamUserInfoTable, true);
            teamUserInfoTable.AddTypeMapping(teamUserInfoTableMapping, false);
            tableMappings27.Add(teamUserInfoTableMapping);
            RelationalModel.CreateColumnMapping(membersIdColumn, teamUserInfo.FindProperty("MembersId")!, teamUserInfoTableMapping);
            RelationalModel.CreateColumnMapping(teamsIdColumn, teamUserInfo.FindProperty("TeamsId")!, teamUserInfoTableMapping);
            var fK_AspNetRoleClaims_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetRoleClaims_AspNetRoles_RoleId", aspNetRoleClaimsTable, aspNetRolesTable,
                new[] { roleIdColumn },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Cascade);
            var fK_AspNetRoleClaims_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>",
                new[] { "Id" });
            fK_AspNetRoleClaims_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk).Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRoleClaimsTable.ForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            var fK_AspNetUserClaims_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserClaims_AspNetUsers_UserId", aspNetUserClaimsTable, aspNetUsersTable,
                new[] { userIdColumn3 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserClaims_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>",
                new[] { "UserId" },
                "GZCTF.Models.Data.UserInfo",
                new[] { "Id" });
            fK_AspNetUserClaims_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserClaims_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserClaims_AspNetUsers_UserIdFk).Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUserClaimsTable.ForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            var fK_AspNetUserLogins_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserLogins_AspNetUsers_UserId", aspNetUserLoginsTable, aspNetUsersTable,
                new[] { userIdColumn4 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserLogins_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>",
                new[] { "UserId" },
                "GZCTF.Models.Data.UserInfo",
                new[] { "Id" });
            fK_AspNetUserLogins_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserLogins_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserLogins_AspNetUsers_UserIdFk).Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUserLoginsTable.ForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            var fK_AspNetUserRoles_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetRoles_RoleId", aspNetUserRolesTable, aspNetRolesTable,
                new[] { roleIdColumn0 },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Cascade);
            var fK_AspNetUserRoles_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetRoles_RoleIdFk).Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            var fK_AspNetUserRoles_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetUsers_UserId", aspNetUserRolesTable, aspNetUsersTable,
                new[] { userIdColumn5 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserRoles_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>",
                new[] { "UserId" },
                "GZCTF.Models.Data.UserInfo",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetUsers_UserIdFk).Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            var fK_AspNetUserTokens_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserTokens_AspNetUsers_UserId", aspNetUserTokensTable, aspNetUsersTable,
                new[] { userIdColumn6 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserTokens_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>",
                new[] { "UserId" },
                "GZCTF.Models.Data.UserInfo",
                new[] { "Id" });
            fK_AspNetUserTokens_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserTokens_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserTokens_AspNetUsers_UserIdFk).Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUserTokensTable.ForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            var fK_Attachments_Files_LocalFileId = new ForeignKeyConstraint(
                "FK_Attachments_Files_LocalFileId", attachmentsTable, filesTable,
                new[] { localFileIdColumn },
                filesTable.FindUniqueConstraint("PK_Files")!, ReferentialAction.SetNull);
            var fK_Attachments_Files_LocalFileIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.Attachment",
                new[] { "LocalFileId" },
                "GZCTF.Models.Data.LocalFile",
                new[] { "Id" });
            fK_Attachments_Files_LocalFileId.MappedForeignKeys.Add(fK_Attachments_Files_LocalFileIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Attachments_Files_LocalFileIdFk).Add(fK_Attachments_Files_LocalFileId);
            attachmentsTable.ForeignKeyConstraints.Add(fK_Attachments_Files_LocalFileId);
            filesTable.ReferencingForeignKeyConstraints.Add(fK_Attachments_Files_LocalFileId);
            var fK_CheatInfo_Games_GameId = new ForeignKeyConstraint(
                "FK_CheatInfo_Games_GameId", cheatInfoTable, gamesTable,
                new[] { gameIdColumn },
                gamesTable.FindUniqueConstraint("PK_Games")!, ReferentialAction.Cascade);
            var fK_CheatInfo_Games_GameIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.CheatInfo",
                new[] { "GameId" },
                "GZCTF.Models.Data.Game",
                new[] { "Id" });
            fK_CheatInfo_Games_GameId.MappedForeignKeys.Add(fK_CheatInfo_Games_GameIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CheatInfo_Games_GameIdFk).Add(fK_CheatInfo_Games_GameId);
            cheatInfoTable.ForeignKeyConstraints.Add(fK_CheatInfo_Games_GameId);
            gamesTable.ReferencingForeignKeyConstraints.Add(fK_CheatInfo_Games_GameId);
            var fK_CheatInfo_Participations_SourceTeamId = new ForeignKeyConstraint(
                "FK_CheatInfo_Participations_SourceTeamId", cheatInfoTable, participationsTable,
                new[] { sourceTeamIdColumn },
                participationsTable.FindUniqueConstraint("PK_Participations")!, ReferentialAction.Cascade);
            var fK_CheatInfo_Participations_SourceTeamIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.CheatInfo",
                new[] { "SourceTeamId" },
                "GZCTF.Models.Data.Participation",
                new[] { "Id" });
            fK_CheatInfo_Participations_SourceTeamId.MappedForeignKeys.Add(fK_CheatInfo_Participations_SourceTeamIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CheatInfo_Participations_SourceTeamIdFk).Add(fK_CheatInfo_Participations_SourceTeamId);
            cheatInfoTable.ForeignKeyConstraints.Add(fK_CheatInfo_Participations_SourceTeamId);
            participationsTable.ReferencingForeignKeyConstraints.Add(fK_CheatInfo_Participations_SourceTeamId);
            var fK_CheatInfo_Participations_SubmitTeamId = new ForeignKeyConstraint(
                "FK_CheatInfo_Participations_SubmitTeamId", cheatInfoTable, participationsTable,
                new[] { submitTeamIdColumn },
                participationsTable.FindUniqueConstraint("PK_Participations")!, ReferentialAction.Cascade);
            var fK_CheatInfo_Participations_SubmitTeamIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.CheatInfo",
                new[] { "SubmitTeamId" },
                "GZCTF.Models.Data.Participation",
                new[] { "Id" });
            fK_CheatInfo_Participations_SubmitTeamId.MappedForeignKeys.Add(fK_CheatInfo_Participations_SubmitTeamIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CheatInfo_Participations_SubmitTeamIdFk).Add(fK_CheatInfo_Participations_SubmitTeamId);
            cheatInfoTable.ForeignKeyConstraints.Add(fK_CheatInfo_Participations_SubmitTeamId);
            participationsTable.ReferencingForeignKeyConstraints.Add(fK_CheatInfo_Participations_SubmitTeamId);
            var fK_CheatInfo_Submissions_SubmissionId = new ForeignKeyConstraint(
                "FK_CheatInfo_Submissions_SubmissionId", cheatInfoTable, submissionsTable,
                new[] { submissionIdColumn },
                submissionsTable.FindUniqueConstraint("PK_Submissions")!, ReferentialAction.Cascade);
            var fK_CheatInfo_Submissions_SubmissionIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.CheatInfo",
                new[] { "SubmissionId" },
                "GZCTF.Models.Data.Submission",
                new[] { "Id" });
            fK_CheatInfo_Submissions_SubmissionId.MappedForeignKeys.Add(fK_CheatInfo_Submissions_SubmissionIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CheatInfo_Submissions_SubmissionIdFk).Add(fK_CheatInfo_Submissions_SubmissionId);
            cheatInfoTable.ForeignKeyConstraints.Add(fK_CheatInfo_Submissions_SubmissionId);
            submissionsTable.ReferencingForeignKeyConstraints.Add(fK_CheatInfo_Submissions_SubmissionId);
            var fK_ExerciseChallenges_Attachments_AttachmentId = new ForeignKeyConstraint(
                "FK_ExerciseChallenges_Attachments_AttachmentId", exerciseChallengesTable, attachmentsTable,
                new[] { attachmentIdColumn },
                attachmentsTable.FindUniqueConstraint("PK_Attachments")!, ReferentialAction.SetNull);
            var fK_ExerciseChallenges_Attachments_AttachmentIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.ExerciseChallenge",
                new[] { "AttachmentId" },
                "GZCTF.Models.Data.Attachment",
                new[] { "Id" });
            fK_ExerciseChallenges_Attachments_AttachmentId.MappedForeignKeys.Add(fK_ExerciseChallenges_Attachments_AttachmentIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ExerciseChallenges_Attachments_AttachmentIdFk).Add(fK_ExerciseChallenges_Attachments_AttachmentId);
            exerciseChallengesTable.ForeignKeyConstraints.Add(fK_ExerciseChallenges_Attachments_AttachmentId);
            attachmentsTable.ReferencingForeignKeyConstraints.Add(fK_ExerciseChallenges_Attachments_AttachmentId);
            var fK_ExerciseChallenges_Containers_TestContainerId = new ForeignKeyConstraint(
                "FK_ExerciseChallenges_Containers_TestContainerId", exerciseChallengesTable, containersTable,
                new[] { testContainerIdColumn },
                containersTable.FindUniqueConstraint("PK_Containers")!, ReferentialAction.SetNull);
            var fK_ExerciseChallenges_Containers_TestContainerIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.ExerciseChallenge",
                new[] { "TestContainerId" },
                "GZCTF.Models.Data.Container",
                new[] { "Id" });
            fK_ExerciseChallenges_Containers_TestContainerId.MappedForeignKeys.Add(fK_ExerciseChallenges_Containers_TestContainerIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ExerciseChallenges_Containers_TestContainerIdFk).Add(fK_ExerciseChallenges_Containers_TestContainerId);
            exerciseChallengesTable.ForeignKeyConstraints.Add(fK_ExerciseChallenges_Containers_TestContainerId);
            containersTable.ReferencingForeignKeyConstraints.Add(fK_ExerciseChallenges_Containers_TestContainerId);
            var fK_ExerciseDependencies_ExerciseChallenges_SourceId = new ForeignKeyConstraint(
                "FK_ExerciseDependencies_ExerciseChallenges_SourceId", exerciseDependenciesTable, exerciseChallengesTable,
                new[] { sourceIdColumn },
                exerciseChallengesTable.FindUniqueConstraint("PK_ExerciseChallenges")!, ReferentialAction.Cascade);
            var fK_ExerciseDependencies_ExerciseChallenges_SourceIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.ExerciseDependency",
                new[] { "SourceId" },
                "GZCTF.Models.Data.ExerciseChallenge",
                new[] { "Id" });
            fK_ExerciseDependencies_ExerciseChallenges_SourceId.MappedForeignKeys.Add(fK_ExerciseDependencies_ExerciseChallenges_SourceIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ExerciseDependencies_ExerciseChallenges_SourceIdFk).Add(fK_ExerciseDependencies_ExerciseChallenges_SourceId);
            exerciseDependenciesTable.ForeignKeyConstraints.Add(fK_ExerciseDependencies_ExerciseChallenges_SourceId);
            exerciseChallengesTable.ReferencingForeignKeyConstraints.Add(fK_ExerciseDependencies_ExerciseChallenges_SourceId);
            var fK_ExerciseDependencies_ExerciseChallenges_TargetId = new ForeignKeyConstraint(
                "FK_ExerciseDependencies_ExerciseChallenges_TargetId", exerciseDependenciesTable, exerciseChallengesTable,
                new[] { targetIdColumn },
                exerciseChallengesTable.FindUniqueConstraint("PK_ExerciseChallenges")!, ReferentialAction.Cascade);
            var fK_ExerciseDependencies_ExerciseChallenges_TargetIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.ExerciseDependency",
                new[] { "TargetId" },
                "GZCTF.Models.Data.ExerciseChallenge",
                new[] { "Id" });
            fK_ExerciseDependencies_ExerciseChallenges_TargetId.MappedForeignKeys.Add(fK_ExerciseDependencies_ExerciseChallenges_TargetIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ExerciseDependencies_ExerciseChallenges_TargetIdFk).Add(fK_ExerciseDependencies_ExerciseChallenges_TargetId);
            exerciseDependenciesTable.ForeignKeyConstraints.Add(fK_ExerciseDependencies_ExerciseChallenges_TargetId);
            exerciseChallengesTable.ReferencingForeignKeyConstraints.Add(fK_ExerciseDependencies_ExerciseChallenges_TargetId);
            var fK_ExerciseInstances_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_ExerciseInstances_AspNetUsers_UserId", exerciseInstancesTable, aspNetUsersTable,
                new[] { userIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_ExerciseInstances_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.ExerciseInstance",
                new[] { "UserId" },
                "GZCTF.Models.Data.UserInfo",
                new[] { "Id" });
            fK_ExerciseInstances_AspNetUsers_UserId.MappedForeignKeys.Add(fK_ExerciseInstances_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ExerciseInstances_AspNetUsers_UserIdFk).Add(fK_ExerciseInstances_AspNetUsers_UserId);
            exerciseInstancesTable.ForeignKeyConstraints.Add(fK_ExerciseInstances_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_ExerciseInstances_AspNetUsers_UserId);
            var fK_ExerciseInstances_Containers_ContainerId = new ForeignKeyConstraint(
                "FK_ExerciseInstances_Containers_ContainerId", exerciseInstancesTable, containersTable,
                new[] { containerIdColumn0 },
                containersTable.FindUniqueConstraint("PK_Containers")!, ReferentialAction.SetNull);
            var fK_ExerciseInstances_Containers_ContainerIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.ExerciseInstance",
                new[] { "ContainerId" },
                "GZCTF.Models.Data.Container",
                new[] { "Id" });
            fK_ExerciseInstances_Containers_ContainerId.MappedForeignKeys.Add(fK_ExerciseInstances_Containers_ContainerIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ExerciseInstances_Containers_ContainerIdFk).Add(fK_ExerciseInstances_Containers_ContainerId);
            exerciseInstancesTable.ForeignKeyConstraints.Add(fK_ExerciseInstances_Containers_ContainerId);
            containersTable.ReferencingForeignKeyConstraints.Add(fK_ExerciseInstances_Containers_ContainerId);
            var fK_ExerciseInstances_ExerciseChallenges_ExerciseId = new ForeignKeyConstraint(
                "FK_ExerciseInstances_ExerciseChallenges_ExerciseId", exerciseInstancesTable, exerciseChallengesTable,
                new[] { exerciseIdColumn },
                exerciseChallengesTable.FindUniqueConstraint("PK_ExerciseChallenges")!, ReferentialAction.Cascade);
            var fK_ExerciseInstances_ExerciseChallenges_ExerciseIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.ExerciseInstance",
                new[] { "ExerciseId" },
                "GZCTF.Models.Data.ExerciseChallenge",
                new[] { "Id" });
            fK_ExerciseInstances_ExerciseChallenges_ExerciseId.MappedForeignKeys.Add(fK_ExerciseInstances_ExerciseChallenges_ExerciseIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ExerciseInstances_ExerciseChallenges_ExerciseIdFk).Add(fK_ExerciseInstances_ExerciseChallenges_ExerciseId);
            exerciseInstancesTable.ForeignKeyConstraints.Add(fK_ExerciseInstances_ExerciseChallenges_ExerciseId);
            exerciseChallengesTable.ReferencingForeignKeyConstraints.Add(fK_ExerciseInstances_ExerciseChallenges_ExerciseId);
            var fK_ExerciseInstances_FlagContexts_FlagId = new ForeignKeyConstraint(
                "FK_ExerciseInstances_FlagContexts_FlagId", exerciseInstancesTable, flagContextsTable,
                new[] { flagIdColumn },
                flagContextsTable.FindUniqueConstraint("PK_FlagContexts")!, ReferentialAction.SetNull);
            var fK_ExerciseInstances_FlagContexts_FlagIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.ExerciseInstance",
                new[] { "FlagId" },
                "GZCTF.Models.Data.FlagContext",
                new[] { "Id" });
            fK_ExerciseInstances_FlagContexts_FlagId.MappedForeignKeys.Add(fK_ExerciseInstances_FlagContexts_FlagIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ExerciseInstances_FlagContexts_FlagIdFk).Add(fK_ExerciseInstances_FlagContexts_FlagId);
            exerciseInstancesTable.ForeignKeyConstraints.Add(fK_ExerciseInstances_FlagContexts_FlagId);
            flagContextsTable.ReferencingForeignKeyConstraints.Add(fK_ExerciseInstances_FlagContexts_FlagId);
            var fK_FlagContexts_Attachments_AttachmentId = new ForeignKeyConstraint(
                "FK_FlagContexts_Attachments_AttachmentId", flagContextsTable, attachmentsTable,
                new[] { attachmentIdColumn0 },
                attachmentsTable.FindUniqueConstraint("PK_Attachments")!, ReferentialAction.SetNull);
            var fK_FlagContexts_Attachments_AttachmentIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.FlagContext",
                new[] { "AttachmentId" },
                "GZCTF.Models.Data.Attachment",
                new[] { "Id" });
            fK_FlagContexts_Attachments_AttachmentId.MappedForeignKeys.Add(fK_FlagContexts_Attachments_AttachmentIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_FlagContexts_Attachments_AttachmentIdFk).Add(fK_FlagContexts_Attachments_AttachmentId);
            flagContextsTable.ForeignKeyConstraints.Add(fK_FlagContexts_Attachments_AttachmentId);
            attachmentsTable.ReferencingForeignKeyConstraints.Add(fK_FlagContexts_Attachments_AttachmentId);
            var fK_FlagContexts_ExerciseChallenges_ExerciseId = new ForeignKeyConstraint(
                "FK_FlagContexts_ExerciseChallenges_ExerciseId", flagContextsTable, exerciseChallengesTable,
                new[] { exerciseIdColumn0 },
                exerciseChallengesTable.FindUniqueConstraint("PK_ExerciseChallenges")!, ReferentialAction.NoAction);
            var fK_FlagContexts_ExerciseChallenges_ExerciseIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.FlagContext",
                new[] { "ExerciseId" },
                "GZCTF.Models.Data.ExerciseChallenge",
                new[] { "Id" });
            fK_FlagContexts_ExerciseChallenges_ExerciseId.MappedForeignKeys.Add(fK_FlagContexts_ExerciseChallenges_ExerciseIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_FlagContexts_ExerciseChallenges_ExerciseIdFk).Add(fK_FlagContexts_ExerciseChallenges_ExerciseId);
            flagContextsTable.ForeignKeyConstraints.Add(fK_FlagContexts_ExerciseChallenges_ExerciseId);
            exerciseChallengesTable.ReferencingForeignKeyConstraints.Add(fK_FlagContexts_ExerciseChallenges_ExerciseId);
            var fK_FlagContexts_GameChallenges_ChallengeId = new ForeignKeyConstraint(
                "FK_FlagContexts_GameChallenges_ChallengeId", flagContextsTable, gameChallengesTable,
                new[] { challengeIdColumn },
                gameChallengesTable.FindUniqueConstraint("PK_GameChallenges")!, ReferentialAction.NoAction);
            var fK_FlagContexts_GameChallenges_ChallengeIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.FlagContext",
                new[] { "ChallengeId" },
                "GZCTF.Models.Data.GameChallenge",
                new[] { "Id" });
            fK_FlagContexts_GameChallenges_ChallengeId.MappedForeignKeys.Add(fK_FlagContexts_GameChallenges_ChallengeIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_FlagContexts_GameChallenges_ChallengeIdFk).Add(fK_FlagContexts_GameChallenges_ChallengeId);
            flagContextsTable.ForeignKeyConstraints.Add(fK_FlagContexts_GameChallenges_ChallengeId);
            gameChallengesTable.ReferencingForeignKeyConstraints.Add(fK_FlagContexts_GameChallenges_ChallengeId);
            var fK_GameChallenges_Attachments_AttachmentId = new ForeignKeyConstraint(
                "FK_GameChallenges_Attachments_AttachmentId", gameChallengesTable, attachmentsTable,
                new[] { attachmentIdColumn1 },
                attachmentsTable.FindUniqueConstraint("PK_Attachments")!, ReferentialAction.SetNull);
            var fK_GameChallenges_Attachments_AttachmentIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.GameChallenge",
                new[] { "AttachmentId" },
                "GZCTF.Models.Data.Attachment",
                new[] { "Id" });
            fK_GameChallenges_Attachments_AttachmentId.MappedForeignKeys.Add(fK_GameChallenges_Attachments_AttachmentIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GameChallenges_Attachments_AttachmentIdFk).Add(fK_GameChallenges_Attachments_AttachmentId);
            gameChallengesTable.ForeignKeyConstraints.Add(fK_GameChallenges_Attachments_AttachmentId);
            attachmentsTable.ReferencingForeignKeyConstraints.Add(fK_GameChallenges_Attachments_AttachmentId);
            var fK_GameChallenges_Containers_TestContainerId = new ForeignKeyConstraint(
                "FK_GameChallenges_Containers_TestContainerId", gameChallengesTable, containersTable,
                new[] { testContainerIdColumn0 },
                containersTable.FindUniqueConstraint("PK_Containers")!, ReferentialAction.SetNull);
            var fK_GameChallenges_Containers_TestContainerIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.GameChallenge",
                new[] { "TestContainerId" },
                "GZCTF.Models.Data.Container",
                new[] { "Id" });
            fK_GameChallenges_Containers_TestContainerId.MappedForeignKeys.Add(fK_GameChallenges_Containers_TestContainerIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GameChallenges_Containers_TestContainerIdFk).Add(fK_GameChallenges_Containers_TestContainerId);
            gameChallengesTable.ForeignKeyConstraints.Add(fK_GameChallenges_Containers_TestContainerId);
            containersTable.ReferencingForeignKeyConstraints.Add(fK_GameChallenges_Containers_TestContainerId);
            var fK_GameChallenges_Games_GameId = new ForeignKeyConstraint(
                "FK_GameChallenges_Games_GameId", gameChallengesTable, gamesTable,
                new[] { gameIdColumn0 },
                gamesTable.FindUniqueConstraint("PK_Games")!, ReferentialAction.Cascade);
            var fK_GameChallenges_Games_GameIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.GameChallenge",
                new[] { "GameId" },
                "GZCTF.Models.Data.Game",
                new[] { "Id" });
            fK_GameChallenges_Games_GameId.MappedForeignKeys.Add(fK_GameChallenges_Games_GameIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GameChallenges_Games_GameIdFk).Add(fK_GameChallenges_Games_GameId);
            gameChallengesTable.ForeignKeyConstraints.Add(fK_GameChallenges_Games_GameId);
            gamesTable.ReferencingForeignKeyConstraints.Add(fK_GameChallenges_Games_GameId);
            var fK_GameEvents_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_GameEvents_AspNetUsers_UserId", gameEventsTable, aspNetUsersTable,
                new[] { userIdColumn0 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.NoAction);
            var fK_GameEvents_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.GameEvent",
                new[] { "UserId" },
                "GZCTF.Models.Data.UserInfo",
                new[] { "Id" });
            fK_GameEvents_AspNetUsers_UserId.MappedForeignKeys.Add(fK_GameEvents_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GameEvents_AspNetUsers_UserIdFk).Add(fK_GameEvents_AspNetUsers_UserId);
            gameEventsTable.ForeignKeyConstraints.Add(fK_GameEvents_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_GameEvents_AspNetUsers_UserId);
            var fK_GameEvents_Games_GameId = new ForeignKeyConstraint(
                "FK_GameEvents_Games_GameId", gameEventsTable, gamesTable,
                new[] { gameIdColumn1 },
                gamesTable.FindUniqueConstraint("PK_Games")!, ReferentialAction.Cascade);
            var fK_GameEvents_Games_GameIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.GameEvent",
                new[] { "GameId" },
                "GZCTF.Models.Data.Game",
                new[] { "Id" });
            fK_GameEvents_Games_GameId.MappedForeignKeys.Add(fK_GameEvents_Games_GameIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GameEvents_Games_GameIdFk).Add(fK_GameEvents_Games_GameId);
            gameEventsTable.ForeignKeyConstraints.Add(fK_GameEvents_Games_GameId);
            gamesTable.ReferencingForeignKeyConstraints.Add(fK_GameEvents_Games_GameId);
            var fK_GameEvents_Teams_TeamId = new ForeignKeyConstraint(
                "FK_GameEvents_Teams_TeamId", gameEventsTable, teamsTable,
                new[] { teamIdColumn },
                teamsTable.FindUniqueConstraint("PK_Teams")!, ReferentialAction.Cascade);
            var fK_GameEvents_Teams_TeamIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.GameEvent",
                new[] { "TeamId" },
                "GZCTF.Models.Data.Team",
                new[] { "Id" });
            fK_GameEvents_Teams_TeamId.MappedForeignKeys.Add(fK_GameEvents_Teams_TeamIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GameEvents_Teams_TeamIdFk).Add(fK_GameEvents_Teams_TeamId);
            gameEventsTable.ForeignKeyConstraints.Add(fK_GameEvents_Teams_TeamId);
            teamsTable.ReferencingForeignKeyConstraints.Add(fK_GameEvents_Teams_TeamId);
            var fK_GameInstances_Containers_ContainerId = new ForeignKeyConstraint(
                "FK_GameInstances_Containers_ContainerId", gameInstancesTable, containersTable,
                new[] { containerIdColumn1 },
                containersTable.FindUniqueConstraint("PK_Containers")!, ReferentialAction.SetNull);
            var fK_GameInstances_Containers_ContainerIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.GameInstance",
                new[] { "ContainerId" },
                "GZCTF.Models.Data.Container",
                new[] { "Id" });
            fK_GameInstances_Containers_ContainerId.MappedForeignKeys.Add(fK_GameInstances_Containers_ContainerIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GameInstances_Containers_ContainerIdFk).Add(fK_GameInstances_Containers_ContainerId);
            gameInstancesTable.ForeignKeyConstraints.Add(fK_GameInstances_Containers_ContainerId);
            containersTable.ReferencingForeignKeyConstraints.Add(fK_GameInstances_Containers_ContainerId);
            var fK_GameInstances_FlagContexts_FlagId = new ForeignKeyConstraint(
                "FK_GameInstances_FlagContexts_FlagId", gameInstancesTable, flagContextsTable,
                new[] { flagIdColumn0 },
                flagContextsTable.FindUniqueConstraint("PK_FlagContexts")!, ReferentialAction.SetNull);
            var fK_GameInstances_FlagContexts_FlagIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.GameInstance",
                new[] { "FlagId" },
                "GZCTF.Models.Data.FlagContext",
                new[] { "Id" });
            fK_GameInstances_FlagContexts_FlagId.MappedForeignKeys.Add(fK_GameInstances_FlagContexts_FlagIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GameInstances_FlagContexts_FlagIdFk).Add(fK_GameInstances_FlagContexts_FlagId);
            gameInstancesTable.ForeignKeyConstraints.Add(fK_GameInstances_FlagContexts_FlagId);
            flagContextsTable.ReferencingForeignKeyConstraints.Add(fK_GameInstances_FlagContexts_FlagId);
            var fK_GameInstances_GameChallenges_ChallengeId = new ForeignKeyConstraint(
                "FK_GameInstances_GameChallenges_ChallengeId", gameInstancesTable, gameChallengesTable,
                new[] { challengeIdColumn0 },
                gameChallengesTable.FindUniqueConstraint("PK_GameChallenges")!, ReferentialAction.Cascade);
            var fK_GameInstances_GameChallenges_ChallengeIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.GameInstance",
                new[] { "ChallengeId" },
                "GZCTF.Models.Data.GameChallenge",
                new[] { "Id" });
            fK_GameInstances_GameChallenges_ChallengeId.MappedForeignKeys.Add(fK_GameInstances_GameChallenges_ChallengeIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GameInstances_GameChallenges_ChallengeIdFk).Add(fK_GameInstances_GameChallenges_ChallengeId);
            gameInstancesTable.ForeignKeyConstraints.Add(fK_GameInstances_GameChallenges_ChallengeId);
            gameChallengesTable.ReferencingForeignKeyConstraints.Add(fK_GameInstances_GameChallenges_ChallengeId);
            var fK_GameInstances_Participations_ParticipationId = new ForeignKeyConstraint(
                "FK_GameInstances_Participations_ParticipationId", gameInstancesTable, participationsTable,
                new[] { participationIdColumn },
                participationsTable.FindUniqueConstraint("PK_Participations")!, ReferentialAction.Cascade);
            var fK_GameInstances_Participations_ParticipationIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.GameInstance",
                new[] { "ParticipationId" },
                "GZCTF.Models.Data.Participation",
                new[] { "Id" });
            fK_GameInstances_Participations_ParticipationId.MappedForeignKeys.Add(fK_GameInstances_Participations_ParticipationIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GameInstances_Participations_ParticipationIdFk).Add(fK_GameInstances_Participations_ParticipationId);
            gameInstancesTable.ForeignKeyConstraints.Add(fK_GameInstances_Participations_ParticipationId);
            participationsTable.ReferencingForeignKeyConstraints.Add(fK_GameInstances_Participations_ParticipationId);
            var fK_GameNotices_Games_GameId = new ForeignKeyConstraint(
                "FK_GameNotices_Games_GameId", gameNoticesTable, gamesTable,
                new[] { gameIdColumn2 },
                gamesTable.FindUniqueConstraint("PK_Games")!, ReferentialAction.Cascade);
            var fK_GameNotices_Games_GameIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.GameNotice",
                new[] { "GameId" },
                "GZCTF.Models.Data.Game",
                new[] { "Id" });
            fK_GameNotices_Games_GameId.MappedForeignKeys.Add(fK_GameNotices_Games_GameIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GameNotices_Games_GameIdFk).Add(fK_GameNotices_Games_GameId);
            gameNoticesTable.ForeignKeyConstraints.Add(fK_GameNotices_Games_GameId);
            gamesTable.ReferencingForeignKeyConstraints.Add(fK_GameNotices_Games_GameId);
            var fK_Participations_Files_WriteupId = new ForeignKeyConstraint(
                "FK_Participations_Files_WriteupId", participationsTable, filesTable,
                new[] { writeupIdColumn },
                filesTable.FindUniqueConstraint("PK_Files")!, ReferentialAction.NoAction);
            var fK_Participations_Files_WriteupIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.Participation",
                new[] { "WriteupId" },
                "GZCTF.Models.Data.LocalFile",
                new[] { "Id" });
            fK_Participations_Files_WriteupId.MappedForeignKeys.Add(fK_Participations_Files_WriteupIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Participations_Files_WriteupIdFk).Add(fK_Participations_Files_WriteupId);
            participationsTable.ForeignKeyConstraints.Add(fK_Participations_Files_WriteupId);
            filesTable.ReferencingForeignKeyConstraints.Add(fK_Participations_Files_WriteupId);
            var fK_Participations_Games_GameId = new ForeignKeyConstraint(
                "FK_Participations_Games_GameId", participationsTable, gamesTable,
                new[] { gameIdColumn3 },
                gamesTable.FindUniqueConstraint("PK_Games")!, ReferentialAction.Cascade);
            var fK_Participations_Games_GameIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.Participation",
                new[] { "GameId" },
                "GZCTF.Models.Data.Game",
                new[] { "Id" });
            fK_Participations_Games_GameId.MappedForeignKeys.Add(fK_Participations_Games_GameIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Participations_Games_GameIdFk).Add(fK_Participations_Games_GameId);
            participationsTable.ForeignKeyConstraints.Add(fK_Participations_Games_GameId);
            gamesTable.ReferencingForeignKeyConstraints.Add(fK_Participations_Games_GameId);
            var fK_Participations_Teams_TeamId = new ForeignKeyConstraint(
                "FK_Participations_Teams_TeamId", participationsTable, teamsTable,
                new[] { teamIdColumn0 },
                teamsTable.FindUniqueConstraint("PK_Teams")!, ReferentialAction.Cascade);
            var fK_Participations_Teams_TeamIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.Participation",
                new[] { "TeamId" },
                "GZCTF.Models.Data.Team",
                new[] { "Id" });
            fK_Participations_Teams_TeamId.MappedForeignKeys.Add(fK_Participations_Teams_TeamIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Participations_Teams_TeamIdFk).Add(fK_Participations_Teams_TeamId);
            participationsTable.ForeignKeyConstraints.Add(fK_Participations_Teams_TeamId);
            teamsTable.ReferencingForeignKeyConstraints.Add(fK_Participations_Teams_TeamId);
            var fK_Posts_AspNetUsers_AuthorId = new ForeignKeyConstraint(
                "FK_Posts_AspNetUsers_AuthorId", postsTable, aspNetUsersTable,
                new[] { authorIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.SetNull);
            var fK_Posts_AspNetUsers_AuthorIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.Post",
                new[] { "AuthorId" },
                "GZCTF.Models.Data.UserInfo",
                new[] { "Id" });
            fK_Posts_AspNetUsers_AuthorId.MappedForeignKeys.Add(fK_Posts_AspNetUsers_AuthorIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Posts_AspNetUsers_AuthorIdFk).Add(fK_Posts_AspNetUsers_AuthorId);
            postsTable.ForeignKeyConstraints.Add(fK_Posts_AspNetUsers_AuthorId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_Posts_AspNetUsers_AuthorId);
            var fK_Submissions_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_Submissions_AspNetUsers_UserId", submissionsTable, aspNetUsersTable,
                new[] { userIdColumn1 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.SetNull);
            var fK_Submissions_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.Submission",
                new[] { "UserId" },
                "GZCTF.Models.Data.UserInfo",
                new[] { "Id" });
            fK_Submissions_AspNetUsers_UserId.MappedForeignKeys.Add(fK_Submissions_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Submissions_AspNetUsers_UserIdFk).Add(fK_Submissions_AspNetUsers_UserId);
            submissionsTable.ForeignKeyConstraints.Add(fK_Submissions_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_Submissions_AspNetUsers_UserId);
            var fK_Submissions_GameChallenges_ChallengeId = new ForeignKeyConstraint(
                "FK_Submissions_GameChallenges_ChallengeId", submissionsTable, gameChallengesTable,
                new[] { challengeIdColumn1 },
                gameChallengesTable.FindUniqueConstraint("PK_GameChallenges")!, ReferentialAction.Cascade);
            var fK_Submissions_GameChallenges_ChallengeIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.Submission",
                new[] { "ChallengeId" },
                "GZCTF.Models.Data.GameChallenge",
                new[] { "Id" });
            fK_Submissions_GameChallenges_ChallengeId.MappedForeignKeys.Add(fK_Submissions_GameChallenges_ChallengeIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Submissions_GameChallenges_ChallengeIdFk).Add(fK_Submissions_GameChallenges_ChallengeId);
            submissionsTable.ForeignKeyConstraints.Add(fK_Submissions_GameChallenges_ChallengeId);
            gameChallengesTable.ReferencingForeignKeyConstraints.Add(fK_Submissions_GameChallenges_ChallengeId);
            var fK_Submissions_Games_GameId = new ForeignKeyConstraint(
                "FK_Submissions_Games_GameId", submissionsTable, gamesTable,
                new[] { gameIdColumn4 },
                gamesTable.FindUniqueConstraint("PK_Games")!, ReferentialAction.Cascade);
            var fK_Submissions_Games_GameIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.Submission",
                new[] { "GameId" },
                "GZCTF.Models.Data.Game",
                new[] { "Id" });
            fK_Submissions_Games_GameId.MappedForeignKeys.Add(fK_Submissions_Games_GameIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Submissions_Games_GameIdFk).Add(fK_Submissions_Games_GameId);
            submissionsTable.ForeignKeyConstraints.Add(fK_Submissions_Games_GameId);
            gamesTable.ReferencingForeignKeyConstraints.Add(fK_Submissions_Games_GameId);
            var fK_Submissions_Participations_ParticipationId = new ForeignKeyConstraint(
                "FK_Submissions_Participations_ParticipationId", submissionsTable, participationsTable,
                new[] { participationIdColumn0 },
                participationsTable.FindUniqueConstraint("PK_Participations")!, ReferentialAction.Cascade);
            var fK_Submissions_Participations_ParticipationIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.Submission",
                new[] { "ParticipationId" },
                "GZCTF.Models.Data.Participation",
                new[] { "Id" });
            fK_Submissions_Participations_ParticipationId.MappedForeignKeys.Add(fK_Submissions_Participations_ParticipationIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Submissions_Participations_ParticipationIdFk).Add(fK_Submissions_Participations_ParticipationId);
            submissionsTable.ForeignKeyConstraints.Add(fK_Submissions_Participations_ParticipationId);
            participationsTable.ReferencingForeignKeyConstraints.Add(fK_Submissions_Participations_ParticipationId);
            var fK_Submissions_Teams_TeamId = new ForeignKeyConstraint(
                "FK_Submissions_Teams_TeamId", submissionsTable, teamsTable,
                new[] { teamIdColumn1 },
                teamsTable.FindUniqueConstraint("PK_Teams")!, ReferentialAction.Cascade);
            var fK_Submissions_Teams_TeamIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.Submission",
                new[] { "TeamId" },
                "GZCTF.Models.Data.Team",
                new[] { "Id" });
            fK_Submissions_Teams_TeamId.MappedForeignKeys.Add(fK_Submissions_Teams_TeamIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Submissions_Teams_TeamIdFk).Add(fK_Submissions_Teams_TeamId);
            submissionsTable.ForeignKeyConstraints.Add(fK_Submissions_Teams_TeamId);
            teamsTable.ReferencingForeignKeyConstraints.Add(fK_Submissions_Teams_TeamId);
            var fK_Teams_AspNetUsers_CaptainId = new ForeignKeyConstraint(
                "FK_Teams_AspNetUsers_CaptainId", teamsTable, aspNetUsersTable,
                new[] { captainIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_Teams_AspNetUsers_CaptainIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.Team",
                new[] { "CaptainId" },
                "GZCTF.Models.Data.UserInfo",
                new[] { "Id" });
            fK_Teams_AspNetUsers_CaptainId.MappedForeignKeys.Add(fK_Teams_AspNetUsers_CaptainIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Teams_AspNetUsers_CaptainIdFk).Add(fK_Teams_AspNetUsers_CaptainId);
            teamsTable.ForeignKeyConstraints.Add(fK_Teams_AspNetUsers_CaptainId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_Teams_AspNetUsers_CaptainId);
            var fK_TeamUserInfo_AspNetUsers_MembersId = new ForeignKeyConstraint(
                "FK_TeamUserInfo_AspNetUsers_MembersId", teamUserInfoTable, aspNetUsersTable,
                new[] { membersIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_TeamUserInfo_AspNetUsers_MembersIdFk = RelationalModel.GetForeignKey(this,
                "TeamUserInfo",
                new[] { "MembersId" },
                "GZCTF.Models.Data.UserInfo",
                new[] { "Id" });
            fK_TeamUserInfo_AspNetUsers_MembersId.MappedForeignKeys.Add(fK_TeamUserInfo_AspNetUsers_MembersIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_TeamUserInfo_AspNetUsers_MembersIdFk).Add(fK_TeamUserInfo_AspNetUsers_MembersId);
            teamUserInfoTable.ForeignKeyConstraints.Add(fK_TeamUserInfo_AspNetUsers_MembersId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_TeamUserInfo_AspNetUsers_MembersId);
            var fK_TeamUserInfo_Teams_TeamsId = new ForeignKeyConstraint(
                "FK_TeamUserInfo_Teams_TeamsId", teamUserInfoTable, teamsTable,
                new[] { teamsIdColumn },
                teamsTable.FindUniqueConstraint("PK_Teams")!, ReferentialAction.Cascade);
            var fK_TeamUserInfo_Teams_TeamsIdFk = RelationalModel.GetForeignKey(this,
                "TeamUserInfo",
                new[] { "TeamsId" },
                "GZCTF.Models.Data.Team",
                new[] { "Id" });
            fK_TeamUserInfo_Teams_TeamsId.MappedForeignKeys.Add(fK_TeamUserInfo_Teams_TeamsIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_TeamUserInfo_Teams_TeamsIdFk).Add(fK_TeamUserInfo_Teams_TeamsId);
            teamUserInfoTable.ForeignKeyConstraints.Add(fK_TeamUserInfo_Teams_TeamsId);
            teamsTable.ReferencingForeignKeyConstraints.Add(fK_TeamUserInfo_Teams_TeamsId);
            var fK_UserParticipations_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_UserParticipations_AspNetUsers_UserId", userParticipationsTable, aspNetUsersTable,
                new[] { userIdColumn2 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_UserParticipations_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.UserParticipation",
                new[] { "UserId" },
                "GZCTF.Models.Data.UserInfo",
                new[] { "Id" });
            fK_UserParticipations_AspNetUsers_UserId.MappedForeignKeys.Add(fK_UserParticipations_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_UserParticipations_AspNetUsers_UserIdFk).Add(fK_UserParticipations_AspNetUsers_UserId);
            userParticipationsTable.ForeignKeyConstraints.Add(fK_UserParticipations_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_UserParticipations_AspNetUsers_UserId);
            var fK_UserParticipations_Games_GameId = new ForeignKeyConstraint(
                "FK_UserParticipations_Games_GameId", userParticipationsTable, gamesTable,
                new[] { gameIdColumn5 },
                gamesTable.FindUniqueConstraint("PK_Games")!, ReferentialAction.Cascade);
            var fK_UserParticipations_Games_GameIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.UserParticipation",
                new[] { "GameId" },
                "GZCTF.Models.Data.Game",
                new[] { "Id" });
            fK_UserParticipations_Games_GameId.MappedForeignKeys.Add(fK_UserParticipations_Games_GameIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_UserParticipations_Games_GameIdFk).Add(fK_UserParticipations_Games_GameId);
            userParticipationsTable.ForeignKeyConstraints.Add(fK_UserParticipations_Games_GameId);
            gamesTable.ReferencingForeignKeyConstraints.Add(fK_UserParticipations_Games_GameId);
            var fK_UserParticipations_Participations_ParticipationId = new ForeignKeyConstraint(
                "FK_UserParticipations_Participations_ParticipationId", userParticipationsTable, participationsTable,
                new[] { participationIdColumn1 },
                participationsTable.FindUniqueConstraint("PK_Participations")!, ReferentialAction.Cascade);
            var fK_UserParticipations_Participations_ParticipationIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.UserParticipation",
                new[] { "ParticipationId" },
                "GZCTF.Models.Data.Participation",
                new[] { "Id" });
            fK_UserParticipations_Participations_ParticipationId.MappedForeignKeys.Add(fK_UserParticipations_Participations_ParticipationIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_UserParticipations_Participations_ParticipationIdFk).Add(fK_UserParticipations_Participations_ParticipationId);
            userParticipationsTable.ForeignKeyConstraints.Add(fK_UserParticipations_Participations_ParticipationId);
            participationsTable.ReferencingForeignKeyConstraints.Add(fK_UserParticipations_Participations_ParticipationId);
            var fK_UserParticipations_Teams_TeamId = new ForeignKeyConstraint(
                "FK_UserParticipations_Teams_TeamId", userParticipationsTable, teamsTable,
                new[] { teamIdColumn2 },
                teamsTable.FindUniqueConstraint("PK_Teams")!, ReferentialAction.Cascade);
            var fK_UserParticipations_Teams_TeamIdFk = RelationalModel.GetForeignKey(this,
                "GZCTF.Models.Data.UserParticipation",
                new[] { "TeamId" },
                "GZCTF.Models.Data.Team",
                new[] { "Id" });
            fK_UserParticipations_Teams_TeamId.MappedForeignKeys.Add(fK_UserParticipations_Teams_TeamIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_UserParticipations_Teams_TeamIdFk).Add(fK_UserParticipations_Teams_TeamId);
            userParticipationsTable.ForeignKeyConstraints.Add(fK_UserParticipations_Teams_TeamId);
            teamsTable.ReferencingForeignKeyConstraints.Add(fK_UserParticipations_Teams_TeamId);
            return relationalModel.MakeReadOnly();
        }
    }
}
